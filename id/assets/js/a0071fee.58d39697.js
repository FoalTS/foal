"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[92368],{1384:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"api-section/rest-blueprints","title":"REST API","description":"Example:","source":"@site/versioned_docs/version-1.x/api-section/rest-blueprints.md","sourceDirName":"api-section","slug":"/api-section/rest-blueprints","permalink":"/id/docs/1.x/api-section/rest-blueprints","draft":false,"unlisted":false,"editUrl":"https://github.com/FoalTS/foal/edit/master/docs/versioned_docs/version-1.x/api-section/rest-blueprints.md","tags":[],"version":"1.x","frontMatter":{"title":"REST API"},"sidebar":"someSidebar","previous":{"title":"Serializing & Deserializing","permalink":"/id/docs/1.x/serializing-and-deserializing"},"next":{"title":"OpenAPI & Swagger UI","permalink":"/id/docs/1.x/api-section/openapi-and-swagger-ui"}}');var r=t(74848),s=t(28453);const o={title:"REST API"},d=void 0,a={},l=[{value:"The API Behavior",id:"the-api-behavior",level:2},{value:"The Resource and its Representation",id:"the-resource-and-its-representation",level:2},{value:"How to Add New Field",id:"how-to-add-new-field",level:3},{value:"Using Authentication",id:"using-authentication",level:2},{value:"Generating OpenAPI documentation",id:"generating-openapi-documentation",level:2}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"foal generate rest-api product --register\n"})}),"\n",(0,r.jsx)(n.p,{children:"Building a REST API is often a common task when creating an application. To avoid reinventing the wheel, FoalTS provides a CLI command to achieve this."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"foal generate rest-api <name> [--register] [--auth]\n"})}),"\n",(0,r.jsx)(n.p,{children:"This command generates three files: an entity, a controller and the controller's test. Depending on your directory structure, they may be generated in different locations:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["If two directories ",(0,r.jsx)(n.code,{children:"entities"})," and ",(0,r.jsx)(n.code,{children:"controllers"})," exist, the files are created in these ones."]}),"\n",(0,r.jsx)(n.li,{children:"Otherwise they all are created in the current directory."}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["The generated controller already has a set of implemented routes ",(0,r.jsx)(n.strong,{children:"that you can customize as you like"}),". It defines a REST API and is ready to use. The only thing to do is to connect the controller to the ",(0,r.jsx)(n.code,{children:"AppController"})," or one of its children."]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"--register"})," option automatically registers your controller in the ",(0,r.jsx)(n.code,{children:"AppController"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"the-api-behavior",children:"The API Behavior"}),"\n",(0,r.jsx)(n.p,{children:"Below is a table summarizing how the generated API works:"}),"\n",(0,r.jsxs)(n.p,{children:["| ",(0,r.jsx)(n.em,{children:"HTTP Method"})," | ",(0,r.jsx)(n.em,{children:"CRUD"})," | ",(0,r.jsxs)(n.em,{children:["Entire Collection (e.g. ",(0,r.jsx)(n.code,{children:"/products"}),")"]})," | ",(0,r.jsxs)(n.em,{children:["Specific Item (e.g. ",(0,r.jsx)(n.code,{children:"/products/{id}"}),")"]})," |\n| --- | --- | --- | --- | --- |\n| GET | Read | 200 (OK) - list of products | 200 (OK) - the product ",(0,r.jsx)("br",{})," 404 (Not Found)|\n| POST | Create | 201 (Created) - the created product ",(0,r.jsx)("br",{})," 400 (Bad Request) - the validation error | Not implemented |\n| PUT | Update/Replace | Not implemented | 200 (OK) - the updated product ",(0,r.jsx)("br",{})," 400 (Bad Request) - the validation error ",(0,r.jsx)("br",{})," 404 (Not Found) |\n| PATCH | Update/Modify | Not implemented | 200 (OK) - the updated product ",(0,r.jsx)("br",{})," 400 (Bad Request) - the validation error ",(0,r.jsx)("br",{})," 404 (Not Found) |\n| DELETE | Delete | Not implemented | 204 (No Content) ",(0,r.jsx)("br",{})," 404 (Not Found) |"]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"GET /<name>s"})," routes also accept two optional query parameters ",(0,r.jsx)(n.code,{children:"skip"})," and ",(0,r.jsx)(n.code,{children:"take"})," to handle ",(0,r.jsx)(n.strong,{children:"pagination"}),". If the parameters are not valid numbers, the controller responds with a 400 (Bad Request) status."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"skip"})," - offset from where items should be taken."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"take"})," - max number of items that should be taken."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"GET /products?skip=10&take=20\n"})}),"\n",(0,r.jsx)(n.h2,{id:"the-resource-and-its-representation",children:"The Resource and its Representation"}),"\n",(0,r.jsx)(n.p,{children:"Once your API is set up, you can define its attributes."}),"\n",(0,r.jsx)(n.p,{children:"The entity generated by default should look like this:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class Product {\n\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  text: string;\n\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"And the schema of your API (defined in the controller file) should look like this:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"export const productSchhema = {\n  additionalProperties: false,\n  properties: {\n    text: { type: 'string', maxLength: 255 },\n  },\n  required: [ 'text' ],\n  type: 'object',\n};\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The entity is the ",(0,r.jsx)(n.em,{children:"resource"}),". It is the database model used internally on the server."]}),"\n",(0,r.jsxs)(n.p,{children:["The schema is the ",(0,r.jsx)(n.em,{children:"representation of the resource"}),". It defines the interface of the API."]}),"\n",(0,r.jsx)(n.p,{children:"In simple scenarios, the two are very similar but they can differ much more in complex applications. A resource may have several representations and it may be made of several entities."}),"\n",(0,r.jsx)(n.h3,{id:"how-to-add-new-field",children:"How to Add New Field"}),"\n",(0,r.jsxs)(n.p,{children:["For example, if you want to add a ",(0,r.jsx)(n.code,{children:"sold"})," boolean field whose default value is ",(0,r.jsx)(n.code,{children:"false"}),", you can do the following:"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"product.entity.ts"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class Product {\n\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  text: string;\n\n  @Column()\n  sold: boolean;\n\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"product.controller.ts"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"export const productSchhema = {\n  additionalProperties: false,\n  properties: {\n    sold: { type: 'boolean', default: false },\n    text: { type: 'string', maxLength: 255 },\n  },\n  required: [ 'text' ],\n  type: 'object',\n};\n"})}),"\n",(0,r.jsx)(n.h2,{id:"using-authentication",children:"Using Authentication"}),"\n",(0,r.jsxs)(n.p,{children:["If you wish to attach a user to the resource, you can use the ",(0,r.jsx)(n.code,{children:"--auth"})," flag to do so."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"foal generate rest-api product --auth\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This flags adds an ",(0,r.jsx)(n.code,{children:"owner: User"})," column to your entity and uses it in the API."]}),"\n",(0,r.jsx)(n.h2,{id:"generating-openapi-documentation",children:"Generating OpenAPI documentation"}),"\n",(0,r.jsx)(n.p,{children:"The generated controllers also have OpenAPI decorators on their methods to document the API."}),"\n",(0,r.jsxs)(n.p,{children:["In this way, when the ",(0,r.jsx)(n.a,{href:"/id/docs/1.x/deployment-and-environments/configuration",children:"configuration key"})," ",(0,r.jsx)(n.code,{children:"settings.openapi.useHooks"})," is set to ",(0,r.jsx)(n.code,{children:"true"}),", we can get a full documentation of the API using ",(0,r.jsx)(n.a,{href:"/id/docs/1.x/api-section/openapi-and-swagger-ui",children:"Swagger UI"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.img,{alt:"Example of documentation",src:t(75741).A+"",width:"2538",height:"1298"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>d});var i=t(96540);const r={},s=i.createContext(r);function o(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:n},e.children)}},75741:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/rest-openapi-28b755aa0e71f5a2a6ec387ea2c8ec98.png"}}]);