"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4653],{16314:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>a});var i=n(74848),s=n(28453);const r={title:"Linting and Code Style",sidebar_label:"Linting & Code Style"},o=void 0,l={id:"development-environment/linting-and-code-style",title:"Linting and Code Style",description:"A linter is a tool that analizes source code to flag programming errors, bugs, stylistic errors, and suspicious constructs. In particular, it helps teams to keep the code consistent between their members.",source:"@site/i18n/id/docusaurus-plugin-content-docs/version-2.x/development-environment/linting-and-code-style.md",sourceDirName:"development-environment",slug:"/development-environment/linting-and-code-style",permalink:"/id/docs/2.x/development-environment/linting-and-code-style",draft:!1,unlisted:!1,editUrl:"https://github.com/FoalTS/foal/edit/master/docs/versioned_docs/version-2.x/development-environment/linting-and-code-style.md",tags:[],version:"2.x",frontMatter:{title:"Linting and Code Style",sidebar_label:"Linting & Code Style"},sidebar:"someSidebar",previous:{title:"Code Generation",permalink:"/id/docs/2.x/development-environment/code-generation"},next:{title:"VSCode",permalink:"/id/docs/2.x/development-environment/vscode"}},c={},a=[{value:"ESLint &amp; TypeScript",id:"eslint--typescript",level:2},{value:"Configuration with VSCode",id:"configuration-with-vscode",level:2},{value:"Adding New Rules",id:"adding-new-rules",level:2},{value:"Migrating from TSLint",id:"migrating-from-tslint",level:2}];function d(e){const t={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"A linter is a tool that analizes source code to flag programming errors, bugs, stylistic errors, and suspicious constructs. In particular, it helps teams to keep the code consistent between their members."}),"\n",(0,i.jsxs)(t.p,{children:["For example, with ESLint, the rule ",(0,i.jsx)(t.code,{children:"@typescript-eslint/quotes: single"})," enforces the use of single quotes throughout the code."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:"// Valid\nconst foo = 'bar';\n// Invalid\nconst foo = \"bar\";\n"})}),"\n",(0,i.jsx)(t.h2,{id:"eslint--typescript",children:"ESLint & TypeScript"}),"\n",(0,i.jsxs)(t.p,{children:["FoalTS offers a pre-configuration for the linter ",(0,i.jsx)(t.a,{href:"https://eslint.org/",children:"ESLint"}),". It is the most commonly used in the JavaScript ecosystem and can work with TypeScript through the ",(0,i.jsx)(t.code,{children:"@typescript-eslint/parser"})," and ",(0,i.jsx)(t.code,{children:"@typescript-eslint/eslint-plugin"})," packages."]}),"\n",(0,i.jsx)(t.p,{children:"You can run the linting with this command:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-sh",children:"npm run lint\n"})}),"\n",(0,i.jsx)(t.p,{children:"And if the linting issues can be automatically fixed, you can also fix them with this command:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-sh",children:"npm run lint:fix\n"})}),"\n",(0,i.jsx)(t.h2,{id:"configuration-with-vscode",children:"Configuration with VSCode"}),"\n",(0,i.jsxs)(t.p,{children:["Instructions to configure VSCode with ESLint and TypeScript can be found ",(0,i.jsx)(t.a,{href:"/id/docs/2.x/development-environment/vscode",children:"here"}),"."]}),"\n",(0,i.jsx)(t.h2,{id:"adding-new-rules",children:"Adding New Rules"}),"\n",(0,i.jsxs)(t.p,{children:["The rules are specified in the ",(0,i.jsx)(t.code,{children:".eslintrc"})," configuration file located at the root of the project."]}),"\n",(0,i.jsxs)(t.p,{children:["The list of available JavaScript rules can be found on the ",(0,i.jsx)(t.a,{href:"https://eslint.org/docs/rules/",children:"ESLint website"}),". Some of them are compatible with TypeScript. Others are not and you will need to find equivalents ",(0,i.jsx)(t.a,{href:"https://github.com/typescript-eslint/typescript-eslint/tree/master/packages/eslint-plugin#supported-rules",children:"here"}),"."]}),"\n",(0,i.jsx)(t.h2,{id:"migrating-from-tslint",children:"Migrating from TSLint"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.a,{href:"https://palantir.github.io/tslint/",children:"TSLint"})," is a TypeScript linter that was previously used by FoalTS but has since been ",(0,i.jsx)(t.a,{href:"https://medium.com/palantir/tslint-in-2019-1a144c2317a9",children:"deprecated"}),". This is why new versions of the framework use ESLint."]}),"\n",(0,i.jsxs)(t.p,{children:["In order to migrate from TSLint to ESLint, you can refer to this ",(0,i.jsx)(t.a,{href:"https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/ROADMAP.md",children:"page"}),". It lists all TSLint rules along side rules from the ESLint ecosystem that are identical or similar."]})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>l});var i=n(96540);const s={},r=i.createContext(s);function o(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);