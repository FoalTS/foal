"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9276],{28620:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var s=n(74848),r=n(28453);const o={title:"Pruebas E2E"},a=void 0,i={id:"testing/e2e-testing",title:"Pruebas E2E",description:"End-to-end tests are located in the src/e2e directory.",source:"@site/i18n/es/docusaurus-plugin-content-docs/current/testing/e2e-testing.md",sourceDirName:"testing",slug:"/testing/e2e-testing",permalink:"/es/docs/testing/e2e-testing",draft:!1,unlisted:!1,editUrl:"https://github.com/FoalTS/foal/edit/master/docs/docs/testing/e2e-testing.md",tags:[],version:"current",frontMatter:{title:"Pruebas E2E"},sidebar:"someSidebar",previous:{title:"Pruebas unitarias",permalink:"/es/docs/testing/unit-testing"},next:{title:"Cabeceras de Respuesta",permalink:"/es/docs/security/http-headers-protection"}},d={},c=[{value:"Build and Run E2E Tests",id:"build-and-run-e2e-tests",level:2},{value:"Watch mode (for development)",id:"watch-mode-for-development",level:3},{value:"Simple mode (for CI and Git hooks)",id:"simple-mode-for-ci-and-git-hooks",level:3},{value:"The <code>SuperTest</code> library",id:"the-supertest-library",level:2}];function u(e){const t={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:["End-to-end tests are located in the ",(0,s.jsx)(t.code,{children:"src/e2e"})," directory."]}),"\n",(0,s.jsx)(t.h2,{id:"build-and-run-e2e-tests",children:"Build and Run E2E Tests"}),"\n",(0,s.jsx)(t.h3,{id:"watch-mode-for-development",children:"Watch mode (for development)"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"npm run e2e\n"})}),"\n",(0,s.jsx)(t.p,{children:"This command builds and executes the e2e tests. If you modify a file and save it, the code is rebuilt and the tests are run again. This is particularly useful in development: you do not need to re-run the command every time you make code changes."}),"\n",(0,s.jsx)(t.p,{children:"The process runs forever until you stop it."}),"\n",(0,s.jsx)(t.h3,{id:"simple-mode-for-ci-and-git-hooks",children:"Simple mode (for CI and Git hooks)"}),"\n",(0,s.jsx)(t.p,{children:"If you need to build and run the tests only once, you can use these two commands:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-shell",children:"npm run build:e2e # Build the e2e tests code (compile the typescript files and copy the templates)\nnpm run start:e2e # Execute the e2e tests from the built files\n"})}),"\n",(0,s.jsx)(t.p,{children:"These commands are particularly useful when you want to integrate your tests into a CI pipeline or a Git hook."}),"\n",(0,s.jsxs)(t.h2,{id:"the-supertest-library",children:["The ",(0,s.jsx)(t.code,{children:"SuperTest"})," library"]}),"\n",(0,s.jsxs)(t.p,{children:["You can use ",(0,s.jsx)(t.a,{href:"https://github.com/visionmedia/supertest",children:"the SuperTest library"})," to write your e2e tests. It is installed by default."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.em,{children:"Simple example"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"// 3p\nimport { createApp } from '@foal/core';\nimport * as request from 'supertest';\nimport { DataSource } from 'typeorm';\n\n// App\nimport { AppController } from '../app/app.controller';\nimport { createDataSource } from '../db';\n\ndescribe('The server', () => {\n\n  let app;\n  let dataSource: DataSource;\n\n  before(async () => {\n    app = await createApp(AppController);\n    dataSource = createDataSource();\n    await dataSource.initialize();\n  });\n\n  after(async () => {\n    if (dataSource) {\n      await dataSource.destroy();\n    }\n  });\n\n  it('should return a 200 status on GET / requests.', () => {\n    return request(app)\n      .get('/')\n      .expect(200);\n  });\n\n});\n\n"})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.em,{children:"Advanced example"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"// std\n// The `assert` module provides a simple set of assertion tests.\nimport { ok } from 'assert';\n\n// 3p\nimport { createApp } from '@foal/core';\nimport * as request from 'supertest';\nimport { DataSource } from 'typeorm';\n\n// App\nimport { AppController } from '../app/app.controller';\nimport { User } from '../app/entities';\nimport { createDataSource } from '../db';\n\n// Define a group of tests.\ndescribe('The server', () => {\n\n  let dataSource: DataSource;\n  let app: any;\n\n  // Create the application and the connection to the database before running all the tests.\n  before(async () => {\n    app = await createApp(AppController);\n    dataSource = createDataSource();\n    await dataSource.initialize();\n  });\n\n  // Close the database connection after running all the tests whether they succeed or failed.\n  after(async () => {\n    if (dataSource) {\n      await dataSource.destroy();\n    }\n  });\n\n  // Define a nested group of tests.\n  describe('on GET /api/todos requests', () => {\n\n    it('should return a 401 status if the user did not signed in.', () => {\n      return request(app)\n        .get('/api/todos')\n        .expect(401);\n    });\n\n    it('should return a 200 status if the user did signed in.', async () => {\n      // Create a new user in the empty database.\n      const user = new User();\n      user.email = 'john@foalts.org';\n      await user.setPassword('john_password');\n      await user.save();\n\n      // Log the user in.\n      let cookie = '';\n      await request(app)\n        .post('/auth/login')\n        // Set the body of the request\n        .send({ email: 'john@foalts.org', password: 'john_password' })\n        // The response should have the status 302 (redirection)\n        .expect(302)\n        .then(data => {\n          // The response should set the authentication cookie for the next requests.\n          ok(Array.isArray(data.header['set-cookie']));\n          // Save the cookie to be able to use it in further requests.\n          cookie = data.header['set-cookie'][0];\n        });\n\n      // Test the /api/todos endpoint when the user has logged in.\n      return request(app)\n        .get('/api/todos')\n        // Send the authentication cookie.\n        .set('Cookie', cookie)\n        .expect(200);\n    });\n\n  });\n\n});\n"})})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>i});var s=n(96540);const r={},o=s.createContext(r);function a(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);