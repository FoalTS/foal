"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2839],{28453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>a});var o=t(96540);const s={},r=o.createContext(s);function c(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),o.createElement(r.Provider,{value:n},e.children)}},67321:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>i,frontMatter:()=>c,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"frontend/not-found-page","title":"Page 404","description":"Here\'s a way to implement custom 404 pages.","source":"@site/i18n/es/docusaurus-plugin-content-docs/current/frontend/not-found-page.md","sourceDirName":"frontend","slug":"/frontend/not-found-page","permalink":"/es/docs/frontend/not-found-page","draft":false,"unlisted":false,"editUrl":"https://github.com/FoalTS/foal/edit/master/docs/docs/frontend/not-found-page.md","tags":[],"version":"current","frontMatter":{"title":"Page 404"},"sidebar":"someSidebar","previous":{"title":"Nuxt","permalink":"/es/docs/frontend/nuxt.js"},"next":{"title":"Comandos","permalink":"/es/docs/cli/commands"}}');var s=t(74848),r=t(28453);const c={title:"Page 404"},a=void 0,l={},d=[];function p(e){const n={code:"code",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"Here's a way to implement custom 404 pages."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { Get, HttpResponseNotFound, HttpResponseOK } from '@foal/core';\n\nclass ViewController {\n  @Get('/home')\n  home() {\n    return new HttpResponseOK('You are on the home page!');\n  }\n}\n\nclass AppController {\n  subControllers = [ ViewController ];\n\n  @Get('*')\n  notFound() {\n    return new HttpResponseNotFound('The page you are looking for does not exist.');\n  }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["In case you want to intercept all HTTP verbs (POST, PUT, etc), you can also use the ",(0,s.jsx)(n.code,{children:"@All"})," decorator for this."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { All, HttpResponseNotFound } from '@foal/core';\n\nclass AppController {\n  subControllers = [ ViewController ];\n\n  @All('*')\n  notFound() {\n    return new HttpResponseNotFound('The route you are looking for does not exist.');\n  }\n}\n"})})]})}function i(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}}}]);