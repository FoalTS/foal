"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4326],{28453:(e,t,o)=>{o.d(t,{R:()=>r,x:()=>i});var n=o(96540);const s={},a=n.createContext(s);function r(e){const t=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),n.createElement(a.Provider,{value:t},e.children)}},65699:(e,t,o)=>{o.d(t,{A:()=>n});const n=o.p+"assets/images/unit-tests-output-92ff8a147084006f7e318c124a0f053e.png"},67018:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"tutorials/simple-todo-list/tuto-7-unit-testing","title":"Pruebas Unitarias","description":"El \xfaltimo paso de este tutorial es a\xf1adir algunas pruebas unitarias al ApiController.","source":"@site/i18n/es/docusaurus-plugin-content-docs/version-3.x/tutorials/simple-todo-list/7-unit-testing.md","sourceDirName":"tutorials/simple-todo-list","slug":"/tutorials/simple-todo-list/7-unit-testing","permalink":"/es/docs/3.x/tutorials/simple-todo-list/7-unit-testing","draft":false,"unlisted":false,"editUrl":"https://github.com/FoalTS/foal/edit/master/docs/versioned_docs/version-3.x/tutorials/simple-todo-list/7-unit-testing.md","tags":[],"version":"3.x","sidebarPosition":7,"frontMatter":{"title":"Pruebas Unitarias","id":"tuto-7-unit-testing","slug":"7-unit-testing"},"sidebar":"someSidebar","previous":{"title":"Validaci\xf3n & Sanitizaci\xf3n","permalink":"/es/docs/3.x/tutorials/simple-todo-list/6-validation-and-sanitization"},"next":{"title":"Introducci\xf3n","permalink":"/es/docs/3.x/tutorials/real-world-example-with-react/1-introduction"}}');var s=o(74848),a=o(28453);const r={title:"Pruebas Unitarias",id:"tuto-7-unit-testing",slug:"7-unit-testing"},i=void 0,l={},d=[];function c(e){const t={a:"a",blockquote:"blockquote",code:"code",img:"img",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:["El \xfaltimo paso de este tutorial es a\xf1adir algunas pruebas unitarias al ",(0,s.jsx)(t.code,{children:"ApiController"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["Un archivo de pruebas unitarias termina con la extensi\xf3n ",(0,s.jsx)(t.code,{children:"spec.ts"})," y suele colocarse junto al archivo que est\xe1 probando."]}),"\n",(0,s.jsxs)(t.p,{children:["Abra el archivo ",(0,s.jsx)(t.code,{children:"api.controller.spec.ts"})," y sustituya su contenido."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"// std\n// The `assert` module provides a simple set of assertion tests.\nimport { ok, strictEqual } from 'assert';\n\n// 3p\nimport { createController, getHttpMethod, getPath, isHttpResponseOK } from '@foal/core';\nimport { DataSource } from 'typeorm';\n\n// App\nimport { Todo } from '../entities';\nimport { ApiController } from './api.controller';\nimport { createDataSource } from '../../db';\n\n// Define a group of tests.\ndescribe('ApiController', () => {\n\n  let dataSource: DataSource;\n  let controller: ApiController;\n\n  // Create a connection to the database before running all the tests.\n  before(async () => {\n    // The connection uses the configuration defined in the file config/test.json.\n    // By default, the file has three connection options:\n    // - \"database\": \"./test_db.sqlite3\" -> Use a different database for running the tests.\n    // - \"synchronize\": true ->  Auto create the database schema when the connection is established.\n    // - \"dropSchema\": true -> Drop the schema when the connection is established (empty the database).\n    dataSource = createDataSource();\n    await dataSource.initialize();\n  });\n\n  // Close the database connection after running all the tests whether they succeed or failed.\n  after(async () => {\n    if (dataSource) {\n      await dataSource.close();\n    }\n  });\n\n  // Create or re-create the controller before each test.\n  beforeEach(() => controller = createController(ApiController));\n\n  // Define a nested group of tests.\n  describe('has a \"getTodos\" method that', () => {\n\n    // Define a unit test.\n    it('should handle requests at GET /todos.', () => {\n      // Throw an error and make the test fail if the HTTP method of `getTodos` is not GET.\n      strictEqual(getHttpMethod(ApiController, 'getTodos'), 'GET');\n      // Throw an error and make the test fail if the path of `getTodos` is not /todos.\n      strictEqual(getPath(ApiController, 'getTodos'), '/todos');\n    });\n\n    // Define a unit test.\n    it('should return an HttpResponseOK.', async () => {\n      // Create fake todos.\n      const todo1 = new Todo();\n      todo1.text = 'Todo 1';\n\n      const todo2 = new Todo();\n      todo2.text = 'Todo 2';\n\n      // Save the todos.\n      await Todo.save([ todo1, todo2 ]);\n\n      const response = await controller.getTodos();\n      ok(isHttpResponseOK(response), 'response should be an instance of HttpResponseOK.');\n\n      const body = response.body;\n\n      ok(Array.isArray(body), 'The body of the response should be an array.');\n      strictEqual(body[0].text, 'Todo 1');\n      strictEqual(body[1].text, 'Todo 2');\n    });\n\n  });\n\n});\n\n"})}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsxs)(t.p,{children:["Como un m\xe9todo del controlador devuelve un objeto ",(0,s.jsx)(t.code,{children:"HttpResponse"}),", es realmente f\xe1cil probar el estado y el cuerpo de la respuesta."]}),"\n"]}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsxs)(t.p,{children:["Si el m\xe9todo del controlador toma un objeto ",(0,s.jsx)(t.code,{children:"Context"})," como argumento, puede instanciar uno as\xed ",(0,s.jsx)(t.code,{children:'nuevo Contexto({ /* contenido del objeto "request" de Express */})'}),"."]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"Ejecute las pruebas."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"npm run test\n"})}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsxs)(t.p,{children:["Este comando vigila sus pruebas y archivos probados en los directorios ",(0,s.jsx)(t.code,{children:"app/"})," y ",(0,s.jsx)(t.code,{children:"scripts/"}),". Cuando se modifica un archivo, recompila autom\xe1ticamente y vuelve a ejecutar sus pruebas."]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"Ahora deber\xeda terminar con esta salida:"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Salida de las pruebas unitarias",src:o(65699).A+"",width:"1240",height:"444"})}),"\n",(0,s.jsx)(t.p,{children:"\xa1Enhorabuena! \xa1Ha llegado al final de este tutorial!"}),"\n",(0,s.jsx)(t.p,{children:"Si tiene alguna pregunta, \xa1no dude en abrir una issue en Github!"}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsxs)(t.p,{children:["El c\xf3digo fuente completo est\xe1 disponible ",(0,s.jsx)(t.a,{href:"https://foalts.org/simple-todo-list-source-code-v3.zip",children:"aqu\xed"}),"."]}),"\n"]})]})}function u(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);