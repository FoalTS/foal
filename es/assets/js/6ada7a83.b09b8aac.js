"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9882],{19445:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>i,contentTitle:()=>a,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"api-section/graphql","title":"GraphQL","description":"GraphQL is a query language for APIs. Unlike traditional REST APIs, GraphQL APIs have only one endpoint to which requests are sent. The content of the request describes all the operations to be performed and the data to be returned in the response. Many resources can be retrieved in a single request and the client gets exactly the properties it asks for.","source":"@site/versioned_docs/version-1.x/api-section/graphql.md","sourceDirName":"api-section","slug":"/api-section/graphql","permalink":"/es/docs/1.x/api-section/graphql","draft":false,"unlisted":false,"editUrl":"https://github.com/FoalTS/foal/edit/master/docs/versioned_docs/version-1.x/api-section/graphql.md","tags":[],"version":"1.x","frontMatter":{"title":"GraphQL"},"sidebar":"someSidebar","previous":{"title":"Public API & CORS Requests","permalink":"/es/docs/1.x/api-section/public-api-and-cors-requests"},"next":{"title":"Single Page Applications (SPA)","permalink":"/es/docs/1.x/frontend-integration/single-page-applications"}}');var s=r(74848),t=r(28453);const l={title:"GraphQL"},a=void 0,i={},c=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Using Separate Files for Type Definitions",id:"using-separate-files-for-type-definitions",level:2},{value:"Using a Service for the Root Resolvers",id:"using-a-service-for-the-root-resolvers",level:2},{value:"GraphQL Playground",id:"graphql-playground",level:2},{value:"Error Handling - Masking &amp; Logging Errors",id:"error-handling---masking--logging-errors",level:2},{value:"Authentication &amp; Authorization",id:"authentication--authorization",level:2},{value:"Using TypeGraphQL",id:"using-typegraphql",level:2},{value:"Advanced",id:"advanced",level:2},{value:"Override the Resolver Context",id:"override-the-resolver-context",level:3}];function h(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://graphql.org/",children:"GraphQL"})," is a query language for APIs. Unlike traditional REST APIs, GraphQL APIs have only one endpoint to which requests are sent. The content of the request describes all the operations to be performed and the data to be returned in the response. Many resources can be retrieved in a single request and the client gets exactly the properties it asks for."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Example of request"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'{\n  project(name: "GraphQL") {\n    tagline\n  }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Example of response"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "data": {\n    "project": {\n      "tagline": "A query language for APIs"\n    }\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"The below document assumes that you have a basic knowledge of GraphQL."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["To use GraphQL with FoalTS, you need to install the packages ",(0,s.jsx)(n.code,{children:"graphql"})," and ",(0,s.jsx)(n.code,{children:"@foal/graphql"}),". The first one is maintained by the GraphQL community and parses and resolves queries. The second is specific to FoalTS and allows you to configure a controller compatible with common GraphQL clients (",(0,s.jsx)(n.a,{href:"https://www.npmjs.com/package/graphql-request",children:"graphql-request"}),", ",(0,s.jsx)(n.a,{href:"https://www.apollographql.com/docs/react/",children:"Apollo Client"}),", etc), load type definitions from separate files or handle errors thrown in resolvers."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"npm install graphql @foal/graphql\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Due to a specificity of the ",(0,s.jsx)(n.code,{children:"graphql"})," library, you must also modify your ",(0,s.jsx)(n.code,{children:"tsconfig.json"})," as follows:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "compilerOptions": {\n    ...\n    "lib": [\n      ...\n      "ESNext.AsyncIterable"\n    ]\n  }\n  ...\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,s.jsxs)(n.p,{children:["The main component of the package is the abstract ",(0,s.jsx)(n.code,{children:"GraphQLController"}),". Inheriting this class allows you to create a controller that is compatible with common GraphQL clients (",(0,s.jsx)(n.a,{href:"https://www.npmjs.com/package/graphql-request",children:"graphql-request"}),", ",(0,s.jsx)(n.a,{href:"https://www.apollographql.com/docs/react/",children:"Apollo Client"}),", etc) or any client that follows the HTTP specification defined ",(0,s.jsx)(n.a,{href:"https://graphql.org/learn/serving-over-http/",children:"here"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Here is an example on how to use it with a simple schema and resolver."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"app.controller.ts"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"export class AppController {\n  subControllers = [\n    controller('/graphql', ApiController)\n  ]\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"api.controller.ts"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { GraphQLController } from '@foal/graphql';\nimport { buildSchema } from 'graphql';\n\nconst schema = buildSchema(`\n  type Query {\n    hello: String\n  }\n`);\n\nconst root = {\n  hello: () => {\n    return 'Hello world!';\n  },\n};\n\nexport class ApiController extends GraphQLController {\n  schema = schema;\n  resolvers = root;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"And here is an example of what your client code might look like:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { request } from 'graphql-request';\n\nconst data = await request('/graphql', '{ hello }');\n// data equals \"{ hello: 'Hello world!' }\"\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Alternatively, if you have several strings that define your GraphQL types, you can use the ",(0,s.jsx)(n.code,{children:"schemaFromTypeDefs"})," function to build the schema."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { GraphQLController, schemaFromTypeDefs } from '@foal/graphql';\n\nconst source1 = `\n  type Query {\n    me: User\n  }\n`;\nconst source2 = `\n  type User {\n    id: ID\n    name: String\n  }\n`;\n\n// ...\n\nexport class ApiController extends GraphQLController {\n  schema = schemaFromTypeDefs(source1, source2);\n  // ...\n}\n\n"})}),"\n",(0,s.jsx)(n.h2,{id:"using-separate-files-for-type-definitions",children:"Using Separate Files for Type Definitions"}),"\n",(0,s.jsxs)(n.p,{children:["If you want to specify type definitions in separate files, you can use the ",(0,s.jsx)(n.code,{children:"schemaFromTypeGlob"})," function for this."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Example"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"src/\n'- app/\n  '- controllers/\n    |- query.graphql\n    |- user.graphql\n    '- api.controller.ts\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"query.graphql"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"type Query {\n  me: User\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"user.graphql"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"type User {\n  id: ID\n  name: String\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"api.controller.ts"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { GraphQLController, schemaFromTypeGlob } from '@foal/graphql';\nimport { join } from 'path';\n\nexport class ApiController extends GraphQLController {\n  schema = schemaFromTypeGlob(join(__dirname, '**/*.graphql'));\n  // ...\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Note that for this to work, you must copy the graphql files during the build. To do this, you can update some lines of your ",(0,s.jsx)(n.code,{children:"package.json"})," as follows:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  ...\n  "scripts": {\n    ...\n    "build:app": "copy-cli \\"src/**/*.html\\" build && copy-cli \\"src/**/*.graphql\\" build && tsc -p tsconfig.app.json",\n    ...\n    "build:test": "copy-cli \\"src/**/*.html\\" build && copy-cli \\"src/**/*.graphql\\" && tsc -p tsconfig.test.json",\n    ...\n    "build:e2e": "copy-cli \\"src/**/*.html\\" build && copy-cli \\"src/**/*.graphql\\" && tsc -p tsconfig.e2e.json"\n    ...\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Alternatively, if you want to specify only specific files instead of using a glob pattern, you can call ",(0,s.jsx)(n.code,{children:"schemaFromTypePaths"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { GraphQLController, schemaFromTypePaths } from '@foal/graphql';\nimport { join } from 'path';\n\nexport class ApiController extends GraphQLController {\n  schema = schemaFromTypePaths(\n    join(__dirname, './query.graphql'),\n    join(__dirname, './user.graphql')\n  );\n  // ...\n}\n"})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"using-a-service-for-the-root-resolvers",children:"Using a Service for the Root Resolvers"}),"\n",(0,s.jsxs)(n.p,{children:["Root resolvers can also be grouped into a service in order to benefit from all the advantages offered by services (dependency injection, etc.). All you have to do is add the ",(0,s.jsx)(n.code,{children:"@dependency"})," decorator as you would with any service."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"api.controller.ts"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { dependency } from '@foal/core';\nimport { GraphQLController } from '@foal/graphql';\nimport { RootResolverService } from '../services';\n\n// ...\n\nexport class ApiController extends GraphQLController {\n  schema = // ...\n\n  @dependency\n  resolvers: RootResolverService;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"root-resolver.service.ts"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"export class RootResolverService {\n\n  hello() {\n    return 'Hello world!';\n  }\n\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"graphql-playground",children:"GraphQL Playground"}),"\n",(0,s.jsxs)(n.p,{children:["Next releases of FoalTS will include support for ",(0,s.jsx)(n.a,{href:"https://github.com/graphql/graphiql",children:"GraphiQL"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"error-handling---masking--logging-errors",children:"Error Handling - Masking & Logging Errors"}),"\n",(0,s.jsx)(n.p,{children:"By default, GraphQL returns all errors thrown (or rejected) in the resolvers. However, this behavior is often not desired in production as it could cause sensitive information to leak from the server."}),"\n",(0,s.jsxs)(n.p,{children:["In comparison with REST APIs, when the ",(0,s.jsx)(n.a,{href:"/es/docs/1.x/deployment-and-environments/configuration",children:"configuration key"}),"  ",(0,s.jsx)(n.code,{children:"settings.debug"})," does not equal ",(0,s.jsx)(n.code,{children:"true"})," (production case), details of the errors thrown in controllers are not returned to the client. Only a ",(0,s.jsx)(n.code,{children:"500 - Internal Server Error"})," error is sent back."]}),"\n",(0,s.jsxs)(n.p,{children:["In a similar way, FoalTS provides two utilities ",(0,s.jsx)(n.code,{children:"formatError"})," and ",(0,s.jsx)(n.code,{children:"@FormatError"})," for your GraphQL APIs to log and mask errors.  When ",(0,s.jsx)(n.code,{children:"settings.debug"})," is ",(0,s.jsx)(n.code,{children:"true"}),", the errors are converted into a new one whose unique message is ",(0,s.jsx)(n.code,{children:"Internal Server Error"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Example of GraphQL response in production"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "data": { "user": null },\n  "errors": [\n    {\n      "locations": [ { "column": 2, "line": 1 } ],\n      "message": "Internal Server Error",\n      "path": [ "user" ]\n    }\n  ]\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Here are examples on how to use ",(0,s.jsx)(n.code,{children:"formatError"})," and ",(0,s.jsx)(n.code,{children:"@FormatError"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"function user() {\n  // ...\n}\n\nconst resolvers = {\n  user: formatError(user)\n}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"class ResolverService {\n  @FormatError()\n  user() {\n    // ...\n  }\n}\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Note that ",(0,s.jsx)(n.code,{children:"formatError"})," and ",(0,s.jsx)(n.code,{children:"@FormatError"})," make your functions become asynchronous. This means that any value returned by the function is now a resolved promise of this value, and any errors thrown in the function is converted into a rejected promise. This only has an impact on unit testing as you may need to preceed your function calls by the keyword ",(0,s.jsx)(n.code,{children:"await"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"formatError"})," and ",(0,s.jsx)(n.code,{children:"@FormatError"})," also accept an optional parameter to override its default behavior. It is a function that takes the error thrown or rejected in the resolver and return the error that must be sent to the client. It may be asynchronous or synchronous."]}),"\n",(0,s.jsx)(n.p,{children:"By default, this function is:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"function maskAndLogError(err: any): any {\n  console.log(err);\n\n  if (Config.get('settings.debug')) {\n    return err;\n  }\n\n  return new Error('Internal Server Error');\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"But we can also imagine other implementations such as:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { reportErrorTo3rdPartyService } from 'somewhere';\n\nasync function maskAndLogError(err: any): Promise<any> {\n  console.log(err);\n\n  try {\n    await reportErrorTo3rdPartyService(err);\n  } catch (error) {}\n\n  if (err instanceof MyCustomError) {\n    return err;\n  }\n\n  if (Config.get('settings.debug')) {\n    return err;\n  }\n\n  return new Error('Internal Server Error');\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"authentication--authorization",children:"Authentication & Authorization"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"The below code is an example of managing authentication and authorization with a GraphQL controller."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"api.controller.ts"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { GraphQLController } from '@foal/graphql';\nimport { JWTRequired } from '@foal/jwt';\nimport { fetchUser } from '@foal/typeorm';\nimport { buildSchema } from 'graphql';\n\nimport { User } from '../entities';\n\nconst schema = buildSchema(`\n  type Query {\n    hello: String\n  }\n`);\n\nconst root = {\n  hello: (_, context) => {\n    if (!context.user.isAdmin) {\n      return null;\n    }\n    return 'Hello world!';\n  },\n};\n\n@JWTRequired({ user: fetchUser(User) })\nexport class ApiController extends GraphQLController {\n  schema = schema;\n  resolvers = root;\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"using-typegraphql",children:"Using TypeGraphQL"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.em,{children:[(0,s.jsx)(n.a,{href:"https://typegraphql.com/",children:"TypeGraphQL"})," is a library that allows you to create GraphQL schemas and resolvers with TypeScript classes and decorators."]})}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["You can use TypeGraphQL by simply calling its ",(0,s.jsx)(n.code,{children:"buildSchema"})," function."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Example"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { GraphQLController } from '@foal/graphql';\nimport { buildSchema, Field, ObjectType, Query, Resolver } from 'type-graphql';\n\n@ObjectType()\nclass Recipe {\n  @Field()\n  title: string;\n}\n\n@Resolver(Recipe)\nclass RecipeResolver {\n\n  @Query(returns => Recipe)\n  async recipe() {\n    return {\n      title: 'foobar'\n    };\n  }\n\n}\n\nexport class ApiController extends GraphQLController {\n  schema = buildSchema({\n    resolvers: [ RecipeResolver ]\n  });\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"advanced",children:"Advanced"}),"\n",(0,s.jsx)(n.h3,{id:"override-the-resolver-context",children:"Override the Resolver Context"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.em,{children:"GraphQL context"})," that is passed to the resolvers is by default the ",(0,s.jsx)(n.em,{children:"request context"}),". This behavior can be changed by overriding the ",(0,s.jsx)(n.code,{children:"getResolverContext"})," method."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { Context } from '@foal/core';\nimport { GraphQLController } from '@foal/graphql';\n\nexport class ApiController extends GraphQLController {\n  // ...\n\n  getResolverContext(ctx: Context) {\n    return { user: ctx.user };\n  }\n}\n"})})]})}function d(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>a});var o=r(96540);const s={},t=o.createContext(s);function l(e){const n=o.useContext(t);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),o.createElement(t.Provider,{value:n},e.children)}}}]);