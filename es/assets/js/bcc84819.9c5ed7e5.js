"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2749],{76524:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>d,toc:()=>l});var o=n(74848),a=n(28453);const i={title:"Validaci\xf3n & Sanitizaci\xf3n",id:"tuto-6-validation-and-sanitization",slug:"6-validation-and-sanitization"},s=void 0,d={id:"tutorials/simple-todo-list/tuto-6-validation-and-sanitization",title:"Validaci\xf3n & Sanitizaci\xf3n",description:"Actualmente las entradas recibidas por el servidor no se comprueban. Todo el mundo puede enviar cualquier cosa al solicitar POST /api/todos. Por eso no se puede confiar en las entradas del cliente.",source:"@site/i18n/es/docusaurus-plugin-content-docs/current/tutorials/simple-todo-list/6-validation-and-sanitization.md",sourceDirName:"tutorials/simple-todo-list",slug:"/tutorials/simple-todo-list/6-validation-and-sanitization",permalink:"/es/docs/tutorials/simple-todo-list/6-validation-and-sanitization",draft:!1,unlisted:!1,editUrl:"https://github.com/FoalTS/foal/edit/master/docs/docs/tutorials/simple-todo-list/6-validation-and-sanitization.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{title:"Validaci\xf3n & Sanitizaci\xf3n",id:"tuto-6-validation-and-sanitization",slug:"6-validation-and-sanitization"},sidebar:"someSidebar",previous:{title:"La API REST",permalink:"/es/docs/tutorials/simple-todo-list/5-the-rest-api"},next:{title:"Pruebas Unitarias",permalink:"/es/docs/tutorials/simple-todo-list/7-unit-testing"}},r={},l=[];function c(e){const t={a:"a",blockquote:"blockquote",code:"code",em:"em",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(t.p,{children:["Actualmente las entradas recibidas por el servidor no se comprueban. Todo el mundo puede enviar cualquier cosa al solicitar ",(0,o.jsx)(t.code,{children:"POST /api/todos"}),". Por eso no se puede confiar en las entradas del cliente."]}),"\n",(0,o.jsxs)(t.p,{children:["Utilizar\xe1 los hooks ",(0,o.jsx)(t.code,{children:"ValidateBody"})," y ",(0,o.jsx)(t.code,{children:"ValidatePathParam"})," para validar y sanear los datos entrantes."]}),"\n",(0,o.jsxs)(t.p,{children:["Un ",(0,o.jsx)(t.em,{children:"hook"})," es un decorador que se adjunta a un gestor de rutas (un m\xe9todo del controlador). Se ejecuta antes del m\xe9todo y, por tanto, es especialmente adecuado para la validaci\xf3n o el control de acceso."]}),"\n",(0,o.jsxs)(t.p,{children:["El ",(0,o.jsx)(t.code,{children:"ValidateBody"})," y el ",(0,o.jsx)(t.code,{children:"ValidatePathParam"})," comprueban respectivamente las propiedades ",(0,o.jsx)(t.code,{children:"body"})," y ",(0,o.jsx)(t.code,{children:"params"})," del objeto de petici\xf3n. Toman un esquema como \xfanico argumento."]}),"\n",(0,o.jsxs)(t.blockquote,{children:["\n",(0,o.jsxs)(t.p,{children:["FoalTS utiliza ",(0,o.jsx)(t.a,{href:"https://github.com/epoberezkin/ajv",children:"Ajv"}),", un r\xe1pido validador de esquemas JSON, para definir sus esquemas."]}),"\n"]}),"\n",(0,o.jsxs)(t.p,{children:["Vamos a a\xf1adir validaci\xf3n y sanitizaci\xf3n a su aplicaci\xf3n. De hecho, ya ha definido el esquema de tarea en el script ",(0,o.jsx)(t.code,{children:"crear-todo"})," anterior."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"import {\n  ...\n  ValidateBody, ValidatePathParam\n} from '@foal/core';\n\nexport class ApiController {\n\n  ...\n\n  @Post('/todos')\n  @ValidateBody({\n    // Every additional properties that are not defined in the \"properties\"\n    // object should be removed.\n    additionalProperties: false,\n    properties: {\n      // The \"text\" property of ctx.request.body should be a string if it exists.\n      text: { type: 'string' }\n    },\n    // The property \"text\" is required.\n    required: [ 'text' ],\n    // The body request should be an object once parsed by the framework.\n    type: 'object',\n  })\n  async postTodo(ctx: Context) {\n    const todo = new Todo();\n    todo.text = ctx.request.body.text;\n\n    await todo.save();\n\n    return new HttpResponseCreated(todo);\n  }\n\n  @Delete('/todos/:id')\n  // The id should be a number. If it is not, the hook returns a \"400 - Bad Request\" error.\n  @ValidatePathParam('id', { type: 'number' })\n  async deleteTodo(ctx: Context) {\n    const todo = await Todo.findOneBy({ id: ctx.request.params.id });\n    if (!todo) {\n      return new HttpResponseNotFound();\n    }\n    await todo.remove();\n    return new HttpResponseNoContent();\n  }\n\n}\n\n"})})]})}function u(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>d});var o=n(96540);const a={},i=o.createContext(a);function s(e){const t=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),o.createElement(i.Provider,{value:t},e.children)}}}]);