"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3333],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>c});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=u(n),c=o,h=m["".concat(l,".").concat(c)]||m[c]||p[c]||i;return n?r.createElement(h,a(a({ref:t},d),{},{components:n})):r.createElement(h,a({ref:t},d))}));function c(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var u=2;u<i;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9932:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var r=n(87462),o=(n(67294),n(3905));const i={title:"The User & Todo Models"},a=void 0,s={unversionedId:"tutorials/multi-user-todo-list/tuto-2-the-user-and-todo-models",id:"version-1.x/tutorials/multi-user-todo-list/tuto-2-the-user-and-todo-models",title:"The User & Todo Models",description:"First of all, if you have downloaded the source code of the previous tutorial, compile and run the existing migrations.",source:"@site/versioned_docs/version-1.x/tutorials/multi-user-todo-list/tuto-2-the-user-and-todo-models.md",sourceDirName:"tutorials/multi-user-todo-list",slug:"/tutorials/multi-user-todo-list/tuto-2-the-user-and-todo-models",permalink:"/es/docs/1.x/tutorials/multi-user-todo-list/tuto-2-the-user-and-todo-models",draft:!1,editUrl:"https://github.com/FoalTS/foal/edit/master/docs/versioned_docs/version-1.x/tutorials/multi-user-todo-list/tuto-2-the-user-and-todo-models.md",tags:[],version:"1.x",frontMatter:{title:"The User & Todo Models"},sidebar:"someSidebar",previous:{title:"Introduction",permalink:"/es/docs/1.x/tutorials/multi-user-todo-list/tuto-1-Introduction"},next:{title:"The Shell Scripts",permalink:"/es/docs/1.x/tutorials/multi-user-todo-list/tuto-3-the-shell-scripts"}},l={},u=[{value:"The User Model",id:"the-user-model",level:2},{value:"The Todo Model",id:"the-todo-model",level:2},{value:"The Migrations",id:"the-migrations",level:2}],d={toc:u};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"First of all, if you have downloaded the source code of the previous tutorial, compile and run the existing migrations."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"npm run build:migrations\nnpm run migration:run\n")),(0,o.kt)("h2",{id:"the-user-model"},"The User Model"),(0,o.kt)("p",null,"Then open the ",(0,o.kt)("inlineCode",{parentName:"p"},"user.entity.ts")," file from the ",(0,o.kt)("inlineCode",{parentName:"p"},"src/app/entities")," directory. The ",(0,o.kt)("inlineCode",{parentName:"p"},"User")," entity is the main class used by the framework's authentication system."),(0,o.kt)("p",null,"Add the ",(0,o.kt)("inlineCode",{parentName:"p"},"email")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"password")," properties and the ",(0,o.kt)("inlineCode",{parentName:"p"},"setPassword")," method."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { hashPassword } from '@foal/core';\nimport { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class User {\n\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ unique: true })\n  email: string;\n\n  @Column()\n  password: string;\n\n  async setPassword(password: string) {\n    this.password = await hashPassword(password);\n  }\n\n}\n\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"setPassword")," method uses ",(0,o.kt)("inlineCode",{parentName:"p"},"hashPassword")," to hash passwords before storing them in the database. You must use this method to set a password instead of directly assigning a value to the ",(0,o.kt)("inlineCode",{parentName:"p"},"password")," attribute."),(0,o.kt)("h2",{id:"the-todo-model"},"The Todo Model"),(0,o.kt)("p",null,"The Todo model defined in the previous tutorial now needs a ",(0,o.kt)("inlineCode",{parentName:"p"},"owner")," property to know which user it belongs to."),(0,o.kt)("p",null,"Replace the content of ",(0,o.kt)("inlineCode",{parentName:"p"},"todo.entity.ts"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { User } from './user.entity';\n\n@Entity()\nexport class Todo {\n\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  text: string;\n\n  @ManyToOne(type => User)\n  owner: User;\n\n}\n\n")),(0,o.kt)("p",null,"In the database the ",(0,o.kt)("inlineCode",{parentName:"p"},"todo")," table will look like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"+------------+-----------+-------------------------------------+\n|                             todo                             |\n+------------+-----------+-------------------------------------+\n| id         | integer   | PRIMARY KEY AUTO_INCREMENT NOT NULL |\n| text       | varchar   | NOT NULL                            |\n| ownerId    | integer   |                                     |\n+------------+-----------+-------------------------------------+\n")),(0,o.kt)("h2",{id:"the-migrations"},"The Migrations"),(0,o.kt)("p",null,"The last step is to create/update the tables in the database. As in the first tutorial, you will use migrations for this."),(0,o.kt)("p",null,"Build the application."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"npm run build:app\n")),(0,o.kt)("p",null,"Generate the migrations from the entities."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"npm run migration:generate -- --name=user-and-todo\n")),(0,o.kt)("p",null,"A new file is added in ",(0,o.kt)("inlineCode",{parentName:"p"},"src/migrations"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import {MigrationInterface, QueryRunner} from "typeorm";\n\nexport class userAndTodo1562765487944 implements MigrationInterface {\n\n    public async up(queryRunner: QueryRunner): Promise<void> {\n        // SQL queries...\n    }\n\n    public async down(queryRunner: QueryRunner): Promise<void> {\n        // SQL queries...\n    }\n\n}\n')),(0,o.kt)("p",null,"Then build and run the new migration file."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"npm run build:migrations\nnpm run migration:run\n")))}p.isMDXComponent=!0}}]);