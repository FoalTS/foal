"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1410],{41294:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>l});var n=o(74848),i=o(28453);const a={title:"Validation & Sanitization"},s=void 0,r={id:"tutorials/simple-todo-list/tuto-6-validation-and-sanitization",title:"Validation & Sanitization",description:"Currently inputs received by the server are not checked. Everyone could send anything when requesting POST /api/todos. That's why client inputs cannot be trusted.",source:"@site/versioned_docs/version-1.x/tutorials/simple-todo-list/tuto-6-validation-and-sanitization.md",sourceDirName:"tutorials/simple-todo-list",slug:"/tutorials/simple-todo-list/tuto-6-validation-and-sanitization",permalink:"/es/docs/1.x/tutorials/simple-todo-list/tuto-6-validation-and-sanitization",draft:!1,unlisted:!1,editUrl:"https://github.com/FoalTS/foal/edit/master/docs/versioned_docs/version-1.x/tutorials/simple-todo-list/tuto-6-validation-and-sanitization.md",tags:[],version:"1.x",frontMatter:{title:"Validation & Sanitization"},sidebar:"someSidebar",previous:{title:"The REST API",permalink:"/es/docs/1.x/tutorials/simple-todo-list/tuto-5-the-rest-api"},next:{title:"Unit Testing",permalink:"/es/docs/1.x/tutorials/simple-todo-list/tuto-7-unit-testing"}},d={},l=[];function c(e){const t={a:"a",blockquote:"blockquote",code:"code",em:"em",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.p,{children:["Currently inputs received by the server are not checked. Everyone could send anything when requesting ",(0,n.jsx)(t.code,{children:"POST /api/todos"}),". That's why client inputs cannot be trusted."]}),"\n",(0,n.jsxs)(t.p,{children:["You will use the ",(0,n.jsx)(t.code,{children:"ValidateBody"})," and ",(0,n.jsx)(t.code,{children:"ValidatePathParam"})," hooks to validate and sanitize incoming data."]}),"\n",(0,n.jsxs)(t.p,{children:["A ",(0,n.jsx)(t.em,{children:"hook"})," is a decorator that is attached to a route handler (a controller method). It is executed before the method and is therefore particularly suitable for validation or access control."]}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"ValidateBody"})," and ",(0,n.jsx)(t.code,{children:"ValidatePathParam"})," check respectively the ",(0,n.jsx)(t.code,{children:"body"})," and ",(0,n.jsx)(t.code,{children:"params"})," properties of the request object. They take a schema as unique argument."]}),"\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsxs)(t.p,{children:["FoalTS uses ",(0,n.jsx)(t.a,{href:"https://github.com/epoberezkin/ajv",children:"Ajv"}),", a fast JSON Schema validator, to define its schemas."]}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["Let's add validation and sanitization to your application. In fact, you have already defined the todo schema in the ",(0,n.jsx)(t.code,{children:"create-todo"})," script earlier."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:"import {\n  ...\n  ValidateBody, ValidatePathParam\n} from '@foal/core';\n\nexport class ApiController {\n\n  ...\n\n  @Post('/todos')\n  @ValidateBody({\n    // The body request should be an object once parsed by the framework.\n    // Every additional properties that are not defined in the \"properties\"\n    // object should be removed.\n    additionalProperties: false,\n    properties: {\n      // The \"text\" property of ctx.request.body should be a string if it exists.\n      text: { type: 'string' }\n    },\n    // The property \"text\" is required.\n    required: [ 'text' ],\n    type: 'object',\n  })\n  async postTodo(ctx: Context) {\n    const todo = new Todo();\n    todo.text = ctx.request.body.text;\n\n    await getRepository(Todo).save(todo);\n\n    return new HttpResponseCreated(todo);\n  }\n\n  @Delete('/todos/:id')\n  // The id should be a number. If it is not, the hook returns a \"400 - Bad Request\" error.\n  @ValidatePathParam('id', { type: 'number' })\n  async deleteTodo(ctx: Context) {\n    const todo = await getRepository(Todo).findOne({ id: +ctx.request.params.id });\n    if (!todo) {\n      return new HttpResponseNotFound();\n    }\n    await getRepository(Todo).remove(todo);\n    return new HttpResponseNoContent();\n  }\n\n}\n\n"})})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},28453:(e,t,o)=>{o.d(t,{R:()=>s,x:()=>r});var n=o(96540);const i={},a=n.createContext(i);function s(e){const t=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),n.createElement(a.Provider,{value:t},e.children)}}}]);