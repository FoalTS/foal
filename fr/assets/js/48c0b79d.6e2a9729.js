"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8800],{28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var o=n(96540);const s={},i=o.createContext(s);function r(e){const t=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),o.createElement(i.Provider,{value:t},e.children)}},61564:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"tutorials/simple-todo-list/tuto-7-unit-testing","title":"Tests Unitaires","description":"La derni\xe8re \xe9tape de ce tutoriel consiste \xe0 ajouter des tests unitaires \xe0 l\'ApiController.","source":"@site/i18n/fr/docusaurus-plugin-content-docs/version-3.x/tutorials/simple-todo-list/7-unit-testing.md","sourceDirName":"tutorials/simple-todo-list","slug":"/tutorials/simple-todo-list/7-unit-testing","permalink":"/fr/docs/3.x/tutorials/simple-todo-list/7-unit-testing","draft":false,"unlisted":false,"editUrl":"https://github.com/FoalTS/foal/edit/master/docs/versioned_docs/version-3.x/tutorials/simple-todo-list/7-unit-testing.md","tags":[],"version":"3.x","sidebarPosition":7,"frontMatter":{"title":"Tests Unitaires","id":"tuto-7-unit-testing","slug":"7-unit-testing"},"sidebar":"someSidebar","previous":{"title":"Validation & Assainissement","permalink":"/fr/docs/3.x/tutorials/simple-todo-list/6-validation-and-sanitization"},"next":{"title":"Introduction","permalink":"/fr/docs/3.x/tutorials/real-world-example-with-react/1-introduction"}}');var s=n(74848),i=n(28453);const r={title:"Tests Unitaires",id:"tuto-7-unit-testing",slug:"7-unit-testing"},a=void 0,c={},l=[];function d(e){const t={a:"a",blockquote:"blockquote",code:"code",img:"img",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:["La derni\xe8re \xe9tape de ce tutoriel consiste \xe0 ajouter des tests unitaires \xe0 l'",(0,s.jsx)(t.code,{children:"ApiController"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["Un fichier de test unitaire se termine par l'extension ",(0,s.jsx)(t.code,{children:"spec.ts"})," et est g\xe9n\xe9ralement plac\xe9 \xe0 c\xf4t\xe9 du fichier qu'il teste."]}),"\n",(0,s.jsxs)(t.p,{children:["Ouvrez le fichier ",(0,s.jsx)(t.code,{children:"api.controller.spec.ts"})," et remplacez son contenu."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"// std\n// The `assert` module provides a simple set of assertion tests.\nimport { ok, strictEqual } from 'assert';\n\n// 3p\nimport { createController, getHttpMethod, getPath, isHttpResponseOK } from '@foal/core';\nimport { DataSource } from 'typeorm';\n\n// App\nimport { Todo } from '../entities';\nimport { ApiController } from './api.controller';\nimport { createDataSource } from '../../db';\n\n// Define a group of tests.\ndescribe('ApiController', () => {\n\n  let dataSource: DataSource;\n  let controller: ApiController;\n\n  // Create a connection to the database before running all the tests.\n  before(async () => {\n    // The connection uses the configuration defined in the file config/test.json.\n    // By default, the file has three connection options:\n    // - \"database\": \"./test_db.sqlite3\" -> Use a different database for running the tests.\n    // - \"synchronize\": true ->  Auto create the database schema when the connection is established.\n    // - \"dropSchema\": true -> Drop the schema when the connection is established (empty the database).\n    dataSource = createDataSource();\n    await dataSource.initialize();\n  });\n\n  // Close the database connection after running all the tests whether they succeed or failed.\n  after(async () => {\n    if (dataSource) {\n      await dataSource.close();\n    }\n  });\n\n  // Create or re-create the controller before each test.\n  beforeEach(() => controller = createController(ApiController));\n\n  // Define a nested group of tests.\n  describe('has a \"getTodos\" method that', () => {\n\n    // Define a unit test.\n    it('should handle requests at GET /todos.', () => {\n      // Throw an error and make the test fail if the HTTP method of `getTodos` is not GET.\n      strictEqual(getHttpMethod(ApiController, 'getTodos'), 'GET');\n      // Throw an error and make the test fail if the path of `getTodos` is not /todos.\n      strictEqual(getPath(ApiController, 'getTodos'), '/todos');\n    });\n\n    // Define a unit test.\n    it('should return an HttpResponseOK.', async () => {\n      // Create fake todos.\n      const todo1 = new Todo();\n      todo1.text = 'Todo 1';\n\n      const todo2 = new Todo();\n      todo2.text = 'Todo 2';\n\n      // Save the todos.\n      await Todo.save([ todo1, todo2 ]);\n\n      const response = await controller.getTodos();\n      ok(isHttpResponseOK(response), 'response should be an instance of HttpResponseOK.');\n\n      const body = response.body;\n\n      ok(Array.isArray(body), 'The body of the response should be an array.');\n      strictEqual(body[0].text, 'Todo 1');\n      strictEqual(body[1].text, 'Todo 2');\n    });\n\n  });\n\n});\n\n"})}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsxs)(t.p,{children:["Comme une m\xe9thode de contr\xf4le renvoie un objet ",(0,s.jsx)(t.code,{children:"HttpResponse"}),", il est tr\xe8s facile de tester le statut et le corps de la r\xe9ponse."]}),"\n"]}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsxs)(t.p,{children:["Si la m\xe9thode du contr\xf4leur prend un objet ",(0,s.jsx)(t.code,{children:"Context"})," comme argument, vous pouvez en instancier un comme ceci : ",(0,s.jsx)(t.code,{children:"new Context({ /* content of the express request object */})"}),"."]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"Ex\xe9cutez les tests."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"npm run test\n"})}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsxs)(t.p,{children:["Cette commande surveille vos tests et vos fichiers test\xe9s dans les r\xe9pertoires ",(0,s.jsx)(t.code,{children:"app/"})," et ",(0,s.jsx)(t.code,{children:"scripts/"}),". Lorsqu'un fichier est modifi\xe9, elle recompile et relance automatiquement vos tests."]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"Vous devriez maintenant vous retrouver avec cette sortie :"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Sortie des tests unitaires",src:n(72415).A+"",width:"1240",height:"444"})}),"\n",(0,s.jsx)(t.p,{children:"F\xe9licitations ! Vous avez atteint la fin de ce tutoriel !"}),"\n",(0,s.jsx)(t.p,{children:"Si vous avez des questions, n'h\xe9sitez pas \xe0 ouvrir une issue sur Github !"}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsxs)(t.p,{children:["Le code source complet est disponible ",(0,s.jsx)(t.a,{href:"https://foalts.org/simple-todo-list-source-code-v3.zip",children:"ici"}),"."]}),"\n"]})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},72415:(e,t,n)=>{n.d(t,{A:()=>o});const o=n.p+"assets/images/unit-tests-output-92ff8a147084006f7e318c124a0f053e.png"}}]);