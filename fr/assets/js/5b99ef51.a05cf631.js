"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1023],{87640:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>a});var o=s(74848),t=s(28453);const i={title:"Session Tokens",sidebar_label:"Session Tokens (authentication)"},r=void 0,c={id:"authentication-and-access-control/session-tokens",title:"Session Tokens",description:"Introduction",source:"@site/versioned_docs/version-1.x/authentication-and-access-control/session-tokens.md",sourceDirName:"authentication-and-access-control",slug:"/authentication-and-access-control/session-tokens",permalink:"/fr/docs/1.x/authentication-and-access-control/session-tokens",draft:!1,unlisted:!1,editUrl:"https://github.com/FoalTS/foal/edit/master/docs/versioned_docs/version-1.x/authentication-and-access-control/session-tokens.md",tags:[],version:"1.x",frontMatter:{title:"Session Tokens",sidebar_label:"Session Tokens (authentication)"},sidebar:"someSidebar",previous:{title:"Passwords",permalink:"/fr/docs/1.x/authentication-and-access-control/password-management"},next:{title:"JSON Web Tokens (authentication)",permalink:"/fr/docs/1.x/authentication-and-access-control/jwt"}},d={},a=[{value:"Introduction",id:"introduction",level:2},{value:"Get Started",id:"get-started",level:2},{value:"Provide a Secret",id:"provide-a-secret",level:3},{value:"Choose a Session Store",id:"choose-a-session-store",level:3},{value:"Create the Session and Get the Token (Log In)",id:"create-the-session-and-get-the-token-log-in",level:3},{value:"Use the Session Token to Retrieve the Session",id:"use-the-session-token-to-retrieve-the-session",level:3},{value:"Destroy the Session (Log Out)",id:"destroy-the-session-log-out",level:3},{value:"Usage with Cookies",id:"usage-with-cookies",level:2},{value:"Specify the Name of the Session Store in the Configuration",id:"specify-the-name-of-the-session-store-in-the-configuration",level:2},{value:"Update the Session Content",id:"update-the-session-content",level:2},{value:"Session Expiration Timeouts",id:"session-expiration-timeouts",level:2},{value:"Revoking Sessions",id:"revoking-sessions",level:2},{value:"Revoking One Session",id:"revoking-one-session",level:3},{value:"Revoking All Sessions",id:"revoking-all-sessions",level:3},{value:"Specifying Globally the Session Store",id:"specifying-globally-the-session-store",level:2},{value:"Session Stores",id:"session-stores",level:2},{value:"TypeORMStore (SQL Databases: Postgres, MySQL, SQLite, etc)",id:"typeormstore-sql-databases-postgres-mysql-sqlite-etc",level:3},{value:"RedisStore",id:"redisstore",level:3},{value:"MongoDBStore",id:"mongodbstore",level:3},{value:"Custom Store",id:"custom-store",level:3}];function l(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["This document assumes that you have alread read the ",(0,o.jsx)(n.a,{href:"/fr/docs/1.x/authentication-and-access-control/quick-start",children:"Quick Start"})," page."]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"In FoalTS, web sessions are temporary states associated with a specific user. They are identified by a token and are mainly used to keep users authenticated between several HTTP requests (the client sends the token on each request to authenticate the user)."}),"\n",(0,o.jsx)(n.p,{children:"A session usually begins when the user logs in and ends after a period of inactivity or when the user logs out. By inactivity, we mean that the server no longer receives requests from the authenticated user for a certain period of time."}),"\n",(0,o.jsx)(n.h2,{id:"get-started",children:"Get Started"}),"\n",(0,o.jsx)(n.h3,{id:"provide-a-secret",children:"Provide a Secret"}),"\n",(0,o.jsx)(n.p,{children:"In order to use sessions, you must provide a base64-encoded secret in either:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"a configuration file"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"Example with config/default.yml"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"settings:\n  session:\n    secret: xxx\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["or in a ",(0,o.jsx)(n.code,{children:".env"})," file or in an environment variable:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"SETTINGS_SESSION_SECRET=xxx\n"})}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"You can generate such a secret with the CLI command:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"foal createsecret\n"})}),"\n",(0,o.jsx)(n.h3,{id:"choose-a-session-store",children:"Choose a Session Store"}),"\n",(0,o.jsxs)(n.p,{children:["Then you have to choose where the temporary session state will be stored. FoalTS provides several ",(0,o.jsx)(n.em,{children:"session stores"})," for this. For example, you can use the ",(0,o.jsx)(n.code,{children:"TypeORMStore"})," to save the sessions in your SQL database or the ",(0,o.jsx)(n.code,{children:"RedisStore"})," to save them in a redis cache."]}),"\n",(0,o.jsx)(n.p,{children:"These session stores are services and can therefore be injected into your controllers and services as such:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"export class AuthController {\n  @dependency\n  store: TypeORMStore;\n\n  @Post('/login')\n  // ...\n  login() {\n    // ...\n    const store = this.store;\n  }\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"create-the-session-and-get-the-token-log-in",children:"Create the Session and Get the Token (Log In)"}),"\n",(0,o.jsxs)(n.p,{children:["Sessions are created using the method ",(0,o.jsx)(n.code,{children:"createAndSaveSessionFromUser"})," of the session store. It takes one parameter: an object that must have an ",(0,o.jsx)(n.code,{children:"id"})," attribute (the user id). At login time, the user is usually retrieved upstream when checking credentials."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"const session = await store.createAndSaveSessionFromUser(user);\n// Alternatively, you can also call the `createAndSaveSession` method as follows:\nconst session = await store.createAndSaveSession({ userId: user.id });\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The session token then can be read with the method ",(0,o.jsx)(n.code,{children:"getToken()"})," to send it back to the client. This token identifies the session."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"const token = session.getToken();\n"})}),"\n",(0,o.jsx)(n.h3,{id:"use-the-session-token-to-retrieve-the-session",children:"Use the Session Token to Retrieve the Session"}),"\n",(0,o.jsxs)(n.p,{children:["On each subsequent request, the client must send this token in order to retrieve the session and authenticate the user. It must be included in the ",(0,o.jsx)(n.code,{children:"Authorization"})," header using the bearer scheme (unless you use cookies, see section below)."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"Authorization: Bearer my-session-token\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The hooks ",(0,o.jsx)(n.code,{children:"@TokenRequired"})," and ",(0,o.jsx)(n.code,{children:"@TokenOptional"})," will then check the token and retrieve the associated session and user."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import { Context, Get, HttpResponseOK, TokenRequired } from '@foal/core';\nimport { TypeORMStore } from '@foal/typeorm';\n\n@TokenRequired({ store: TypeORMStore })\nclass ApiController {\n\n  @Get('/products')\n  readProducts(ctx: Context) {\n    // ctx.user and ctx.session are defined.\n    return new HttpResponseOK();\n  }\n\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["If the header ",(0,o.jsx)(n.code,{children:"Authorization"})," is not found or does not use the ",(0,o.jsx)(n.code,{children:"bearer"})," scheme, the hook ",(0,o.jsx)(n.code,{children:"@TokenRequired"})," returns an error ",(0,o.jsx)(n.em,{children:"400 - BAD REQUEST"}),". The ",(0,o.jsx)(n.code,{children:"@TokenOptional"})," hook does nothing."]}),"\n",(0,o.jsxs)(n.p,{children:["If the token is present and not valid or if the associated session has expired, both hooks return an error ",(0,o.jsx)(n.em,{children:"401 - UNAUTHORIZED"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["In other cases, the hooks retrieve the session from the store and assign it to the ",(0,o.jsx)(n.code,{children:"Context.session"})," property. As for the session user ID, it is assigned to ",(0,o.jsx)(n.code,{children:"Context.user"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["If you want the ",(0,o.jsx)(n.code,{children:"ctx.user"})," to be an object or an instance of the ",(0,o.jsx)(n.code,{children:"User"})," class, you must pass to the hook ",(0,o.jsx)(n.code,{children:"user"})," option a function whose signature is:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"(id: string|number) => Promise<any|undefined>\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The hooks will assign the value it returns to ",(0,o.jsx)(n.code,{children:"ctx.user"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["For example, you can use the ",(0,o.jsx)(n.code,{children:"fetchUser"})," function to retrieve the user from the database:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import { Context, Get, HttpResponseOK, TokenRequired } from '@foal/core';\nimport { fetchUser, TypeORMStore } from '@foal/typeorm';\n\nimport { User } from '../entities';\n\n@TokenRequired({\n  store: TypeORMStore,\n  user: fetchUser(User)\n})\nclass ApiController {\n\n  @Get('/products')\n  readProducts(ctx: Context) {\n    // ctx.user is an instance of User\n    return new HttpResponseOK();\n  }\n\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsxs)(n.em,{children:["Note: The hooks ",(0,o.jsx)(n.code,{children:"@TokenRequired"})," and ",(0,o.jsx)(n.code,{children:"@TokenOptional"})," are responsible for extending the session life each time a request is received."]})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:"Alternatively, you can also manually verify a session token and read its associated session. The code below shows how to do so."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"const token = // ...\nconst sessionID = Session.verifyTokenAndGetId(token);\nif (!sessionID) {\n  throw new Error('Invalid session token.');\n}\nconst session = await store.read(sessionID);\nif (!session) {\n  throw new Error('Session does not exist or has expired.')\n}\nconst userId = session.get('userId');\n"})}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"destroy-the-session-log-out",children:"Destroy the Session (Log Out)"}),"\n",(0,o.jsxs)(n.p,{children:["Sessions are can be destroyed (i.e users can be logged out) using the ",(0,o.jsx)(n.code,{children:"destroy"})," method of the session store."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import { Context, dependency, HttpResponseNoContent, TokenRequired, Session } from '@foal/core';\nimport { TypeORMStore } from '@foal/typeorm';\n\nexport class AuthController {\n  @dependency\n  store: TypeORMStore;\n\n  @Post('/logout')\n  @TokenRequired({ store: TypeORMStore, extendLifeTimeOrUpdate: false })\n  async logout(ctx: Context<any, Session>) {\n    await this.store.destroy(ctx.session.sessionID);\n    return new HttpResponseNoContent();\n  }\n\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"usage-with-cookies",children:"Usage with Cookies"}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["Be aware that if you use cookies, your application must provide a ",(0,o.jsx)(n.a,{href:"/fr/docs/1.x/security/csrf-protection",children:"CSRF defense"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["FoalTS sessions can also be used with cookies. The hook ",(0,o.jsx)(n.code,{children:"cookie"})," option and the ",(0,o.jsx)(n.code,{children:"setSessionCookie"})," and ",(0,o.jsx)(n.code,{children:"removeSessionCookie"})," funtions are dedicated to this use."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import { HttpResponseOK, Post, removeSessionCookie, setSessionCookie, TokenRequired } from '@foal/core';\n\nexport class AuthController {\n\n  @Post('/login')\n  // ...\n  login() {\n    // ...\n    const response = new HttpResponseOK();\n    setSessionCookie(response, session.getToken());\n    return response;\n  }\n\n  @Post('/logout')\n  // ...\n  logout() {\n    // ...\n    const response = new HttpResponseOK();\n    removeSessionCookie(response);\n    return response;\n  }\n\n}\n\n@TokenRequired({ store: MyStore, cookie: true })\nexport class ApiController {\n\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"The cookie default directives can be override in the configuration."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"Example with config/default.yml"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"settings:\n  session:\n    cookie:\n      name: xxx\n      domain: example.com\n      httpOnly: false # default: true\n      path: /foo # default: /\n      sameSite: lax\n      secure: true\n"})}),"\n",(0,o.jsx)(n.p,{children:"Instead of having 400 and 401 HTTP errors, you can also define redirections."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"@TokenRequired({\n  store: TypeORMStore,\n  cookie: true;\n  redirectTo: '/login'\n})\nexport class PageController {\n  // ...\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"specify-the-name-of-the-session-store-in-the-configuration",children:"Specify the Name of the Session Store in the Configuration"}),"\n",(0,o.jsx)(n.p,{children:"In order to avoid duplicates, the name of the session package can also be provided in the configuration."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "settings": {\n    "session": {\n      "store": "@foal/typeorm"\n    }\n  }\n}\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"export class Controller {\n\n  @dependency\n  store: SessionStore;\n\n  // ...\n  login() {\n    // this.store.createAndSaveSessionFromUser(...)\n  }\n\n  // ...\n  @TokenRequired()\n  protectedRoute() {\n\n  }\n\n}\n"})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["The configuration also supports relative paths. See ",(0,o.jsx)(n.a,{href:"/fr/docs/1.x/architecture/services-and-dependency-injection#abstract-services",children:"abstract services"}),"."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"update-the-session-content",children:"Update the Session Content"}),"\n",(0,o.jsxs)(n.p,{children:["When receiving an HTTP request, the hooks ",(0,o.jsx)(n.code,{children:"@TokenRequired"})," and ",(0,o.jsx)(n.code,{children:"@TokenOptional"})," convert the session token (if it exists and is valid) into a ",(0,o.jsx)(n.code,{children:"Session"})," instance retrieved from the session store. This object is assigned to the ",(0,o.jsx)(n.code,{children:"Context.session"})," property and is accessible in the remaining hooks and in the controller method."]}),"\n",(0,o.jsxs)(n.p,{children:["You can access and modify the session content with the ",(0,o.jsx)(n.code,{children:"set"})," and ",(0,o.jsx)(n.code,{children:"get"})," methods."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import { Context, HttpResponseNoContent, Post, Session, TokenRequired } from '@foal/core';\n\n@TokenRequired(/* ... */)\nexport class ApiController {\n\n  @Post('/subscribe')\n  purchase(ctx: Context<any, Session>) {\n    const plan = ctx.session.get<string>('plan', 'free');\n    // ...\n  }\n\n  @Post('/choose-premium-plan')\n  addToCart(ctx: Context<any, Session>) {\n    ctx.session.set('plan', 'premium');\n    return new HttpResponseNoContent();\n  }\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"session-expiration-timeouts",children:"Session Expiration Timeouts"}),"\n",(0,o.jsx)(n.p,{children:"Session states are by definition temporary. They have two expiration timeouts."}),"\n",(0,o.jsxs)(n.p,{children:["The first one is the inactivity (or idle) timeout. If the session is not updated or its lifetime is not extended, the session is destroyed. The ",(0,o.jsx)(n.code,{children:"@TokenRequired"})," and ",(0,o.jsx)(n.code,{children:"@TokenOptional"})," take care of extending the session lifetime on each request. Its default value is 15 minutes."]}),"\n",(0,o.jsx)(n.p,{children:"The second is the absolute timeout. Whatever the activity is, the session will expire after a fixed period of time. The default value is one week."}),"\n",(0,o.jsxs)(n.p,{children:["These values can be override with the ",(0,o.jsx)(n.a,{href:"/fr/docs/1.x/deployment-and-environments/configuration",children:"configuration keys"})," ",(0,o.jsx)(n.code,{children:"settings.session.expirationTimeouts.inactivity"})," and ",(0,o.jsx)(n.code,{children:"settings.session.expirationTimeouts.absolute"}),". The time periods must be specified in seconds."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"Example with config/default.yml"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"settings:\n  session:\n    secret: xxx\n    expirationTimeouts:\n      absolute: 2592000 # 30 days\n      inactivity: 1800 # 30 min\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"Example with .env"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"SETTINGS_SESSION_EXPIRATION_TIMEOUTS_ABSOLUTE=2592000\nSETTINGS_SESSION_EXPIRATION_TIMEOUTS_INACTIVITY=1800\n"})}),"\n",(0,o.jsx)(n.h2,{id:"revoking-sessions",children:"Revoking Sessions"}),"\n",(0,o.jsxs)(n.p,{children:["Sessions can be revoked (i.e. destroyed) using the methods ",(0,o.jsx)(n.code,{children:"destroy"})," and ",(0,o.jsx)(n.code,{children:"clear"})," of the session stores. The examples below show how to use these methods in ",(0,o.jsx)(n.em,{children:"shell scripts"}),"."]}),"\n",(0,o.jsx)(n.h3,{id:"revoking-one-session",children:"Revoking One Session"}),"\n",(0,o.jsxs)(n.p,{children:["Create a new file named ",(0,o.jsx)(n.code,{children:"src/scripts/revoke-session.ts"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import { createService, Session } from '@foal/core';\nimport { TypeORMStore } from '@foal/typeorm';\nimport { createConnection } from 'typeorm';\n\nexport const schema = {\n  type: 'object',\n  properties: {\n    sessionID: { type: 'string' },\n    token: { type: 'string' },\n  }\n}\n\nexport async function main(args: { sessionID?: string, token?: string }) {\n  if (!args.sessionID && !args.token) {\n    console.error('You must provide the session token or session ID.');\n    return;\n  }\n  \n  await createConnection();\n\n  if (!args.sessionID) {\n    const sessionID = Session.verifyTokenAndGetId(args.token);\n    if (!sessionID) {\n      console.error('Invalid session token');\n      return;\n    }\n    args.sessionID = sessionID;\n  }\n\n  const store = createService(TypeORMStore); // OR MongoDBStore, RedisStore, etc\n  await store.destroy(args.sessionID);\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"Build the script."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"npm run build:scripts\n"})}),"\n",(0,o.jsx)(n.p,{children:"Run the script."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'foal run revoke-session token="xxx.yyy"\nfoal run revoke-session sessionID="xxx"\n'})}),"\n",(0,o.jsx)(n.h3,{id:"revoking-all-sessions",children:"Revoking All Sessions"}),"\n",(0,o.jsxs)(n.p,{children:["Create a new file named ",(0,o.jsx)(n.code,{children:"src/scripts/revoke-all-sessions.ts"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import { createService } from '@foal/core';\nimport { TypeORMStore } from '@foal/typeorm';\nimport { createConnection } from 'typeorm';\n\nexport async function main() {\n  await createConnection();\n\n  const store = createService(TypeORMStore); // OR MongoDBStore, RedisStore, etc\n  await store.clear();\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"Build the script."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"npm run build:scripts\n"})}),"\n",(0,o.jsx)(n.p,{children:"Run the script."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"foal run revoke-all-sessions\n"})}),"\n",(0,o.jsx)(n.h2,{id:"specifying-globally-the-session-store",children:"Specifying Globally the Session Store"}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:"Available in Foal v1.11.0 onwards."}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"In order to avoid passing the session store to the hooks each time, you can provide it via the configuration."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"default.yml"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"settings:\n  session:\n    store: '@foal/typeorm' # or '@foal/mongodb' or '@foal/redis'\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// Before\n@TokenRequired({ store: TypeORMStore })\nexport class ApiController {\n  // ...\n}\n\n// After\n@TokenRequired()\nexport class ApiController {\n  // ...\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"session-stores",children:"Session Stores"}),"\n",(0,o.jsxs)(n.p,{children:["FoalTS currently offers three built-in session stores: ",(0,o.jsx)(n.code,{children:"TypeORMStore"}),", ",(0,o.jsx)(n.code,{children:"MongoDBStore"})," ",(0,o.jsx)(n.code,{children:"RedisStore"}),". Others will come in the future. If you need a specific one, you can submit a Github issue or even create your own store (see section below)."]}),"\n",(0,o.jsx)(n.h3,{id:"typeormstore-sql-databases-postgres-mysql-sqlite-etc",children:"TypeORMStore (SQL Databases: Postgres, MySQL, SQLite, etc)"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"npm install typeorm @foal/typeorm\n"})}),"\n",(0,o.jsxs)(n.p,{children:["This store uses the default TypeORM connection which is usually specified in ",(0,o.jsx)(n.code,{children:"ormconfig.{json|yml|js}"}),". This means that session states are saved in your SQL database (using the table ",(0,o.jsx)(n.code,{children:"foal_session"}),")."]}),"\n",(0,o.jsxs)(n.p,{children:["Due to the nature of SQL databases, not all expired sessions are deleted by default (we cannot define a time period after which a SQL row must be deleted). However, the session store provides us with a ",(0,o.jsx)(n.code,{children:"cleanUpExpiredSessions"})," function to manually delete all expired sessions. It is recommended to periodically call this method using, for example, a shell script."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"src/scripts/clean-up-expired-sessions.ts"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import { createService } from '@foal/core';\nimport { TypeORMStore } from '@foal/typeorm';\nimport { createConnection } from 'typeorm';\n\nexport async function main() {\n  await createConnection();\n\n  const store = createService(TypeORMStore);\n  await store.cleanUpExpiredSessions();\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"Build the script."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"npm run build:scripts\n"})}),"\n",(0,o.jsx)(n.p,{children:"Run the script."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"foal run clean-up-expired-sessions\n"})}),"\n",(0,o.jsx)(n.h3,{id:"redisstore",children:"RedisStore"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"npm install @foal/redis\n"})}),"\n",(0,o.jsx)(n.p,{children:"In order to use this store, you must provide the redis URI in either:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"a configuration file"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"Example with config/default.yml"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"redis:\n  uri: 'redis://localhost:6379'\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["or in a ",(0,o.jsx)(n.code,{children:".env"})," file or in an environment variable:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"REDIS_URI=redis://localhost:6379\n"})}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"mongodbstore",children:"MongoDBStore"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"npm install @foal/mongodb\n"})}),"\n",(0,o.jsxs)(n.p,{children:["This store saves your session states in a MongoDB database (using the collection ",(0,o.jsx)(n.code,{children:"foalSessions"}),"). In order to use it, you must provide the MongoDB URI in either:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"a configuration file"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"Example with config/default.yml"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"mongodb:\n  uri: 'mongodb://localhost:27017'\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["or in a ",(0,o.jsx)(n.code,{children:".env"})," file or in an environment variable:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"MONGODB_URI=mongodb://localhost:27017\n"})}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Due to the nature of MongoDB databases, not all expired sessions are deleted by default (we cannot define a time period after which a document must be deleted). However, the session store provides us with a ",(0,o.jsx)(n.code,{children:"cleanUpExpiredSessions"})," function to manually delete all expired sessions. It is recommended to periodically call this method using, for example, a shell script."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"src/scripts/clean-up-expired-sessions.ts"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import { createService } from '@foal/core';\nimport { MongoDBStore } from '@foal/mongodb';\n\nexport async function main() {\n  const store = createService(MongoDBStore);\n  await store.cleanUpExpiredSessions();\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"Build the script."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"npm run build:scripts\n"})}),"\n",(0,o.jsx)(n.p,{children:"Run the script."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"foal run clean-up-expired-sessions\n"})}),"\n",(0,o.jsx)(n.h3,{id:"custom-store",children:"Custom Store"}),"\n",(0,o.jsxs)(n.p,{children:["If necessary, you can also create your own session store. This one must inherit the abstract class ",(0,o.jsx)(n.code,{children:"SessionStore"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import { Session, SessionOptions } from '@foal/core';\n\nclass CustomSessionStore extends SessionStore {\n  createAndSaveSession(sessionContent: any, options?: SessionOptions | undefined): Promise<Session> {\n    throw new Error('Method not implemented.');\n  }\n  update(session: Session): Promise<void> {\n    throw new Error('Method not implemented.');\n  }\n  destroy(sessionID: string): Promise<void> {\n    throw new Error('Method not implemented.');\n  }\n  read(sessionID: string): Promise<Session | undefined> {\n    throw new Error('Method not implemented.');\n  }\n  extendLifeTime(sessionID: string): Promise<void> {\n    throw new Error('Method not implemented.');\n  }\n  clear(): Promise<void> {\n    throw new Error('Method not implemented.');\n  }\n  cleanUpExpiredSessions(): Promise<void> {\n    throw new Error('Method not implemented.');\n  }\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"Here is the description of each method:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"createAndSaveSession"}),": Create and save a new session."]}),"\n",(0,o.jsxs)(n.p,{children:["This method ",(0,o.jsx)(n.em,{children:"MUST"})," call the ",(0,o.jsx)(n.code,{children:"generateSessionID"})," method to generate the session ID."]}),"\n",(0,o.jsxs)(n.p,{children:["This method ",(0,o.jsx)(n.em,{children:"MUST"})," call the ",(0,o.jsx)(n.code,{children:"applySessionOptions"})," method to extend the sessionContent."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"update"}),": Update and extend the lifetime of a session."]}),"\n",(0,o.jsx)(n.p,{children:'Depending on the implementation, the internal behavior can be similar to "update" or "upsert".'}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"destroy"}),": Delete a session, whether it exists or not."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"read"}),": Read a session from its ID."]}),"\n",(0,o.jsxs)(n.p,{children:["Return ",(0,o.jsx)(n.code,{children:"undefined"})," if the session does not exist or has expired."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"extendLifeTime"}),": Extend the lifetime of a session from its ID. The duration is the inactivity timeout."]}),"\n",(0,o.jsx)(n.p,{children:"If the session does not exist, the method does not throw an error."}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"clear"}),": Clear all sessions."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"cleanUpExpiredSessions"}),": Some session stores may need to run periodically background jobs to cleanup expired sessions. This method deletes all expired sessions."]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>c});var o=s(96540);const t={},i=o.createContext(t);function r(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);