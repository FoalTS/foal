"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3285],{37785:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>l});var o=n(74848),s=n(28453);const i={title:"Validation & Assainissement",id:"tuto-6-validation-and-sanitization",slug:"6-validation-and-sanitization"},a=void 0,r={id:"tutorials/simple-todo-list/tuto-6-validation-and-sanitization",title:"Validation & Assainissement",description:"Actuellement, les entr\xe9es re\xe7ues par le serveur ne sont pas v\xe9rifi\xe9es. Tout le monde peut envoyer n'importe quoi en lan\xe7ant une requ\xeate \xe0 POST /api/todos. C'est pourquoi les entr\xe9es du client ne sont pas consid\xe9r\xe9es comme fiables.",source:"@site/i18n/fr/docusaurus-plugin-content-docs/current/tutorials/simple-todo-list/6-validation-and-sanitization.md",sourceDirName:"tutorials/simple-todo-list",slug:"/tutorials/simple-todo-list/6-validation-and-sanitization",permalink:"/fr/docs/tutorials/simple-todo-list/6-validation-and-sanitization",draft:!1,unlisted:!1,editUrl:"https://github.com/FoalTS/foal/edit/master/docs/docs/tutorials/simple-todo-list/6-validation-and-sanitization.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{title:"Validation & Assainissement",id:"tuto-6-validation-and-sanitization",slug:"6-validation-and-sanitization"},sidebar:"someSidebar",previous:{title:"L'API REST",permalink:"/fr/docs/tutorials/simple-todo-list/5-the-rest-api"},next:{title:"Tests Unitaires",permalink:"/fr/docs/tutorials/simple-todo-list/7-unit-testing"}},d={},l=[];function c(e){const t={a:"a",blockquote:"blockquote",code:"code",em:"em",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(t.p,{children:["Actuellement, les entr\xe9es re\xe7ues par le serveur ne sont pas v\xe9rifi\xe9es. Tout le monde peut envoyer n'importe quoi en lan\xe7ant une requ\xeate \xe0 ",(0,o.jsx)(t.code,{children:"POST /api/todos"}),". C'est pourquoi les entr\xe9es du client ne sont pas consid\xe9r\xe9es comme fiables."]}),"\n",(0,o.jsxs)(t.p,{children:["Vous utiliserez les ",(0,o.jsx)(t.em,{children:"hooks"})," ",(0,o.jsx)(t.code,{children:"ValidateBody"})," et ",(0,o.jsx)(t.code,{children:"ValidatePathParam"})," pour valider et nettoyer les donn\xe9es entrantes."]}),"\n",(0,o.jsxs)(t.p,{children:["Un ",(0,o.jsx)(t.em,{children:"hook"})," est un d\xe9corateur qui est attach\xe9 \xe0 un gestionnaire de route (une m\xe9thode de contr\xf4leur). Il est ex\xe9cut\xe9 avant la m\xe9thode et est donc particuli\xe8rement adapt\xe9 \xe0 la validation ou au contr\xf4le d'acc\xe8s."]}),"\n",(0,o.jsxs)(t.p,{children:["Les m\xe9thodes ",(0,o.jsx)(t.code,{children:"ValidateBody"})," et ",(0,o.jsx)(t.code,{children:"ValidatePathParam"})," v\xe9rifient respectivement les propri\xe9t\xe9s ",(0,o.jsx)(t.code,{children:"body"})," et ",(0,o.jsx)(t.code,{children:"params"})," de l'objet de requ\xeate. Ils prennent un sch\xe9ma comme argument unique."]}),"\n",(0,o.jsxs)(t.blockquote,{children:["\n",(0,o.jsxs)(t.p,{children:["FoalTS utilise ",(0,o.jsx)(t.a,{href:"https://github.com/epoberezkin/ajv",children:"Ajv"}),", un validateur de sch\xe9ma JSON rapide, pour d\xe9finir ses sch\xe9mas."]}),"\n"]}),"\n",(0,o.jsxs)(t.p,{children:["Ajoutons la validation et l'assainissement \xe0 votre application. En fait, vous avez d\xe9j\xe0 d\xe9fini le sch\xe9ma todo dans le script ",(0,o.jsx)(t.code,{children:"create-todo"})," plus t\xf4t."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"import {\n  ...\n  ValidateBody, ValidatePathParam\n} from '@foal/core';\n\nexport class ApiController {\n\n  ...\n\n  @Post('/todos')\n  @ValidateBody({\n    // Every additional properties that are not defined in the \"properties\"\n    // object should be removed.\n    additionalProperties: false,\n    properties: {\n      // The \"text\" property of ctx.request.body should be a string if it exists.\n      text: { type: 'string' }\n    },\n    // The property \"text\" is required.\n    required: [ 'text' ],\n    // The body request should be an object once parsed by the framework.\n    type: 'object',\n  })\n  async postTodo(ctx: Context) {\n    const todo = new Todo();\n    todo.text = ctx.request.body.text;\n\n    await todo.save();\n\n    return new HttpResponseCreated(todo);\n  }\n\n  @Delete('/todos/:id')\n  // The id should be a number. If it is not, the hook returns a \"400 - Bad Request\" error.\n  @ValidatePathParam('id', { type: 'number' })\n  async deleteTodo(ctx: Context) {\n    const todo = await Todo.findOneBy({ id: ctx.request.params.id });\n    if (!todo) {\n      return new HttpResponseNotFound();\n    }\n    await todo.remove();\n    return new HttpResponseNoContent();\n  }\n\n}\n\n"})})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>r});var o=n(96540);const s={},i=o.createContext(s);function a(e){const t=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),o.createElement(i.Provider,{value:t},e.children)}}}]);