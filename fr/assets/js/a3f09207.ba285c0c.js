"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[14259],{28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>a});var o=n(96540);const s={},r=o.createContext(s);function i(e){const t=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(r.Provider,{value:t},e.children)}},37583:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"tutorials/multi-user-todo-list/tuto-3-the-shell-scripts","title":"The Shell Scripts","description":"Like in the previous tutorial, you are going to use shell scripts to populate the database.","source":"@site/versioned_docs/version-1.x/tutorials/multi-user-todo-list/tuto-3-the-shell-scripts.md","sourceDirName":"tutorials/multi-user-todo-list","slug":"/tutorials/multi-user-todo-list/tuto-3-the-shell-scripts","permalink":"/fr/docs/1.x/tutorials/multi-user-todo-list/tuto-3-the-shell-scripts","draft":false,"unlisted":false,"editUrl":"https://github.com/FoalTS/foal/edit/master/docs/versioned_docs/version-1.x/tutorials/multi-user-todo-list/tuto-3-the-shell-scripts.md","tags":[],"version":"1.x","frontMatter":{"title":"The Shell Scripts"},"sidebar":"someSidebar","previous":{"title":"The User & Todo Models","permalink":"/fr/docs/1.x/tutorials/multi-user-todo-list/tuto-2-the-user-and-todo-models"},"next":{"title":"Auth Controllers and Hooks","permalink":"/fr/docs/1.x/tutorials/multi-user-todo-list/tuto-5-auth-controllers-and-hooks"}}');var s=n(74848),r=n(28453);const i={title:"The Shell Scripts"},a=void 0,c={},l=[{value:"The <code>create-user</code> script",id:"the-create-user-script",level:2},{value:"The <code>create-todo</code> script",id:"the-create-todo-script",level:2}];function d(e){const t={blockquote:"blockquote",code:"code",em:"em",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"Like in the previous tutorial, you are going to use shell scripts to populate the database."}),"\n",(0,s.jsxs)(t.h2,{id:"the-create-user-script",children:["The ",(0,s.jsx)(t.code,{children:"create-user"})," script"]}),"\n",(0,s.jsxs)(t.p,{children:["A script called ",(0,s.jsx)(t.code,{children:"create-user"})," already exists in the ",(0,s.jsx)(t.code,{children:"scripts/"})," directory. It has a lot of commented lines that let you create users with ",(0,s.jsx)(t.em,{children:"permissions"})," and ",(0,s.jsx)(t.em,{children:"groups"}),"."]}),"\n",(0,s.jsx)(t.p,{children:"Open the file and replace its content with the following:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"// 3p\nimport { isCommon } from '@foal/password';\nimport { createConnection } from 'typeorm';\n\n// App\nimport { User } from '../app/entities';\n\nexport const schema = {\n  additionalProperties: false,\n  properties: {\n    email: { type: 'string', format: 'email' },\n    password: { type: 'string' },\n  },\n  required: [ 'email', 'password' ],\n  type: 'object',\n};\n\nexport async function main(args: { email: string; password: string }) {\n  const connection = await createConnection();\n  try {\n    const user = new User();\n    user.email = args.email;\n\n    if (await isCommon(args.password)) {\n      console.log('This password is too common. Please choose another one.');\n      return;\n    }\n    await user.setPassword(args.password);\n\n    console.log(\n      await connection.manager.save(user)\n    );\n  } catch (error) {\n    console.log(error.message);\n  } finally {\n    await connection.close();\n  }\n}\n\n"})}),"\n",(0,s.jsx)(t.p,{children:"Some parts of this code should look familiar."}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"schema"})," object is used to validate the arguments typed in the command line. In that case, the script defines two required parameters: an email and a password. The ",(0,s.jsx)(t.code,{children:"format"})," property checks that the ",(0,s.jsx)(t.code,{children:"email"})," string is really an email (presence of the ",(0,s.jsx)(t.code,{children:"@"})," character, etc)."]}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"main"})," function is divided in several parts. First it instanciates a connection to the database. Then, it creates a new user with the arguments specified in the command line. The ",(0,s.jsx)(t.code,{children:"isCommon"})," function compares the given password with a list of ten thousands common passwords (ex: ",(0,s.jsx)(t.code,{children:"123456"}),", ",(0,s.jsx)(t.code,{children:"password"}),", etc). It returns true if it is found in the list. Finally the user is saved in the database and, if an error is thrown, the error message is pretty printed."]}),"\n",(0,s.jsxs)(t.p,{children:["As you may have noticed, the ",(0,s.jsx)(t.code,{children:"isCommon"})," utility comes from the ",(0,s.jsx)(t.code,{children:"@foal/password"})," package. You have to install it."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"npm install @foal/password\n"})}),"\n",(0,s.jsx)(t.p,{children:"Now build the script."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"npm run build:scripts\n"})}),"\n",(0,s.jsx)(t.p,{children:"Create two new users."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'foal run create-user email="john@foalts.org" password="john_password"\nfoal run create-user email="mary@foalts.org" password="mary_password"\n'})}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsxs)(t.p,{children:["If you try to re-run one of these commands, you'll get the error below as the email key is unique.\n",(0,s.jsx)(t.code,{children:"SQLITE_CONSTRAINT: UNIQUE constraint failed: user.email"})]}),"\n"]}),"\n",(0,s.jsxs)(t.h2,{id:"the-create-todo-script",children:["The ",(0,s.jsx)(t.code,{children:"create-todo"})," script"]}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"create-todo"})," script is a bit more complex as ",(0,s.jsx)(t.code,{children:"Todo"})," has a many-to-one relation with ",(0,s.jsx)(t.code,{children:"User"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["Open the ",(0,s.jsx)(t.code,{children:"create-todo.ts"})," file and replace its content."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"// 3p\nimport { createConnection } from 'typeorm';\n\n// App\nimport { Todo, User } from '../app/entities';\n\nexport const schema = {\n  properties: {\n    owner: { type: 'string', format: 'email' },\n    text: { type: 'string' },\n  },\n  required: [ 'owner', 'text' ],\n  type: 'object',\n};\n\nexport async function main(args: { owner: string; text: string }) {\n  const connection = await createConnection();\n  try {\n    const user = await connection.getRepository(User).findOne({ email: args.owner });\n\n    if (!user) {\n      console.log('No user was found with the email ' + args.owner);\n      return;\n    }\n\n    const todo = new Todo();\n    todo.text = args.text;\n    todo.owner = user;\n\n    console.log(\n      await connection.manager.save(todo)\n    );\n  } catch (error) {\n    console.log(error.message);\n  } finally {\n    await connection.close();\n  }\n}\n\n"})}),"\n",(0,s.jsxs)(t.p,{children:["We added an ",(0,s.jsx)(t.code,{children:"owner"})," parameter to know which user the todo belongs to. It expects the email of the user."]}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"main"})," function then tries to get the user who has this email. If he or she does not exist, then the script terminates with a message displayed in the console. If not, the user is added to the todo as her/his owner."]}),"\n",(0,s.jsx)(t.p,{children:"Build the script."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"npm run build:scripts\n"})}),"\n",(0,s.jsx)(t.p,{children:"Create new todos for each user."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'foal run create-todo owner="john@foalts.org" text="John task 1"\nfoal run create-todo owner="john@foalts.org" text="John task 2"\nfoal run create-todo owner="mary@foalts.org" text="Mary task 1"\nfoal run create-todo owner="mary@foalts.org" text="Mary task 2"\n'})})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);