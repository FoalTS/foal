"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[905],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(n),m=o,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||a;return n?r.createElement(f,s(s({ref:t},p),{},{components:n})):r.createElement(f,s({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var c=2;c<a;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},39805:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var r=n(87462),o=(n(67294),n(3905));const a={title:"Utilitaires"},s=void 0,i={unversionedId:"common/utilities",id:"common/utilities",title:"Utilitaires",description:"Random Tokens",source:"@site/i18n/fr/docusaurus-plugin-content-docs/current/common/utilities.md",sourceDirName:"common",slug:"/common/utilities",permalink:"/fr/docs/common/utilities",draft:!1,editUrl:"https://github.com/FoalTS/foal/edit/master/docs/docs/common/utilities.md",tags:[],version:"current",frontMatter:{title:"Utilitaires"},sidebar:"someSidebar",previous:{title:"gRPC",permalink:"/fr/docs/common/gRPC"},next:{title:"ExpressJS",permalink:"/fr/docs/common/expressjs"}},l={},c=[{value:"Random Tokens",id:"random-tokens",level:2},{value:"Unsigned Tokens",id:"unsigned-tokens",level:3},{value:"Signed Tokens",id:"signed-tokens",level:3},{value:"String Encoding",id:"string-encoding",level:2},{value:"Base64 to Base64URL",id:"base64-to-base64url",level:3},{value:"Base64URL to Base64",id:"base64url-to-base64",level:3},{value:"Buffers &amp; Streams",id:"buffers--streams",level:2},{value:"Stream to Buffer",id:"stream-to-buffer",level:3}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"random-tokens"},"Random Tokens"),(0,o.kt)("p",null,"In many situations, we need to generate tokens and then verify them. If your tokens are tied to a state (for example, a user ID), you should refer to the ",(0,o.kt)("a",{parentName:"p",href:"/fr/docs/authentication/session-tokens"},"sessions tokens")," page. If not, the token generators below may be useful."),(0,o.kt)("h3",{id:"unsigned-tokens"},"Unsigned Tokens"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"generateToken")," function generates a cryptographically secure random token encoded in base64url (128 bits)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { generateToken } from '@foal/core';\n\nconst token = await generateToken();\n")),(0,o.kt)("h3",{id:"signed-tokens"},"Signed Tokens"),(0,o.kt)("p",null,"You can also generate a token using a secret. The secret is used to ",(0,o.kt)("em",{parentName:"p"},"sign")," the token to provide extra security. It must be encoded in base64. You can generate one with the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"foal createsecret\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Generate a signed token")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { generateSignedToken } from '@foal/core';\n\nconst token = await generateSignedToken(secret);\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Verify and read a signed token")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { verifySignedToken } from '@foal/core';\n\nconst signedTokenToVerify = 'xxx.yyy';\nconst result = await verifySignedToken(signedTokenToVerify, secret);\nif (result === false) {\n  console.log('incorrect signature');\n} else {\n  console.log('The token is ', result);\n}\n")),(0,o.kt)("h2",{id:"string-encoding"},"String Encoding"),(0,o.kt)("h3",{id:"base64-to-base64url"},"Base64 to Base64URL"),(0,o.kt)("p",null,"This function converts a base64-encoded string into a base64URL-encoded string. "),(0,o.kt)("p",null,"It replaces the characters ",(0,o.kt)("inlineCode",{parentName:"p"},"+")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"/")," with ",(0,o.kt)("inlineCode",{parentName:"p"},"-")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"_")," and omits the ",(0,o.kt)("inlineCode",{parentName:"p"},"=")," sign."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { convertBase64ToBase64url } from '@foal/core';\n\nconst foo = convertBase64ToBase64url('bar');\n")),(0,o.kt)("h3",{id:"base64url-to-base64"},"Base64URL to Base64"),(0,o.kt)("p",null,"This function converts a base64URL-encoded string into a base64-encoded string. "),(0,o.kt)("p",null,"It replaces the characters ",(0,o.kt)("inlineCode",{parentName:"p"},"-")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"_")," with ",(0,o.kt)("inlineCode",{parentName:"p"},"+")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"/")," and adds the ",(0,o.kt)("inlineCode",{parentName:"p"},"=")," padding character(s) if any."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { convertBase64urlToBase64 } from '@foal/core';\n\nconst foo = convertBase64urlToBase64('bar');\n")),(0,o.kt)("h2",{id:"buffers--streams"},"Buffers & Streams"),(0,o.kt)("h3",{id:"stream-to-buffer"},"Stream to Buffer"),(0,o.kt)("p",null,"This function converts a stream of buffers into a concatenated buffer. It returns a promise."),(0,o.kt)("p",null,"If the stream emits an error, the promise is rejected with the emitted error."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { streamToBuffer } from '@foal/core';\n\nconst buffer = await streamToBuffer(stream);\n")))}u.isMDXComponent=!0}}]);