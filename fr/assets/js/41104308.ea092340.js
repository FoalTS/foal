"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[891],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),u=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=u(r),m=a,y=d["".concat(l,".").concat(m)]||d[m]||c[m]||o;return r?n.createElement(y,i(i({ref:t},p),{},{components:r})):n.createElement(y,i({ref:t},p))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var u=2;u<o;u++)i[u]=r[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},55165:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var n=r(87462),a=(r(67294),r(3905));const o={title:"Authentification des Utilisateurs dans l'API",id:"tuto-9-authenticated-api",slug:"9-authenticated-api"},i=void 0,s={unversionedId:"tutorials/real-world-example-with-react/tuto-9-authenticated-api",id:"version-3.x/tutorials/real-world-example-with-react/tuto-9-authenticated-api",title:"Authentification des Utilisateurs dans l'API",description:"Maintenant que le login est configur\xe9, vous pouvez ajouter deux nouvelles routes pour cr\xe9er et supprimer des posts. Leur acc\xe8s sera limit\xe9 aux utilisateurs authentifi\xe9s.",source:"@site/i18n/fr/docusaurus-plugin-content-docs/version-3.x/tutorials/real-world-example-with-react/9-authenticated-api.md",sourceDirName:"tutorials/real-world-example-with-react",slug:"/tutorials/real-world-example-with-react/9-authenticated-api",permalink:"/fr/docs/3.x/tutorials/real-world-example-with-react/9-authenticated-api",draft:!1,editUrl:"https://github.com/FoalTS/foal/edit/master/docs/versioned_docs/version-3.x/tutorials/real-world-example-with-react/9-authenticated-api.md",tags:[],version:"3.x",sidebarPosition:9,frontMatter:{title:"Authentification des Utilisateurs dans l'API",id:"tuto-9-authenticated-api",slug:"9-authenticated-api"},sidebar:"someSidebar",previous:{title:"Connecter les Utilisateurs",permalink:"/fr/docs/3.x/tutorials/real-world-example-with-react/8-authentication"},next:{title:"Authentification des utilisateurs dans React",permalink:"/fr/docs/3.x/tutorials/real-world-example-with-react/10-auth-with-react"}},l={},u=[],p={toc:u};function c(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Maintenant que le login est configur\xe9, vous pouvez ajouter deux nouvelles routes pour cr\xe9er et supprimer des posts. Leur acc\xe8s sera limit\xe9 aux utilisateurs authentifi\xe9s. "),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Point de terminaison"),(0,a.kt)("th",{parentName:"tr",align:null},"M\xe9thode"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"/api/stories")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"POST")),(0,a.kt)("td",{parentName:"tr",align:null},"Cr\xe9e un nouveau post.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"/api/stories/:storyId")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"DELETE")),(0,a.kt)("td",{parentName:"tr",align:null},"Supprime un post.")))),(0,a.kt)("p",null,"Ouvrez le fichier ",(0,a.kt)("inlineCode",{parentName:"p"},"stories.controller.ts")," et ajoutez deux nouvelles m\xe9thodes au contr\xf4leur."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Context, Delete, Get, HttpResponseCreated, HttpResponseNoContent, HttpResponseNotFound, HttpResponseOK, Post, UserRequired, ValidateBody, ValidatePathParam, ValidateQueryParam } from '@foal/core';\nimport { Story, User } from '../../entities';\n\nexport class StoriesController {\n\n  // readStories...\n\n  @Post()\n  @ValidateBody({\n    type: 'object',\n    properties: {\n      title: { type: 'string', maxLength: 255 },\n      link: { type: 'string', maxLength: 255 },\n    },\n    required: [ 'title', 'link' ],\n    additionalProperties: false,\n  })\n  @UserRequired()\n  async createStory(ctx: Context<User>) {\n    const story = new Story();\n    story.title = ctx.request.body.title;\n    story.link = ctx.request.body.link;\n    // Set the current user as the author of the story.\n    story.author = ctx.user;\n    await story.save();\n\n    return new HttpResponseCreated();\n  }\n\n  @Delete('/:storyId')\n  @ValidatePathParam('storyId', { type: 'number' })\n  @UserRequired()\n  async deleteStory(ctx: Context<User>, { storyId }: { storyId: number }) {\n    // Only retrieve stories whose author is the current user.\n    const story = await Story.findOneBy({ id: storyId, author: { id: ctx.user.id } });\n\n    if (!story) {\n      return new HttpResponseNotFound();\n    }\n\n    await story.remove();\n\n    return new HttpResponseNoContent();\n  }\n\n}\n")),(0,a.kt)("p",null,"Lors de l'envoi d'une requ\xeate \xe0 ces points de terminaison, le hook ",(0,a.kt)("inlineCode",{parentName:"p"},"@UserRequired")," retournera une erreur 401 si ",(0,a.kt)("inlineCode",{parentName:"p"},"ctx.user")," est ",(0,a.kt)("inlineCode",{parentName:"p"},"null")," (c'est-\xe0-dire si l'utilisateur ne s'est pas connect\xe9 au pr\xe9alable). Mais s'il l'est, la m\xe9thode du contr\xf4leur sera ex\xe9cut\xe9e."),(0,a.kt)("p",null,"Allez sur ",(0,a.kt)("a",{parentName:"p",href:"http://localhost:3001/swagger"},"http://localhost:3001/swagger")," et v\xe9rifiez que le contr\xf4leur fonctionne comme pr\xe9vu. Vous pouvez, par exemple, essayer de cr\xe9er un post sans \xeatre connect\xe9, puis vous connecter et r\xe9essayer."))}c.isMDXComponent=!0}}]);