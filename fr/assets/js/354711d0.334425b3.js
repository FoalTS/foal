"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3458],{93979:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>r,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var t=i(74848),o=i(28453);const s={title:"Initialization"},c=void 0,a={id:"architecture/initialization",title:"Initialization",description:"In many situations, we need to initialize the application (i.e perform certain actions) before listening to incoming HTTP requests. This is the case, for example, if you need to establish a connection to the database.",source:"@site/versioned_docs/version-1.x/architecture/initialization.md",sourceDirName:"architecture",slug:"/architecture/initialization",permalink:"/fr/docs/1.x/architecture/initialization",draft:!1,unlisted:!1,editUrl:"https://github.com/FoalTS/foal/edit/master/docs/versioned_docs/version-1.x/architecture/initialization.md",tags:[],version:"1.x",frontMatter:{title:"Initialization"},sidebar:"someSidebar",previous:{title:"Hooks",permalink:"/fr/docs/1.x/architecture/hooks"},next:{title:"SQL Databases (TypeORM)",permalink:"/fr/docs/1.x/databases/typeorm"}},r={},l=[{value:"The <code>main</code> function",id:"the-main-function",level:2},{value:"The <code>AppController.init</code> method",id:"the-appcontrollerinit-method",level:2},{value:"The services <code>boot</code> method",id:"the-services-boot-method",level:2},{value:"Best Practices",id:"best-practices",level:2}];function d(e){const n={blockquote:"blockquote",code:"code",em:"em",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"In many situations, we need to initialize the application (i.e perform certain actions) before listening to incoming HTTP requests. This is the case, for example, if you need to establish a connection to the database."}),"\n",(0,t.jsx)(n.p,{children:"There are three ways to achieve this in FoalTS."}),"\n",(0,t.jsxs)(n.h2,{id:"the-main-function",children:["The ",(0,t.jsx)(n.code,{children:"main"})," function"]}),"\n",(0,t.jsxs)(n.p,{children:["The most straightforward way to do it, which is used by default, is to add the initialization commands in the ",(0,t.jsx)(n.code,{children:"main"})," function before ",(0,t.jsx)(n.code,{children:"createApp"})," is called."]}),"\n",(0,t.jsxs)(n.p,{children:["If your application uses TypeORM, your project should have a file ",(0,t.jsx)(n.code,{children:"src/index.ts"})," that looks like this:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"async function main() {\n  // Initialization\n  await createConnection();\n\n  // Creation of the application\n  const app = createApp(AppController);\n\n  // ...\n}\n\nmain();\n"})}),"\n",(0,t.jsxs)(n.h2,{id:"the-appcontrollerinit-method",children:["The ",(0,t.jsx)(n.code,{children:"AppController.init"})," method"]}),"\n",(0,t.jsxs)(n.p,{children:["Sometimes, however, this approach is not sufficient because we need to call the methods of some services. In this case, you can add an ",(0,t.jsx)(n.code,{children:"init"})," method to the root controller class which will be called before the application is fully created. This method can be synchronous or asynchronous."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Example 1"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"export class AppController {\n\n  @dependency\n  serviceA: ServiceA;\n\n  async init() {\n    await this.serviceA.doSomething();\n  }\n\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Example 2"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"export class AppController {\n\n  @dependency\n  serviceA: ServiceA;\n\n  @dependency\n  serviceB: ServiceB;\n\n  async init() {\n    this.serviceA.init();\n    this.serviceB.init();\n  }\n\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["For this to work, you need to update your ",(0,t.jsx)(n.code,{children:"src/index.ts"})," file and create the application with the asynchronous function ",(0,t.jsx)(n.code,{children:"createAndInitApp"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { createAndInitApp } from '@foal/core';\n\nasync function main() {\n  const app = await createAndInitApp(AppController);\n\n  // ...\n}\n\nmain();\n"})}),"\n",(0,t.jsxs)(n.h2,{id:"the-services-boot-method",children:["The services ",(0,t.jsx)(n.code,{children:"boot"})," method"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"boot"})," methods are available in v1.8.0 onwards."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Alternatively you can add a ",(0,t.jsx)(n.code,{children:"boot"})," method in your services. This method can be synchronous or asynchronous."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Example"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"export class ServiceA {\n\n  async boot() {\n    await doSomething();\n  }\n\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Then, you have to call the ",(0,t.jsx)(n.code,{children:"boot"})," method of your service manager (it will be automatically called starting from version 2)."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { createAndInitApp } from '@foal/core';\n\nasync function main() {\n  const serviceManager = new ServiceManager();\n  const app = createApp(AppController, {\n    serviceManager\n  });\n  // This line calls the `boot` method of all your services that have one.\n  await serviceManager.boot();\n\n  // ...\n}\n\nmain();\n"})}),"\n",(0,t.jsxs)(n.p,{children:["If you manually inject services to your service manager and you want their ",(0,t.jsx)(n.code,{children:"boot"})," methods to be called, you must specify this in the ",(0,t.jsx)(n.code,{children:"set"})," method options."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"const serviceManager = new ServiceManager();\nserviceManager.set(ServiceA, myServiceInstance, { boot: true })\n"})}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsxs)(n.p,{children:["If your initialization consists of several asynchronous tasks, you may want to perform them in ",(0,t.jsx)(n.em,{children:"parallel"}),". This will reduce the initialization time, which has an impact if you use a serverless architecture."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"export class AppController {\n\n  async init() {\n    // Don't do\n    await createConnection();\n    await createAnotherConnection();\n\n    // Do\n    await Promise.all([\n      createConnection(),\n      createAnotherConnection()\n    ])\n  }\n\n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>c,x:()=>a});var t=i(96540);const o={},s=t.createContext(o);function c(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);