"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1477],{30010:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/2024/04/25/version-4.4-release-notes","metadata":{"permalink":"/blog/2024/04/25/version-4.4-release-notes","editUrl":"https://github.com/FoalTS/foal/edit/master/docs/blog/2024-04-25-version-4.4-release-notes.md","source":"@site/blog/2024-04-25-version-4.4-release-notes.md","title":"Version 4.4 release notes","description":"Banner","date":"2024-04-25T00:00:00.000Z","formattedDate":"April 25, 2024","tags":[{"label":"release","permalink":"/blog/tags/release"}],"readingTime":0.19,"hasTruncateMarker":true,"authors":[{"name":"Lo\xefc Poullain","title":"Creator of FoalTS. Software engineer.","url":"https://loicpoullain.com","imageURL":"https://avatars1.githubusercontent.com/u/13604533?v=4"}],"frontMatter":{"title":"Version 4.4 release notes","author":"Lo\xefc Poullain","author_title":"Creator of FoalTS. Software engineer.","author_url":"https://loicpoullain.com","author_image_url":"https://avatars1.githubusercontent.com/u/13604533?v=4","image":"blog/twitter-banners/version-4.4-release-notes.png","tags":["release"]},"nextItem":{"title":"Version 4.3 release notes","permalink":"/blog/2024/04/16/version-4.3-release-notes"}},"content":"![Banner](./assets/version-4.4-is-here/banner.png)\\n\\nVersion 4.4 of [Foal](https://foalts.org/) is out!\\n\\n\x3c!--truncate--\x3e\\n\\nThis release updates Foal\'s sub-dependencies, including the `express` library, which presents a moderate vulnerability in versions prior to 4.19.2.\\n\\nThanks to [Lucho](https://github.com/lcnvdl) for reporting this vulnerability in the first place!"},{"id":"/2024/04/16/version-4.3-release-notes","metadata":{"permalink":"/blog/2024/04/16/version-4.3-release-notes","editUrl":"https://github.com/FoalTS/foal/edit/master/docs/blog/2024-04-16-version-4.3-release-notes.md","source":"@site/blog/2024-04-16-version-4.3-release-notes.md","title":"Version 4.3 release notes","description":"Banner","date":"2024-04-16T00:00:00.000Z","formattedDate":"April 16, 2024","tags":[{"label":"release","permalink":"/blog/tags/release"}],"readingTime":1.125,"hasTruncateMarker":true,"authors":[{"name":"Lo\xefc Poullain","title":"Creator of FoalTS. Software engineer.","url":"https://loicpoullain.com","imageURL":"https://avatars1.githubusercontent.com/u/13604533?v=4"}],"frontMatter":{"title":"Version 4.3 release notes","author":"Lo\xefc Poullain","author_title":"Creator of FoalTS. Software engineer.","author_url":"https://loicpoullain.com","author_image_url":"https://avatars1.githubusercontent.com/u/13604533?v=4","image":"blog/twitter-banners/version-4.3-release-notes.png","tags":["release"]},"prevItem":{"title":"Version 4.4 release notes","permalink":"/blog/2024/04/25/version-4.4-release-notes"},"nextItem":{"title":"Version 4.2 release notes","permalink":"/blog/2023/10/29/version-4.2-release-notes"}},"content":"![Banner](./assets/version-4.3-is-here/banner.png)\\n\\nVersion 4.3 of [Foal](https://foalts.org/) is out!\\n\\n\x3c!--truncate--\x3e\\n\\n## Better CLI ouput when script arguments are invalid\\n\\nPreviously, when executing `foal run my-script` with invalid arguments, the CLI would only display one error at a time.\\n\\nFor example, with the following schema and arguments, we would only get this error message:\\n\\n```typescript\\nexport const schema = {\\n  type: \'object\', \\n  properties: {\\n    email: { type: \'string\', format: \'email\', maxLength: 2 },\\n    password: { type: \'string\' },\\n    n: { type: \'number\', maximum: 10 }\\n  },\\n  required: [\'password\']\\n};\\n```\\n\\n```bash\\nfoal run my-script email=bar n=11\\n```\\n\\n```\\nError: The command line arguments must match format \\"email\\".\\n```\\n\\nFrom version 4.3 onwards, the CLI logs all validation errors and with a more meaningful description.\\n\\n```\\nScript error: arguments must have required property \'password\'.\\nScript error: the value of \\"email\\" must NOT have more than 2 characters.\\nScript error: the value of \\"email\\" must match format \\"email\\".\\nScript error: the value of \\"n\\" must be <= 10.\\n```\\n\\n## [Fix] the logger no longer throws an error in development when the client request is interrupted\\n\\nUsing the logger\'s `dev` format, Foal would occasionally throw the error `TypeError: Cannot read properties of null`.\\n\\nThis would occur when the connection with the client was lost, which happens, for example, when the React client server hotly reloads.\\n\\nThis version fixes this error."},{"id":"/2023/10/29/version-4.2-release-notes","metadata":{"permalink":"/blog/2023/10/29/version-4.2-release-notes","editUrl":"https://github.com/FoalTS/foal/edit/master/docs/blog/2023-10-29-version-4.2-release-notes.md","source":"@site/blog/2023-10-29-version-4.2-release-notes.md","title":"Version 4.2 release notes","description":"Banner","date":"2023-10-29T00:00:00.000Z","formattedDate":"October 29, 2023","tags":[{"label":"release","permalink":"/blog/tags/release"}],"readingTime":0.615,"hasTruncateMarker":true,"authors":[{"name":"Lo\xefc Poullain","title":"Creator of FoalTS. Software engineer.","url":"https://loicpoullain.com","imageURL":"https://avatars1.githubusercontent.com/u/13604533?v=4"}],"frontMatter":{"title":"Version 4.2 release notes","author":"Lo\xefc Poullain","author_title":"Creator of FoalTS. Software engineer.","author_url":"https://loicpoullain.com","author_image_url":"https://avatars1.githubusercontent.com/u/13604533?v=4","image":"blog/twitter-banners/version-4.2-release-notes.png","tags":["release"]},"prevItem":{"title":"Version 4.3 release notes","permalink":"/blog/2024/04/16/version-4.3-release-notes"},"nextItem":{"title":"Version 4.1 release notes","permalink":"/blog/2023/10/24/version-4.1-release-notes"}},"content":"![Banner](./assets/version-4.2-is-here/banner.png)\\n\\nVersion 4.2 of [Foal](https://foalts.org/) is out!\\n\\n\x3c!--truncate--\x3e\\n\\n## Better logging for socket.io controllers\\n\\nSocket.io messages are now logged in the same way as HTTP requests.\\n\\n## AJV strict mode can be disabled\\n\\nAJV [strict mode](https://ajv.js.org/strict-mode.html) can be disabled thanks to the new config key `settings.ajv.strict`:\\n\\n*config/default.json*\\n```json\\n{\\n  \\"settings\\": {\\n    \\"ajv\\": {\\n      \\"strict\\": false\\n    }\\n  }\\n}\\n```\\n\\n## `foal connect angular` command fixed\\n\\nThe command that allows to set up a project with Angular and Foal has been fixed to support the latest versions of Angular. \\n\\n## Cache control can be disabled for static files\\n\\nThe `cacheControl` option of the `express.static` middleware can be passed through the configuration.\\n\\n*config/default.json*\\n```json\\n{\\n  \\"settings\\": {\\n    \\"staticFiles\\": {\\n      \\"cacheControl\\": false\\n    }\\n  }\\n}\\n```"},{"id":"/2023/10/24/version-4.1-release-notes","metadata":{"permalink":"/blog/2023/10/24/version-4.1-release-notes","editUrl":"https://github.com/FoalTS/foal/edit/master/docs/blog/2023-10-24-version-4.1-release-notes.md","source":"@site/blog/2023-10-24-version-4.1-release-notes.md","title":"Version 4.1 release notes","description":"Banner","date":"2023-10-24T00:00:00.000Z","formattedDate":"October 24, 2023","tags":[{"label":"release","permalink":"/blog/tags/release"}],"readingTime":0.625,"hasTruncateMarker":true,"authors":[{"name":"Lo\xefc Poullain","title":"Creator of FoalTS. Software engineer.","url":"https://loicpoullain.com","imageURL":"https://avatars1.githubusercontent.com/u/13604533?v=4"}],"frontMatter":{"title":"Version 4.1 release notes","author":"Lo\xefc Poullain","author_title":"Creator of FoalTS. Software engineer.","author_url":"https://loicpoullain.com","author_image_url":"https://avatars1.githubusercontent.com/u/13604533?v=4","image":"blog/twitter-banners/version-4.1-release-notes.png","tags":["release"]},"prevItem":{"title":"Version 4.2 release notes","permalink":"/blog/2023/10/29/version-4.2-release-notes"},"nextItem":{"title":"Version 4.0 release notes","permalink":"/blog/2023/09/11/version-4.0-release-notes"}},"content":"![Banner](./assets/version-4.1-is-here/banner.png)\\n\\nVersion 4.1 of [Foal](https://foalts.org/) is out!\\n\\n\x3c!--truncate--\x3e\\n\\n## Better logging\\n\\nFoal now features a true logging system. Full documentation can be found [here](/docs/common/logging).\\n\\n### New recommended configuration\\n\\nIt is recommended to switch to this configuration to take full advantage of the new logging system.\\n\\n*config/default.json*\\n```json\\n{\\n  \\"settings\\": {\\n    \\"loggerFormat\\": \\"foal\\"\\n  }\\n}\\n```\\n\\n*config/development.json*\\n```json\\n{\\n  \\"settings\\": {\\n    \\"logger\\": {\\n      \\"format\\": \\"dev\\"\\n    }\\n  }\\n}\\n```\\n\\n## Request IDs\\n\\nOn each request, a request ID is now generated randomly. It can be read through `ctx.request.id`.\\n\\nIf the `X-Request-ID` header exists in the request, then the header value is used as the request identifier.\\n\\n## XML requests\\n\\nIf a request is sent with the `application/xml` header, the XML content is now available under `ctx.request.body`."},{"id":"/2023/09/11/version-4.0-release-notes","metadata":{"permalink":"/blog/2023/09/11/version-4.0-release-notes","editUrl":"https://github.com/FoalTS/foal/edit/master/docs/blog/2023-09-11-version-4.0-release-notes.md","source":"@site/blog/2023-09-11-version-4.0-release-notes.md","title":"Version 4.0 release notes","description":"Banner","date":"2023-09-11T00:00:00.000Z","formattedDate":"September 11, 2023","tags":[{"label":"release","permalink":"/blog/tags/release"}],"readingTime":1.005,"hasTruncateMarker":true,"authors":[{"name":"Lo\xefc Poullain","title":"Creator of FoalTS. Software engineer.","url":"https://loicpoullain.com","imageURL":"https://avatars1.githubusercontent.com/u/13604533?v=4"}],"frontMatter":{"title":"Version 4.0 release notes","author":"Lo\xefc Poullain","author_title":"Creator of FoalTS. Software engineer.","author_url":"https://loicpoullain.com","author_image_url":"https://avatars1.githubusercontent.com/u/13604533?v=4","image":"blog/twitter-banners/version-4.0-release-notes.png","tags":["release"]},"prevItem":{"title":"Version 4.1 release notes","permalink":"/blog/2023/10/24/version-4.1-release-notes"},"nextItem":{"title":"Version 3.3 release notes","permalink":"/blog/2023/08/13/version-3.3-release-notes"}},"content":"![Banner](./assets/version-4.0-is-here/banner.png)\\n\\nVersion 4.0 of [Foal](https://foalts.org/) is out!\\n\\n\x3c!--truncate--\x3e\\n\\n## Description\\n\\nThe goals of this major release are to\\n- support the latest active versions of Node (18 and 20) and update all internal dependencies to their latest major versions\\n- facilitate framework maintenance.\\n\\nFull details can be found [here](https://github.com/FoalTS/foal/issues/1223).\\n\\n## Migration guide\\n\\n- Run `npx foal upgrade`.\\n- Version 16 of Node is not supported anymore. Upgrade to version 18 or version 20.\\n- Support of MariaDB has been dropped.\\n- If you use any of these dependencies, upgrade `typeorm` to v0.3.17, `graphql` to v16, `type-graphql` to v2, `class-validator` to v0.14, `mongodb` to v5 and `@socket.io/redis-adapter` to v8.\\n- If you use both TypeORM and `MongoDBStore`, there is no need anymore to maintain two versions of `mongodb`. You can use version 5 of `mongodb` dependency.\\n- If you use `@foal/socket.io` with redis, install `socket.io-adapter`.\\n- Support for `better-sqlite` driver has been dropped. Use the `sqlite3` driver instead. In DB configuration, use `type: \'sqlite\'` instead of `type: \'better-sqlite3\'`.\\n- In your project dependencies, upgrade `@types/node` to v18.11.9.\\n- If you use TypeORM with MongoDB, for the entities definitions, rename `import { ObjectID } from \'typeorm\';` to `import { ObjectId } from \'typeorm\';`"},{"id":"/2023/08/13/version-3.3-release-notes","metadata":{"permalink":"/blog/2023/08/13/version-3.3-release-notes","editUrl":"https://github.com/FoalTS/foal/edit/master/docs/blog/2023-08-13-version-3.3-release-notes.md","source":"@site/blog/2023-08-13-version-3.3-release-notes.md","title":"Version 3.3 release notes","description":"Banner","date":"2023-08-13T00:00:00.000Z","formattedDate":"August 13, 2023","tags":[{"label":"release","permalink":"/blog/tags/release"}],"readingTime":0.265,"hasTruncateMarker":true,"authors":[{"name":"Lo\xefc Poullain","title":"Creator of FoalTS. Software engineer.","url":"https://loicpoullain.com","imageURL":"https://avatars1.githubusercontent.com/u/13604533?v=4"}],"frontMatter":{"title":"Version 3.3 release notes","author":"Lo\xefc Poullain","author_title":"Creator of FoalTS. Software engineer.","author_url":"https://loicpoullain.com","author_image_url":"https://avatars1.githubusercontent.com/u/13604533?v=4","image":"blog/twitter-banners/version-3.3-release-notes.png","tags":["release"]},"prevItem":{"title":"Version 4.0 release notes","permalink":"/blog/2023/09/11/version-4.0-release-notes"},"nextItem":{"title":"Version 3.2 release notes","permalink":"/blog/2023/04/04/version-3.2-release-notes"}},"content":"![Banner](./assets/version-3.3-is-here/banner.png)\\n\\nVersion 3.3 of [Foal](https://foalts.org/) is out!\\n\\n\x3c!--truncate--\x3e\\n\\n## Better security for JWT\\n\\nThe `jsonwebtoken` dependency has been upgraded to v9 to address [security issues](https://github.com/auth0/node-jsonwebtoken/blob/master/CHANGELOG.md#900---2022-12-21).\\n\\n> Note that RSA key size now must be 2048 bits or greater. Make sure to check the size of your RSA key before upgrading to this version."},{"id":"/2023/04/04/version-3.2-release-notes","metadata":{"permalink":"/blog/2023/04/04/version-3.2-release-notes","editUrl":"https://github.com/FoalTS/foal/edit/master/docs/blog/2023-04-04-version-3.2-release-notes.md","source":"@site/blog/2023-04-04-version-3.2-release-notes.md","title":"Version 3.2 release notes","description":"Banner","date":"2023-04-04T00:00:00.000Z","formattedDate":"April 4, 2023","tags":[{"label":"release","permalink":"/blog/tags/release"}],"readingTime":0.54,"hasTruncateMarker":true,"authors":[{"name":"Lo\xefc Poullain","title":"Creator of FoalTS. Software engineer.","url":"https://loicpoullain.com","imageURL":"https://avatars1.githubusercontent.com/u/13604533?v=4"}],"frontMatter":{"title":"Version 3.2 release notes","author":"Lo\xefc Poullain","author_title":"Creator of FoalTS. Software engineer.","author_url":"https://loicpoullain.com","author_image_url":"https://avatars1.githubusercontent.com/u/13604533?v=4","image":"blog/twitter-banners/version-3.2-release-notes.png","tags":["release"]},"prevItem":{"title":"Version 3.3 release notes","permalink":"/blog/2023/08/13/version-3.3-release-notes"},"nextItem":{"title":"Version 3.1 release notes","permalink":"/blog/2022/11/28/version-3.1-release-notes"}},"content":"![Banner](./assets/version-3.2-is-here/banner.png)\\n\\nVersion 3.2 of [Foal](https://foalts.org/) is out! Here are the improvements that it brings:\\n\\n\x3c!--truncate--\x3e\\n\\n## New package `@foal/password`\\n\\nThe `foal/password` package, which was removed in v3.0, has been re-added. It offers an `isCommon` method to check if a password is too common:\\n\\n```typescript\\nconst isPasswordTooCommon = await isCommon(password);\\n```\\n\\n## Read the controller and the controller method names in request contexts\\n\\nThe `Context` and `WebsocketContext` have two new properties:\\n\\n\\n | Name | Type | Description |\\n | --- | --- | --- |\\n | `controllerName` | `string` | The name of the controller class. |\\n | `controllerMethodName` | `string` | The name of the controller method. |"},{"id":"/2022/11/28/version-3.1-release-notes","metadata":{"permalink":"/blog/2022/11/28/version-3.1-release-notes","editUrl":"https://github.com/FoalTS/foal/edit/master/docs/blog/2022-11-28-version-3.1-release-notes.md","source":"@site/blog/2022-11-28-version-3.1-release-notes.md","title":"Version 3.1 release notes","description":"Banner","date":"2022-11-28T00:00:00.000Z","formattedDate":"November 28, 2022","tags":[{"label":"release","permalink":"/blog/tags/release"}],"readingTime":0.765,"hasTruncateMarker":true,"authors":[{"name":"Lo\xefc Poullain","title":"Creator of FoalTS. Software engineer.","url":"https://loicpoullain.com","imageURL":"https://avatars1.githubusercontent.com/u/13604533?v=4"}],"frontMatter":{"title":"Version 3.1 release notes","author":"Lo\xefc Poullain","author_title":"Creator of FoalTS. Software engineer.","author_url":"https://loicpoullain.com","author_image_url":"https://avatars1.githubusercontent.com/u/13604533?v=4","image":"blog/twitter-banners/version-3.1-release-notes.png","tags":["release"]},"prevItem":{"title":"Version 3.2 release notes","permalink":"/blog/2023/04/04/version-3.2-release-notes"},"nextItem":{"title":"Version 3.0 release notes","permalink":"/blog/2022/11/01/version-3.0-release-notes"}},"content":"![Banner](./assets/version-3.1-is-here/banner.png)\\n\\nVersion 3.1 of [Foal](https://foalts.org/) is out! Here are the improvements that it brings:\\n\\n\x3c!--truncate--\x3e\\n\\n## New `foal upgrade` command\\n\\nThis command allows you to upgrade all `@foal/*` dependencies and dev dependencies to a given version.\\n\\n*Examples*\\n```bash\\nfoal upgrade # upgrade to the latest version\\nfoal upgrade 3.0.0\\nfoal upgrade \\"~3.0.0\\"\\n```\\n\\n## Social authentication supports subdomains\\n\\nIf you\'re using multiple subdomains domains to handle social authentication, you can now do so by specifying a custom cookie domain in the configuration:\\n\\n```yaml\\nsettings:\\n  social:\\n    cookie:\\n      domain: foalts.org\\n```\\n\\n## Regression on OpenAPI keyword \\"example\\" has been fixed\\n\\nIn version 3.0, using the keyword `example` in an validation object was raising an error. This has been fixed.\\n\\n## `.env` files support whitespaces\\n\\nWhitespaces around the equal symbol are now allowed:\\n\\n```bash\\nFOO_BAR_WITH_WHITESPACES_AROUND_THE_NAME = hello you\\n```\\n\\n## Value of the `Strict-Transport-Security` header has been increased\\n\\nIt has been increased from 15,552,000 to 31,536,000."},{"id":"/2022/11/01/version-3.0-release-notes","metadata":{"permalink":"/blog/2022/11/01/version-3.0-release-notes","editUrl":"https://github.com/FoalTS/foal/edit/master/docs/blog/2022-11-01-version-3.0-release-notes.md","source":"@site/blog/2022-11-01-version-3.0-release-notes.md","title":"Version 3.0 release notes","description":"Banner","date":"2022-11-01T00:00:00.000Z","formattedDate":"November 1, 2022","tags":[{"label":"release","permalink":"/blog/tags/release"}],"readingTime":6.72,"hasTruncateMarker":true,"authors":[{"name":"Lo\xefc Poullain","title":"Creator of FoalTS. Software engineer.","url":"https://loicpoullain.com","imageURL":"https://avatars1.githubusercontent.com/u/13604533?v=4"}],"frontMatter":{"title":"Version 3.0 release notes","author":"Lo\xefc Poullain","author_title":"Creator of FoalTS. Software engineer.","author_url":"https://loicpoullain.com","author_image_url":"https://avatars1.githubusercontent.com/u/13604533?v=4","image":"blog/twitter-banners/version-3.0-release-notes.png","tags":["release"]},"prevItem":{"title":"Version 3.1 release notes","permalink":"/blog/2022/11/28/version-3.1-release-notes"},"nextItem":{"title":"Version 2.11 release notes","permalink":"/blog/2022/10/09/version-2.11-release-notes"}},"content":"![Banner](./assets/version-3.0-is-here/banner.png)\\n\\nVersion 3.0 of [Foal](https://foalts.org/) is finally there!\\n\\nIt\'s been a long work and I\'m excited to share with you the new features of the framework \ud83c\udf89 . The upgrading guide can be found [here](https://foalts.org/docs/3.x/upgrade-to-v3/).\\n\\nHere are the new features and improvements of version 3!\\n\\n\x3c!--truncate--\x3e\\n\\n## Full support of TypeORM v0.3\\n\\n> For those new to Foal, TypeORM is the default ORM used in all new projects. But you can use any other ORM or query builder if you want, as the core framework is ORM independent.\\n\\nTypeORM v0.3 provides greater typing safety and this is something that will be appreciated when moving to the new version of Foal.\\n\\nThe version 0.3 of TypeORM has a lot of changes compared to the version 0.2 though. Features such as the `ormconfig.json` file have been removed and functions such as `createConnection`, `getManager` or `getRepository` have been deprecated.\\n\\nA lot of work has been done to make sure that `@foal/typeorm`, new projects generated by the CLI and examples in the documentation use version 0.3 of TypeORM without relying on deprecated functions or patterns.\\n\\nIn particular, the connection to the database is now managed by a file `src/db.ts` that replaces the older `ormconfig.json`.\\n\\n## Code simplified\\n\\nSome parts of the framework have been simplified to require less code and make it more understandable.\\n\\n### Authentication\\n\\nThe `@UseSessions` and `@JWTRequired` authentication hooks called obscure functions such as `fetchUser`, `fetchUserWithPermissions` to populate the `ctx.user` property. The real role of these functions was not clear and a newcomer to the framework could wonder what they were for.\\n\\nThis is why these functions have been removed and replaced by direct calls to database models.\\n\\n```typescript\\n// Version 2\\n@UseSessions({ user: fetchUser(User) })\\n@JWTRequired({ user: fetchUserWithPermissions(User) })\\n\\n// Version 3\\n@UseSessions({ user: (id: number) => User.findOneBy({ id }) })\\n@JWTRequired({ user: (id: number) => User.findOneWithPermissionsBy({ id }) })\\n```\\n\\n### File upload\\n\\nWhen uploading files in a _multipart/form-data_ request, it was not allowed to pass optional fields. This is now possible. \\n\\nThe interface of the `@ValidateMultipartFormDataBody` hook, renamed to `@ParseAndValidateFiles` to be more understandable for people who don\'t know the HTTP protocol handling the upload, has been simplified.\\n\\n*Examples with only files*\\n```typescript\\n// Version 2\\n@ValidateMultipartFormDataBody({\\n  files: {\\n    profile: { required: true }\\n  }\\n})\\n\\n// Version 3\\n@ParseAndValidateFiles({\\n  profile: { required: true }\\n})\\n```\\n\\n*Examples with files and fields*\\n```typescript\\n// Version 2\\n@ValidateMultipartFormDataBody({\\n  files: {\\n    profile: { required: true }\\n  }\\n  fields: {\\n    description: { type: \'string\' }\\n  }\\n})\\n\\n// Version 3\\n@ParseAndValidateFiles(\\n  {\\n    profile: { required: true }\\n  },\\n  // The second parameter is optional\\n  // and is used to add fields. It expects an AJV object.\\n  {\\n    type: \'object\',\\n    properties: {\\n      description: { type: \'string\' }\\n    },\\n    required: [\'description\'],\\n    additionalProperties: false\\n  }\\n)\\n```\\n\\n### Database models\\n\\nUsing functions like `getRepository` or `getManager` to manipulate data in a database is not necessarily obvious to newcomers. It adds complexity that is not necessary for small or medium sized projects. Most frameworks prefer to use the Active Record pattern for simplicity.\\n\\nThis is why, from version 3 and to take into account that TypeORM v0.3 no longer uses a global connection, the examples in the documentation and the generators will extend all the models from `BaseEntity`. Of course, it will still be possible to use the functions below if desired. \\n\\n```typescript\\n// Version 2\\n@Entity()\\nclass User {}\\n\\nconst user = getRepository(User).create();\\nawait getRepository(User).save(user);\\n\\n// Version 3\\n@Entity()\\nclass User extends BaseEntity {}\\n\\nconst user = new User();\\nawait user.save();\\n```\\n\\n## Better typing\\n\\nThe use of TypeScript types has been improved and some parts of the framework ensure better type safety.\\n\\n### Validation with AJV\\n\\nFoal\'s version uses `ajv@8` which allows you to bind a TypeScript type with a JSON schema object. To do this, you can import the generic type `JSONSchemaType` to build the interface of the schema object.\\n\\n```typescript\\nimport { JSONSchemaType } from \'ajv\';\\n\\ninterface MyData {\\n  foo: number;\\n  bar?: string\\n}\\n\\nconst schema: JSONSchemaType<MyData> = {\\n  type: \'object\',\\n  properties: {\\n    foo: { type: \'integer\' },\\n    bar: { type: \'string\', nullable: true }\\n  },\\n  required: [\'foo\'],\\n  additionalProperties: false\\n}\\n```\\n\\n### File upload\\n\\nIn version 2, handling file uploads in the controller was tedious because all types were `any`. Starting with version 3, it is no longer necessary to cast the types to `File` or `File[]`:\\n\\n```typescript\\n// Version 2\\nconst name = ctx.request.body.fields.name;\\nconst file = ctx.request.body.files.avatar as File;\\nconst files = ctx.request.body.files.images as File[];\\n\\n// After\\nconst name = ctx.request.body.name;\\n// file is of type \\"File\\"\\nconst file = ctx.files.get(\'avatar\')[0];\\n// files is of type \\"Files\\"\\nconst files = ctx.files.get(\'images\');\\n```\\n\\n### Authentication\\n\\nIn version 2, the `user` option of `@UseSessions` and `@JWTRequired` expected a function with this signature:\\n\\n```typescript\\n(id: string|number, services: ServiceManager) => Promise<any>;\\n```\\n\\nThere was no way to guess and guarantee the type of the user ID and the function had to check and convert the type itself if necessary.\\n\\nThe returned type was also very permissive (type `any`) preventing us from detecting silly errors such as confusion between `null` and `undefined` values.\\n\\nIn version 3, the hooks have been added a new `userIdType` option to check and convert the JavaScript type if necessary and force the TypeScript type of the function. The returned type is also safer and corresponds to the type of `ctx.user` which is no longer `any` but `{ [key : string] : any } | null`.\\n\\n*Example where the ID is a string*\\n```typescript\\n@JWTRequired({\\n  user: (id: string) => User.findOneBy({ id });\\n  userIdType: \'string\',\\n})\\n```\\n\\n*Example where the ID is a number*\\n```typescript\\n@JWTRequired({\\n  user: (id: number) => User.findOneBy({ id });\\n  userIdType: \'number\',\\n})\\n```\\n\\nBy default, the value of `userIdType` is a number, so we can simply write this: \\n\\n```typescript\\n@JWTRequired({\\n  user: (id: number) => User.findOneBy({ id });\\n})\\n```\\n\\n### GraphQL\\n\\nIn version 2, GraphQL schemas were of type `any`. In version 3, they are all based on the `GraphQLSchema` interface.\\n\\n## Closer to JS ecosystem standards\\n\\nSome parts have been modified to get closer to the JS ecosystem standards. In particular:\\n\\n### Development command\\n\\nThe `npm run develop` has been renamed to `npm run dev`.\\n\\n### Configuration through environment variables\\n\\nWhen two values of the same variable are provided by a `.env` file and an environment variable, then the value of the environment is used (the behavior is similar to that of the [dotenv](https://www.npmjs.com/package/dotenv) library).\\n\\n### `null` vs `undefined` values\\n\\nWhen the request has no session or the user is not authenticated, the values of `ctx.session` and `ctx.user` are `null` and no longer `undefined`. This makes sense from a semantic point of view, and it also simplifies the user assignment from the `find` functions of popular ORMs (Prisma, TypeORM, Mikro-ORM). They all return `null` when no value is found.\\n\\n## More open to other ORMs\\n\\nTypeORM is the default ORM used in the documentation examples and in the projects generated by the CLI. But it is quite possible to use another ORM or query generator with Foal. For example, the authentication system (with sessions or JWT) makes no assumptions about database access.\\n\\nSome parts of the framework were still a bit tied to TypeORM in version 2. Version 3 fixed this.\\n\\n### Shell scripts\\n\\nWhen running the `foal generate script` command, the generated script file no longer contains TypeORM code.\\n\\n### Permission system\\n\\nThe `@PermissionRequired` option is no longer bound to TypeORM and can be used with any `ctx.user` that implements the `IUserWithPermissions` interface.\\n\\n## Smaller AWS S3 package\\n\\nThe `@foal/aws-s3` package is now based on version 3 of the AWS SDK. Thanks to this, the size of the `node_modules` has been reduced by three.\\n\\n## Dependencies updated and support of Node latest versions\\n\\nAll Foal\'s dependencies have been upgraded. The framework is also tested on Node versions 16 and 18.\\n\\n## Some bug fixes\\n\\nIf the configuration file `production.js` explicitly returns `undefined` for a given key and the `default.json` file returns a defined value for this key, then the value from the `default.json` file is returned by `Config.get`."},{"id":"/2022/10/09/version-2.11-release-notes","metadata":{"permalink":"/blog/2022/10/09/version-2.11-release-notes","editUrl":"https://github.com/FoalTS/foal/edit/master/docs/blog/2022-10-09-version-2.11-release-notes.md","source":"@site/blog/2022-10-09-version-2.11-release-notes.md","title":"Version 2.11 release notes","description":"Banner","date":"2022-10-09T00:00:00.000Z","formattedDate":"October 9, 2022","tags":[{"label":"release","permalink":"/blog/tags/release"}],"readingTime":0.975,"hasTruncateMarker":true,"authors":[{"name":"Lo\xefc Poullain","title":"Creator of FoalTS. Software engineer.","url":"https://loicpoullain.com","imageURL":"https://avatars1.githubusercontent.com/u/13604533?v=4"}],"frontMatter":{"title":"Version 2.11 release notes","author":"Lo\xefc Poullain","author_title":"Creator of FoalTS. Software engineer.","author_url":"https://loicpoullain.com","author_image_url":"https://avatars1.githubusercontent.com/u/13604533?v=4","image":"blog/twitter-banners/version-2.11-release-notes.png","tags":["release"]},"prevItem":{"title":"Version 3.0 release notes","permalink":"/blog/2022/11/01/version-3.0-release-notes"},"nextItem":{"title":"Version 2.10 release notes","permalink":"/blog/2022/08/11/version-2.10-release-notes"}},"content":"![Banner](./assets/version-2.11-is-here/banner.png)\\n\\nVersion 2.11 of [Foal](https://foalts.org/) is out! Here are the improvements that it brings:\\n\\n\x3c!--truncate--\x3e\\n\\n## Number of Iterations on Password Hashing Has Been Increased\\n\\nThe PBKDF2 algorithm (used for password hashing) uses a number of iterations to hash passwords. This work factor is deliberate and slows down potential attackers, making attacks against hashed passwords more difficult.\\n\\nAs computing power increases, the number of iterations must also increase. This is why, starting with version 2.11, the number of iterations has been increased to 310,000.\\n\\nTo check that an existing password hash is using the latest recommended number of iterations, you can use the `passwordHashNeedsToBeRefreshed` function.\\n\\nThe example below shows how to perform this check during a login and how to upgrade the password hash if the number of iterations turns out to be too low.\\n\\n```typescript\\nconst { email, password } = ctx.request.body;\\n\\nconst user = await User.findOne({ email });\\n\\nif (!user) {\\n  return new HttpResponseUnauthorized();\\n}\\n\\nif (!await verifyPassword(password, user.password)) {\\n  return new HttpResponseUnauthorized();\\n}\\n\\n// highlight-start\\n// This line must be after the password verification.\\nif (passwordHashNeedsToBeRefreshed(user.password)) {\\n  user.password = await hashPassword(password);\\n  await user.save();\\n}\\n// highlight-end\\n\\n// Log the user in.\\n```"},{"id":"/2022/08/11/version-2.10-release-notes","metadata":{"permalink":"/blog/2022/08/11/version-2.10-release-notes","editUrl":"https://github.com/FoalTS/foal/edit/master/docs/blog/2022-08-11-version-2.10-release-notes.md","source":"@site/blog/2022-08-11-version-2.10-release-notes.md","title":"Version 2.10 release notes","description":"Banner","date":"2022-08-11T00:00:00.000Z","formattedDate":"August 11, 2022","tags":[{"label":"release","permalink":"/blog/tags/release"}],"readingTime":0.695,"hasTruncateMarker":true,"authors":[{"name":"Lo\xefc Poullain","title":"Creator of FoalTS. Software engineer.","url":"https://loicpoullain.com","imageURL":"https://avatars1.githubusercontent.com/u/13604533?v=4"}],"frontMatter":{"title":"Version 2.10 release notes","author":"Lo\xefc Poullain","author_title":"Creator of FoalTS. Software engineer.","author_url":"https://loicpoullain.com","author_image_url":"https://avatars1.githubusercontent.com/u/13604533?v=4","image":"blog/twitter-banners/version-2.10-release-notes.png","tags":["release"]},"prevItem":{"title":"Version 2.11 release notes","permalink":"/blog/2022/10/09/version-2.11-release-notes"},"nextItem":{"title":"FoalTS 2022 survey is open!","permalink":"/blog/2022/06/13/FoalTS-2022-survey-is-open"}},"content":"![Banner](./assets/version-2.10-is-here/banner.png)\\n\\nVersion 2.10 of [Foal](https://foalts.org/) is out! This small release brings some tiny improvements.\\n\\n\x3c!--truncate--\x3e\\n\\n## `@foal/cli` package included by default as dev dependency\\n\\nIssue: [#1097](https://github.com/FoalTS/foal/issues/1097)\\n\\nThe `@foal/cli` package is now installed by default as dev dependency. In this way, all commands of `package.json` still work when deploying the application to a Cloud provider that does not have the CLI installed globally.\\n\\nContributor: [@scho-to](https://github.com/scho-to/)\\n\\n## Preventing the `npm run develop` command to get stuck on some OS\\n\\nIssues: [#1022](https://github.com/FoalTS/foal/issues/1022), [#1115](https://github.com/FoalTS/foal/issues/1115)\\n\\nThe `npm run develop` was getting stuck on some OS based on the configuration of the app. This issue is now fixed in new projects. For current applications, you will need to add a `-r` flag to the `package.json` commands using `concurrently`.\\n\\n## Smaller `main` function\\n\\nThe `main` function that bootstraps the application is now smaller in new projects."},{"id":"/2022/06/13/FoalTS-2022-survey-is-open","metadata":{"permalink":"/blog/2022/06/13/FoalTS-2022-survey-is-open","editUrl":"https://github.com/FoalTS/foal/edit/master/docs/blog/2022-06-13-FoalTS-2022-survey-is-open.md","source":"@site/blog/2022-06-13-FoalTS-2022-survey-is-open.md","title":"FoalTS 2022 survey is open!","description":"FoalTS 2022 survey is now open (yes, a few months late \ud83d\ude43)!","date":"2022-06-13T00:00:00.000Z","formattedDate":"June 13, 2022","tags":[{"label":"survey","permalink":"/blog/tags/survey"}],"readingTime":0.325,"hasTruncateMarker":false,"authors":[{"name":"Lo\xefc Poullain","title":"Creator of FoalTS. Software engineer.","url":"https://loicpoullain.com","imageURL":"https://avatars1.githubusercontent.com/u/13604533?v=4"}],"frontMatter":{"title":"FoalTS 2022 survey is open!","author":"Lo\xefc Poullain","author_title":"Creator of FoalTS. Software engineer.","author_url":"https://loicpoullain.com","author_image_url":"https://avatars1.githubusercontent.com/u/13604533?v=4","tags":["survey"]},"prevItem":{"title":"Version 2.10 release notes","permalink":"/blog/2022/08/11/version-2.10-release-notes"},"nextItem":{"title":"Version 2.9 release notes","permalink":"/blog/2022/05/29/version-2.9-release-notes"}},"content":"FoalTS 2022 survey is now open (yes, a few months late \ud83d\ude43)!\\n\\nYour responses to these questions are really valuable as they help me better understand what you need and how to improve the framework going forward \ud83d\udc4c.\\n\\nI read every response carefully so feel free to say anything you have to say!\\n\\n\ud83d\udc49 [The link to the survey](https://forms.gle/3HAzQboxSBXvpJbB6).\\n\\nThe survey closes on June 31."},{"id":"/2022/05/29/version-2.9-release-notes","metadata":{"permalink":"/blog/2022/05/29/version-2.9-release-notes","editUrl":"https://github.com/FoalTS/foal/edit/master/docs/blog/2022-05-29-version-2.9-release-notes.md","source":"@site/blog/2022-05-29-version-2.9-release-notes.md","title":"Version 2.9 release notes","description":"Banner","date":"2022-05-29T00:00:00.000Z","formattedDate":"May 29, 2022","tags":[{"label":"release","permalink":"/blog/tags/release"}],"readingTime":1.19,"hasTruncateMarker":true,"authors":[{"name":"Lo\xefc Poullain","title":"Creator of FoalTS. Software engineer.","url":"https://loicpoullain.com","imageURL":"https://avatars1.githubusercontent.com/u/13604533?v=4"}],"frontMatter":{"title":"Version 2.9 release notes","author":"Lo\xefc Poullain","author_title":"Creator of FoalTS. Software engineer.","author_url":"https://loicpoullain.com","author_image_url":"https://avatars1.githubusercontent.com/u/13604533?v=4","image":"blog/twitter-banners/version-2.9-release-notes.png","tags":["release"]},"prevItem":{"title":"FoalTS 2022 survey is open!","permalink":"/blog/2022/06/13/FoalTS-2022-survey-is-open"},"nextItem":{"title":"Version 2.8 release notes","permalink":"/blog/2022/02/13/version-2.8-release-notes"}},"content":"![Banner](./assets/version-2.9-is-here/banner.png)\\n\\nVersion 2.9 of [Foal](https://foalts.org/) has been released! Here are the improvements that it brings.\\n\\n\x3c!--truncate--\x3e\\n\\n## New OAuth2 Twitter Provider\\n\\nAfter LinkedIn, Google, Github and Facebook, Foal now supports Twitter for social authentication.\\n\\n\ud83d\udc49 [Link to the documentation](https://foalts.org/docs/authentication/social-auth/)\\n\\nA big thanks to [@LeonardoSalvucci](https://github.com/LeonardoSalvucci) for having implemented this feature.\\n\\n```typescript\\n// 3p\\nimport { Context, dependency, Get } from \'@foal/core\';\\nimport { TwitterProvider } from \'@foal/social\';\\n\\nexport class AuthController {\\n  @dependency\\n  twitter: TwitterProvider;\\n\\n  @Get(\'/signin/twitter\')\\n  redirectToTwitter() {\\n    // Your \\"Login In with Twitter\\" button should point to this route.\\n    // The user will be redirected to Twitter auth page.\\n    return this.twitter.redirect();\\n  }\\n\\n  @Get(\'/signin/twitter/callback\')\\n  async handleTwitterRedirection(ctx: Context) {\\n    // Once the user gives their permission to log in with Twitter, the OAuth server\\n    // will redirect the user to this route. This route must match the redirect URI.\\n    const { userInfo, tokens } = await this.twitter.getUserInfo(ctx);\\n\\n    // Do something with the user information AND/OR the access token.\\n    // If you only need the access token, you can call the \\"getTokens\\" method.\\n\\n    // The method usually ends with a HttpResponseRedirect object as returned value.\\n  }\\n\\n}\\n```\\n\\n## OAuth2 Providers support PKCE Code Flow\\n\\nOAuth2 abstract provider now supports PKCE code flow. If you wish to implement your own provider using PKCE, it\'s now possible!\\n\\n## Support for version 15 of `graphql` and latest version of `type-graphql`\\n\\nFoal\'s dependencies have been updated so as to support the latest version of [TypeGraphQL](https://typegraphql.com/)."},{"id":"/2022/02/13/version-2.8-release-notes","metadata":{"permalink":"/blog/2022/02/13/version-2.8-release-notes","editUrl":"https://github.com/FoalTS/foal/edit/master/docs/blog/2022-02-13-version-2.8-release-notes.md","source":"@site/blog/2022-02-13-version-2.8-release-notes.md","title":"Version 2.8 release notes","description":"Banner","date":"2022-02-13T00:00:00.000Z","formattedDate":"February 13, 2022","tags":[{"label":"release","permalink":"/blog/tags/release"}],"readingTime":9.735,"hasTruncateMarker":true,"authors":[{"name":"Lo\xefc Poullain","title":"Creator of FoalTS. Software engineer.","url":"https://loicpoullain.com","imageURL":"https://avatars1.githubusercontent.com/u/13604533?v=4"}],"frontMatter":{"title":"Version 2.8 release notes","author":"Lo\xefc Poullain","author_title":"Creator of FoalTS. Software engineer.","author_url":"https://loicpoullain.com","author_image_url":"https://avatars1.githubusercontent.com/u/13604533?v=4","image":"blog/twitter-banners/version-2.8-release-notes.png","tags":["release"]},"prevItem":{"title":"Version 2.9 release notes","permalink":"/blog/2022/05/29/version-2.9-release-notes"},"nextItem":{"title":"Version 2.7 release notes","permalink":"/blog/2021/12/12/version-2.7-release-notes"}},"content":"import Tabs from \'@theme/Tabs\';\\nimport TabItem from \'@theme/TabItem\';\\n\\n![Banner](./assets/version-2.8-is-here/banner.png)\\n\\nVersion 2.8 of Foal has been released! Here are the improvements that it brings.\\n\\n\x3c!--truncate--\x3e\\n\\n## WebSocket support and `socket.io` integration\\n\\nAs of version 2.8, Foal officially supports WebSockets, allowing you to establish two-way interactive communication between your server(s) and your clients.\\n\\nThe architecture includes: controllers and sub-controllers, hooks, success and error responses, message broadcasting, rooms, use from HTTP controllers, DI, error-handling, validation, unit testing, horizontal scalability, auto-reconnection, etc\\n\\n### Get Started\\n\\n#### Server\\n\\n```bash\\nnpm install @foal/socket.io\\n```\\n\\n*services/websocket.service.ts*\\n```typescript\\nimport { EventName, ValidatePayload, SocketIOController, WebsocketContext, WebsocketResponse } from \'@foal/socket.io\';\\n\\nexport class WebsocketController extends SocketIOController {\\n\\n  @EventName(\'create product\')\\n  @ValidatePayload({\\n    additionalProperties: false,\\n    properties: { name: { type: \'string\' }},\\n    required: [ \'name\' ],\\n    type: \'object\'\\n  })\\n  async createProduct(ctx: WebsocketContext, payload: { name: string }) {\\n    const product = new Product();\\n    product.name = payload.name;\\n    await product.save();\\n\\n    // Send a message to all clients.\\n    ctx.socket.broadcast.emit(\'refresh products\');\\n    return new WebsocketResponse();\\n  }\\n\\n}\\n```\\n\\n*src/index.ts*\\n\\n```typescript\\n// ...\\n\\nasync function main() {\\n  const serviceManager = new ServiceManager();\\n\\n  const app = await createApp(AppController, { serviceManager });\\n  const httpServer = http.createServer(app);\\n\\n  // Instanciate, init and connect websocket controllers.\\n  await serviceManager.get(WebsocketController).attachHttpServer(httpServer);\\n\\n  // ...\\n}\\n\\n```\\n\\n#### Client\\n\\n> This example uses JavaScript code as client, but socket.io supports also [many other languages](https://socket.io/docs/v4) (python, java, etc).\\n\\n```bash\\nnpm install socket.io-client@4\\n```\\n\\n```typescript\\nimport { io } from \'socket.io-client\';\\n\\nconst socket = io(\'ws://localhost:3001\');\\n\\nsocket.on(\'connect\', () => {\\n\\n  socket.emit(\'create product\', { name: \'product 1\' }, response => {\\n    if (response.status === \'error\') {\\n      console.log(response.error);\\n    }\\n  });\\n\\n});\\n\\nsocket.on(\'connect_error\', () => {\\n  console.log(\'Impossible to establish the socket.io connection\');\\n});\\n\\nsocket.on(\'refresh products\', () => {\\n  console.log(\'refresh products!\');\\n});\\n```\\n\\n> When using socket.io with FoalTS, the client function `emit` can only take one, two or three arguments.\\n> ```typescript\\n> socket.emit(\'event name\');\\n> socket.emit(\'event name\', { /* payload */ });\\n> // The acknowledgement callback must always be passed in third position.\\n> socket.emit(\'event name\', { /* payload */ }, response => { /* do something */ });\\n> ```\\n\\n### Architecture\\n\\n#### Controllers and hooks\\n\\nThe WebSocket architecture is very similar to the HTTP architecture. They both have controllers and hooks. While HTTP controllers use paths to handle the various application endpoints, websocket controllers use event names. As with HTTP, event names can be extended with subcontrollers.\\n\\n*user.controller.ts*\\n```typescript\\nimport { EventName, WebsocketContext } from \'@foal/socket.io\';\\n\\nexport class UserController {\\n\\n  @EventName(\'create\')\\n  createUser(ctx: WebsocketContext) {\\n    // ...\\n  }\\n\\n  @EventName(\'delete\')\\n  deleteUser(ctx: WebsocketContext) {\\n    // ...\\n  }\\n\\n}\\n```\\n\\n*websocket.controller.ts*\\n```typescript\\nimport { SocketIOController, wsController } from \'@foal/socket.io\';\\n\\nimport { UserController } from \'./user.controller.ts\';\\n\\nexport class WebsocketController extends SocketIOController {\\n  subControllers = [\\n    wsController(\'users \', UserController)\\n  ];\\n}\\n```\\n\\n> Note that the event names are simply concatenated. So you have to manage the spaces between the words yourself if there are any.\\n\\n##### Contexts\\n\\nThe `Context` and `WebsocketContext` classes share common properties such as the `state`, the `user` and the `session`.\\n\\n\\nHowever, unlike their HTTP version, instances of `WebsocketContext` do not have a `request` property but a `socket` property which is the object provided by socket.io. They also have two other attributes: the `eventName` and the `payload` of the request.\\n\\n##### Responses\\n\\nA controller method returns a response which is either a `WebsocketResponse` or a `WebsocketErrorResponse`.\\n\\nIf a `WebsocketResponse(data)` is returned, the server will return to the client an object of this form:\\n```typescript\\n{\\n  status: \'ok\',\\n  data: data\\n}\\n```\\n\\n\\nIf it is a `WebsocketErrorResponse(error)`, the returned object will look like this:\\n```typescript\\n{\\n  status: \'error\',\\n  error: error\\n}\\n```\\n\\n> Note that the `data` and `error` parameters are both optional.\\n\\n##### Hooks\\n\\nIn the same way, Foal provides hooks for websockets. They work the same as their HTTP version except that some types are different (`WebsocketContext`, `WebsocketResponse|WebsocketErrorResponse`).\\n\\n```typescript\\nimport { EventName, WebsocketContext, WebsocketErrorResponse, WebsocketHook } from \'@foal/socket.io\';\\n\\nexport class UserController {\\n\\n  @EventName(\'create\')\\n  @WebsocketHook((ctx, services) => {\\n    if (typeof ctx.payload.name !== \'string\') {\\n      return new WebsocketErrorResponse(\'Invalid name type\');\\n    }\\n  })\\n  createUser(ctx: WebsocketContext) {\\n    // ...\\n  }\\n}\\n```\\n\\n##### Summary table\\n\\n| HTTP | Websocket |\\n| --- | --- |\\n| `@Get`, `@Post`, etc | `@EventName` |\\n| `controller` | `wsController` |\\n| `Context` | `WebsocketContext` |\\n| `HttpResponse`(s) | `WebsocketResponse`, `WebsocketErrorResponse` |\\n| `Hook` | `WebsocketHook` |\\n| `MergeHooks` | `MergeWebsocketHooks` |\\n| `getHookFunction`, `getHookFunctions` | `getWebsocketHookFunction`, `getWebsocketHookFunctions` |\\n\\n#### Send a message\\n\\nAt any time, the server can send one or more messages to the client using its `socket` object.\\n\\n*Server code*\\n```typescript\\nimport { EventName, WebsocketContext, WebsocketResponse } from \'@foal/socket.io\';\\n\\nexport class UserController {\\n\\n  @EventName(\'create\')\\n  createUser(ctx: WebsocketContext) {\\n    ctx.socket.emit(\'event 1\', \'first message\');\\n    ctx.socket.emit(\'event 1\', \'second message\');\\n    return new WebsocketResponse();\\n  }\\n}\\n```\\n\\n*Client code*\\n```typescript\\nsocket.on(\'event 1\', payload => {\\n  console.log(\'Message: \', payload);\\n});\\n```\\n\\n#### Broadcast a message\\n\\nIf a message is to be broadcast to all clients, you can use the `broadcast` property for this.\\n\\n*Server code*\\n```typescript\\nimport { EventName, WebsocketContext, WebsocketResponse } from \'@foal/socket.io\';\\n\\nexport class UserController {\\n\\n  @EventName(\'create\')\\n  createUser(ctx: WebsocketContext) {\\n    ctx.socket.broadcast.emit(\'event 1\', \'first message\');\\n    ctx.socket.broadcast.emit(\'event 1\', \'second message\');\\n    return new WebsocketResponse();\\n  }\\n}\\n```\\n\\n*Client code*\\n```typescript\\nsocket.on(\'event 1\', payload => {\\n  console.log(\'Message: \', payload);\\n});\\n```\\n\\n#### Grouping clients in rooms\\n\\nSocket.io uses the concept of [rooms](https://socket.io/docs/v4/rooms/) to gather clients in groups. This can be useful if you need to send a message to a particular subset of clients.\\n\\n```typescript\\nimport { EventName, SocketIOController, WebsocketContext, WebsocketResponse } from \'@foal/socket.io\';\\n\\nexport class WebsocketController extends SocketIOController {\\n\\n  onConnection(ctx: WebsocketContext) {\\n    ctx.socket.join(\'some room\');\\n  }\\n\\n  @EventName(\'event 1\')\\n  createUser(ctx: WebsocketContext) {\\n    ctx.socket.to(\'some room\').emit(\'event 2\');\\n    return new WebsocketResponse();\\n  }\\n\\n}\\n```\\n\\n#### Accessing the socket.io server\\n\\nYou can access the socket.io server anywhere in your code (including your HTTP controllers) by injecting the `WsServer` service.\\n\\n```typescript\\nimport { dependency, HttpResponseOK, Post } from \'@foal/core\';\\nimport { WsServer } from \'@foal/socket.io\';\\n\\nexport class UserController {\\n  @dependency\\n  wsServer: WsServer;\\n\\n  @Post(\'/users\')\\n  createUser() {\\n    // ...\\n    this.wsServer.io.emit(\'refresh users\');\\n\\n    return new HttpResponseOK();\\n  }\\n}\\n```\\n\\n#### Error-handling\\n\\nAny error thrown or rejected in a websocket controller, hook or service, if not caught, is converted to a `WebsocketResponseError`. If the `settings.debug` configuration parameter is `true`, then the error is returned as is to the client. Otherwise, the server returns this response:\\n\\n```typescript\\n({\\n  status: \'error\',\\n  error: {\\n    code: \'INTERNAL_SERVER_ERROR\',\\n    message: \'An internal server error has occurred.\'\\n  }\\n})\\n```\\n\\n##### Customizing the error handler\\n\\nJust as its HTTP version, the `SocketIOController` class supports an optional `handleError` to override the default error handler.\\n\\n```typescript\\nimport { EventName, renderWebsocketError, SocketIOController, WebsocketContext, WebsocketErrorResponse } from \'@foal/socket.io\';\\n\\nclass PermissionDenied extends Error {}\\n\\nexport class WebsocketController extends SocketIOController implements ISocketIOController {\\n  @EventName(\'create user\')\\n  createUser() {\\n    throw new PermissionDenied();\\n  }\\n\\n  handleError(error: Error, ctx: WebsocketContext){\\n    if (error instanceof PermissionDenied) {\\n      return new WebsocketErrorResponse(\'Permission is denied\');\\n    }\\n\\n    return renderWebsocketError(error, ctx);\\n  }\\n}\\n```\\n\\n### Payload Validation\\n\\nFoal provides a default hook `@ValidatePayload` to validate the request payload. It is very similar to its HTTP version `@ValidateBody`.\\n\\n*Server code*\\n```typescript\\nimport { EventName, SocketIOController, WebsocketContext, WebsocketResponse } from \'@foal/socket.io\';\\n\\nexport class WebsocketController extends SocketIOController {\\n\\n  @EventName(\'create product\')\\n  @ValidatePayload({\\n    additionalProperties: false,\\n    properties: { name: { type: \'string\' }},\\n    required: [ \'name\' ],\\n    type: \'object\'\\n  })\\n  async createProduct(ctx: WebsocketContext, payload: { name: string }) {\\n    const product = new Product();\\n    product.name = payload.name;\\n    await product.save();\\n\\n    // Send a message to all clients.\\n    ctx.socket.broadcast.emit(\'refresh products\');\\n    return new WebsocketResponse();\\n  }\\n\\n}\\n```\\n\\n*Validation error response*\\n```typescript\\n({\\n  status: \'error\',\\n  error: {\\n    code: \'VALIDATION_PAYLOAD_ERROR\',\\n    payload: [\\n      // errors\\n    ]\\n  }\\n})\\n```\\n\\n### Unit Testing\\n\\nTesting WebSocket controllers and hooks is very similar to testing their HTTP equivalent. The `WebsocketContext` takes three parameters.\\n\\n| Name | Type | Description |\\n| --- | --- | --- |\\n| `eventName` | `string` | The name of the event. |\\n| `payload`| `any` |  The request payload. |\\n| `socket` | `any` |  The socket (optional). Default: `{}`. |\\n\\n### Advanced\\n\\n#### Multiple node servers\\n\\nThis example shows how to manage multiple node servers using a redis adapter.\\n\\n```bash\\nnpm install @socket.io/redis-adapter@7 redis@3\\n```\\n\\n*websocket.controller.ts*\\n```typescript\\nimport { EventName, SocketIOController, WebsocketContext, WebsocketResponse } from \'@foal/socket.io\';\\nimport { createAdapter } from \'@socket.io/redis-adapter\';\\nimport { createClient } from \'redis\';\\n\\nexport const pubClient = createClient({ url: \'redis://localhost:6379\' });\\nexport const subClient = pubClient.duplicate();\\n\\nexport class WebsocketController extends SocketIOController {\\n  adapter = createAdapter(pubClient, subClient);\\n\\n  @EventName(\'create user\')\\n  createUser(ctx: WebsocketContext) {\\n    // Broadcast an event to all clients of all servers.\\n    ctx.socket.broadcast.emit(\'refresh users\');\\n    return new WebsocketResponse();\\n  }\\n}\\n```\\n\\n#### Handling connection\\n\\nIf you want to run some code when a Websocket connection is established (for example to join a room or forward the session), you can use the `onConnection` method of the `SocketIOController` for this.\\n\\n```typescript\\nimport { SocketIOController, WebsocketContext } from \'@foal/socket.io\';\\n\\nexport class WebsocketController extends SocketIOController {\\n\\n  onConnection(ctx: WebsocketContext) {\\n    // ...\\n  }\\n\\n}\\n```\\n\\n> The context passed in the `onConnection` method has an undefined payload and an empty event name.\\n\\n##### Error-handling\\n\\nAny errors thrown or rejected in the `onConnection` is sent back to the client. So you may need to add a `try {} catch {}` in some cases.\\n\\nThis error can be read on the client using the `connect_error` event listener.\\n\\n```typescript\\nsocket.on(\\"connect_error\\", () => {\\n  // Do some stuff\\n  socket.connect();\\n});\\n```\\n\\n#### Custom server options\\n\\nCustom options can be passed to the socket.io server as follows. The complete list of options can be found [here](https://socket.io/docs/v4/server-options/).\\n\\n```typescript\\nimport { SocketIOController } from \'@foal/socket.io\';\\n\\nexport class WebsocketController extends SocketIOController {\\n\\n  options = {\\n    connectTimeout: 60000\\n  }\\n\\n}\\n```\\n\\n## Passing a custom database client to a session store\\n\\nBy default, the `MongoDBStore` and `RedisStore` create a new client to connect to their respective databases. The `TypeORMStore` uses the default TypeORM connection.\\n\\nIt is now possible to override this behavior by providing a custom client to the stores at initialization.\\n\\n### `TypeORMStore`\\n\\n*First example*\\n```typescript\\nimport { dependency } from \'@foal/core\';\\nimport { TypeORMStore } from \'@foal/typeorm\';\\nimport { createConnection } from \'typeorm\';\\n\\nexport class AppController {\\n  @dependency\\n  store: TypeORMStore;\\n\\n  // ...\\n\\n  async init() {\\n    const connection = await createConnection(\'connection2\');\\n    this.store.setConnection(connection);\\n  }\\n}\\n```\\n\\n*Second example*\\n\\n```typescript\\nimport { createApp, ServiceManager } from \'@foal/core\';\\nimport { TypeORMStore } from \'@foal/typeorm\';\\nimport { createConnection } from \'typeorm\';\\n\\nasync function main() {\\n  const connection = await createConnection(\'connection2\');\\n\\n  const serviceManager = new ServiceManager();\\n  serviceManager.get(TypeORMStore).setConnection(connection);\\n\\n  const app = await createApp(AppController, { serviceManager });\\n\\n  // ...\\n}\\n```\\n\\n### `RedisStore`\\n\\n```\\nnpm install redis@3\\n```\\n\\n*index.ts*\\n```typescript\\nimport { createApp, ServiceManager } from \'@foal/core\';\\nimport { RedisStore } from \'@foal/redis\';\\nimport { createClient } from \'redis\';\\n\\nasync function main() {\\n  const redisClient = createClient(\'redis://localhost:6379\');\\n\\n  const serviceManager = new ServiceManager();\\n  serviceManager.get(RedisStore).setRedisClient(redisClient);\\n\\n  const app = await createApp(AppController, { serviceManager });\\n\\n  // ...\\n}\\n```\\n\\n### `MongoDBStore`\\n\\n```\\nnpm install mongodb@3\\n```\\n\\n*index.ts*\\n```typescript\\nimport { createApp, ServiceManager } from \'@foal/core\';\\nimport { MongoDBStore } from \'@foal/mongodb\';\\nimport { MongoClient } from \'mongodb\';\\n\\nasync function main() {\\n  const mongoDBClient = await MongoClient.connect(\'mongodb://localhost:27017/db\', {\\n    useNewUrlParser: true,\\n    useUnifiedTopology: true\\n  });\\n\\n  const serviceManager = new ServiceManager();\\n  serviceManager.get(MongoDBStore).setMongoDBClient(mongoDBClient);\\n\\n  const app = await createApp(AppController, { serviceManager });\\n\\n  // ...\\n}\\n```\\n\\n## Support for AWS S3 Server-Side Encryption\\n\\nA new configuration option can be provided to the `S3Disk` to support server-side encryption.\\n\\n*Example*\\n<Tabs\\n  defaultValue=\\"yaml\\"\\n  values={[\\n    {label: \'YAML\', value: \'yaml\'},\\n    {label: \'JSON\', value: \'json\'},\\n    {label: \'JS\', value: \'js\'},\\n  ]}\\n>\\n<TabItem value=\\"yaml\\">\\n\\n```yaml\\nsettings:\\n  aws:\\n    accessKeyId: xxx\\n    secretAccessKey: yyy\\n  disk:\\n    driver: \'@foal/aws-s3\'\\n    s3:\\n      bucket: \'uploaded\'\\n      serverSideEncryption: \'AES256\'\\n```\\n\\n</TabItem>\\n<TabItem value=\\"json\\">\\n\\n```json\\n{\\n  \\"settings\\": {\\n    \\"aws\\": {\\n      \\"accessKeyId\\": \\"xxx\\",\\n      \\"secretAccessKey\\": \\"yyy\\"\\n    },\\n    \\"disk\\": {\\n      \\"driver\\": \\"@foal/aws-s3\\",\\n      \\"s3\\": {\\n        \\"bucket\\": \\"uploaded\\",\\n        \\"serverSideEncryption\\": \\"AES256\\"\\n      }\\n    }\\n  }\\n}\\n```\\n\\n</TabItem>\\n<TabItem value=\\"js\\">\\n\\n```javascript\\nmodule.exports = {\\n  settings: {\\n    aws: {\\n      accessKeyId: \\"xxx\\",\\n      secretAccessKey: \\"yyy\\"\\n    },\\n    disk: {\\n      driver: \\"@foal/aws-s3\\",\\n      s3: {\\n        bucket: \\"uploaded\\",\\n        serverSideEncryption: \\"AES256\\"\\n      }\\n    }\\n  }\\n}\\n```\\n\\n</TabItem>\\n</Tabs>"},{"id":"/2021/12/12/version-2.7-release-notes","metadata":{"permalink":"/blog/2021/12/12/version-2.7-release-notes","editUrl":"https://github.com/FoalTS/foal/edit/master/docs/blog/2021-12-12-version-2.7-release-notes.md","source":"@site/blog/2021-12-12-version-2.7-release-notes.md","title":"Version 2.7 release notes","description":"Banner","date":"2021-12-12T00:00:00.000Z","formattedDate":"December 12, 2021","tags":[{"label":"release","permalink":"/blog/tags/release"}],"readingTime":1.83,"hasTruncateMarker":true,"authors":[{"name":"Lo\xefc Poullain","title":"Creator of FoalTS. Software engineer.","url":"https://loicpoullain.com","imageURL":"https://avatars1.githubusercontent.com/u/13604533?v=4"}],"frontMatter":{"title":"Version 2.7 release notes","author":"Lo\xefc Poullain","author_title":"Creator of FoalTS. Software engineer.","author_url":"https://loicpoullain.com","author_image_url":"https://avatars1.githubusercontent.com/u/13604533?v=4","image":"blog/twitter-banners/version-2.7-release-notes.png","tags":["release"]},"prevItem":{"title":"Version 2.8 release notes","permalink":"/blog/2022/02/13/version-2.8-release-notes"},"nextItem":{"title":"Version 2.6 release notes","permalink":"/blog/2021/09/19/version-2.6-release-notes"}},"content":"![Banner](./assets/version-2.7-is-here/banner.png)\\n\\nVersion 2.7 of Foal has been released! Here are the improvements that it brings.\\n\\n\x3c!--truncate--\x3e\\n\\n## The body of `HttpResponse` can be typed\\n\\nThe `HttpResponse` class becomes generic so as to enforce the type of its `body` property if needed.\\n\\n```typescript\\nimport { Get, HttpResponse } from \'@foal/core\';\\n\\nimport { Product } from \'../entities\';\\n\\nexport class AppController {\\n  @Get(\'/products\')\\n  async products(): HttpResponse<Product[]> {\\n    const products = await Product.find({});\\n    return new HttpResponse(products);\\n  }\\n}\\n```\\n\\nIt also allows you to infer the type of the body in your tests:\\n\\n![Generic HttpResponse](./assets/version-2.7-is-here/generic-http-response.png)\\n\\n## Support for signed cookies\\n\\nStarting from this version, you can sign cookies and read them through the `signedCookies` attribute.\\n\\n```typescript\\nimport { Context, HttpResponseOK, Get, Post } from \'@foal/core\';\\n\\nclass AppController {\\n  @Get(\'/\')\\n  index(ctx: Context) {\\n    const cookie1: string|undefined = ctx.request.signedCookies.cookie1;\\n    // Do something.\\n    return new HttpResponseOK();\\n  }\\n\\n  @Post(\'/sign-cookie\')\\n  index() {\\n    return new HttpResponseOK()\\n      .setCookie(\'cookie1\', \'value1\', {\\n        signed: true\\n      });\\n  }\\n}\\n```\\n\\n> In order to use signed cookies, you must provide a secret with the configuration key `settings.cookieParser.secret`.\\n\\n## Environment name can be provided via `NODE_ENV` or `FOAL_ENV`\\n\\nVersion 2.7 allows to you to specify the environment name (production, development, etc) with the `FOAL_ENV` environment variable.\\n\\nThis can be useful if you have third party libraries whose behavior also depends on the value of `NODE_ENV` (see [Github issue here](https://github.com/FoalTS/foal/issues/1004)).\\n\\n## `foal generate entity` and `foal generate hook` support sub-directories\\n\\n### Example with entities (models)\\n\\n```shell\\nfoal g entity user\\nfoal g entity business/product\\n```\\n\\n*Output*\\n```\\nsrc/\\n \'- app/\\n  \'- entities/\\n   |- business/\\n   | |- product.entity.ts\\n   | \'- index.ts\\n   |- user.entity.ts\\n   \'- index.ts\\n```\\n\\n### Example with hooks\\n\\n```shell\\nfoal g hook log\\nfoal g hook auth/admin-required\\n```\\n\\n*Output*\\n```\\nsrc/\\n \'- app/\\n  \'- hooks/\\n   |- auth/\\n   | |- admin-required.hook.ts\\n   | \'- index.ts\\n   |- log.hook.ts\\n   \'- index.ts\\n```\\n\\n## New `afterPreMiddlewares` option in `createApp`\\n\\nIt is now possible to run a custom middleware after all internal Express middlewares of the framework.\\n\\nThis can be useful in rare situations, for example when using the [RequestContext helper](https://mikro-orm.io/docs/identity-map/#-requestcontext-helper-for-di-containers) in Mikro-ORM.\\n\\n```typescript\\nconst app = await createApp({\\n   afterPreMiddlewares: [\\n      (req, res, next) => {\\n         RequestContext.create(orm.em, next);\\n      }\\n   ]\\n})\\n```\\n\\n\\n## Contributors\\n\\n- [@MCluck90](https://github.com/MCluck90)\\n- [@kingdun3284](https://github.com/kingdun3284)"},{"id":"/2021/09/19/version-2.6-release-notes","metadata":{"permalink":"/blog/2021/09/19/version-2.6-release-notes","editUrl":"https://github.com/FoalTS/foal/edit/master/docs/blog/2021-09-19-version-2.6-release-notes.md","source":"@site/blog/2021-09-19-version-2.6-release-notes.md","title":"Version 2.6 release notes","description":"Banner","date":"2021-09-19T00:00:00.000Z","formattedDate":"September 19, 2021","tags":[{"label":"release","permalink":"/blog/tags/release"}],"readingTime":0.385,"hasTruncateMarker":true,"authors":[{"name":"Lo\xefc Poullain","title":"Creator of FoalTS. Software engineer.","url":"https://loicpoullain.com","imageURL":"https://avatars1.githubusercontent.com/u/13604533?v=4"}],"frontMatter":{"title":"Version 2.6 release notes","author":"Lo\xefc Poullain","author_title":"Creator of FoalTS. Software engineer.","author_url":"https://loicpoullain.com","author_image_url":"https://avatars1.githubusercontent.com/u/13604533?v=4","image":"blog/twitter-banners/version-2.6-release-notes.png","tags":["release"]},"prevItem":{"title":"Version 2.7 release notes","permalink":"/blog/2021/12/12/version-2.7-release-notes"},"nextItem":{"title":"Version 2.5 release notes","permalink":"/blog/2021/06/11/version-2.5-release-notes"}},"content":"![Banner](./assets/version-2.6-is-here/banner.png)\\n\\nVersion 2.6 of Foal has been released! Here are the improvements that it brings.\\n\\n\x3c!--truncate--\x3e\\n\\n## Support of the `array` value for AJV `coerceTypes` option\\n\\n```json\\n{\\n  \\"settings\\": {\\n    \\"ajv\\": {\\n      \\"coerceTypes\\": \\"array\\"\\n    }\\n  }\\n}\\n```\\n\\nOption documentation: [https://ajv.js.org/coercion.html#coercion-to-and-from-array](https://ajv.js.org/coercion.html#coercion-to-and-from-array).\\n\\n## Swagger page supports strict CSP\\n\\nInline scripts in the Swagger page have been removed to support more strict *Content Security Policy* directive.\\n\\n## Bug fixes\\n\\nThe `foal connect angular` command now supports empty `angular.json` files."},{"id":"/2021/06/11/version-2.5-release-notes","metadata":{"permalink":"/blog/2021/06/11/version-2.5-release-notes","editUrl":"https://github.com/FoalTS/foal/edit/master/docs/blog/2021-06-11-version-2.5-release-notes.md","source":"@site/blog/2021-06-11-version-2.5-release-notes.md","title":"Version 2.5 release notes","description":"Banner","date":"2021-06-11T00:00:00.000Z","formattedDate":"June 11, 2021","tags":[{"label":"release","permalink":"/blog/tags/release"}],"readingTime":0.525,"hasTruncateMarker":true,"authors":[{"name":"Lo\xefc Poullain","title":"Creator of FoalTS. Software engineer.","url":"https://loicpoullain.com","imageURL":"https://avatars1.githubusercontent.com/u/13604533?v=4"}],"frontMatter":{"title":"Version 2.5 release notes","author":"Lo\xefc Poullain","author_title":"Creator of FoalTS. Software engineer.","author_url":"https://loicpoullain.com","author_image_url":"https://avatars1.githubusercontent.com/u/13604533?v=4","image":"blog/twitter-banners/version-2.5-release-notes.png","tags":["release"]},"prevItem":{"title":"Version 2.6 release notes","permalink":"/blog/2021/09/19/version-2.6-release-notes"},"nextItem":{"title":"Version 2.4 release notes","permalink":"/blog/2021/05/19/version-2.4-release-notes"}},"content":"![Banner](./assets/version-2.5-is-here/banner.png)\\n\\nVersion 2.5 of Foal has been released! Here are the improvements that it brings.\\n\\n\x3c!--truncate--\x3e\\n\\n## `npm run develop` watches config files\\n\\nIn previous versions of Foal, the `develop` command did not restart the server when a configuration file was changed. This was annoying and is the reason why, starting with v2.5, new projects generated by the CLI will watch configuration files.\\n\\n## `createOpenApiDocument` accepts an optional serviceManager\\n\\nIf you use `createOpenApiDocument`, in a shell script for example, the function accepts an optional `serviceManager` parameter from this version.\\n\\nThis can be useful if your OpenAPI decorators access controller properties whose values are manually injected."},{"id":"/2021/05/19/version-2.4-release-notes","metadata":{"permalink":"/blog/2021/05/19/version-2.4-release-notes","editUrl":"https://github.com/FoalTS/foal/edit/master/docs/blog/2021-05-19-version-2.4-release-notes.md","source":"@site/blog/2021-05-19-version-2.4-release-notes.md","title":"Version 2.4 release notes","description":"Banner","date":"2021-05-19T00:00:00.000Z","formattedDate":"May 19, 2021","tags":[{"label":"release","permalink":"/blog/tags/release"}],"readingTime":1.01,"hasTruncateMarker":true,"authors":[{"name":"Lo\xefc Poullain","title":"Creator of FoalTS. Software engineer.","url":"https://loicpoullain.com","imageURL":"https://avatars1.githubusercontent.com/u/13604533?v=4"}],"frontMatter":{"title":"Version 2.4 release notes","author":"Lo\xefc Poullain","author_title":"Creator of FoalTS. Software engineer.","author_url":"https://loicpoullain.com","author_image_url":"https://avatars1.githubusercontent.com/u/13604533?v=4","image":"blog/twitter-banners/version-2.4-release-notes.png","tags":["release"]},"prevItem":{"title":"Version 2.5 release notes","permalink":"/blog/2021/06/11/version-2.5-release-notes"},"nextItem":{"title":"Version 2.3 release notes","permalink":"/blog/2021/04/22/version-2.3-release-notes"}},"content":"![Banner](./assets/version-2.4-is-here/banner.png)\\n\\nVersion 2.4 of Foal has been released! Here are the improvements that it brings.\\n\\n\x3c!--truncate--\x3e\\n\\n## `$data` references for validation\\n\\nVersion 2.4 allows you to enable the AJV `$data` option so that you can use the verified data values as validators for other values.\\n\\n*config/default.json*\\n```json\\n{\\n  \\"settings\\": {\\n    \\"ajv\\": {\\n      \\"$data\\": true\\n    }\\n  }\\n}\\n```\\n\\n*Example of auth controller*\\n```typescript\\nimport { Context, Post, ValidateBody } from \'@foal/core\';\\n\\nexport class AuthController {\\n  @Post(\'/signup\')\\n  @ValidateBody({\\n    type: \'object\',\\n    properties: {\\n      username: { type: \'string\' },\\n      password: { type: \'string\' },\\n      // \\"password\\" and \\"confirmPassword\\" should be identical.\\n      confirmPassword: {\\n        const: {\\n          $data: \'1/password\',\\n        },\\n        type: \'string\',\\n      },\\n    }\\n    required: [ \'username\', \'password\', \'confirmPassword\' ],\\n    additionalProperties: false\\n  })\\n  signup(ctx: Context) {\\n    // Do something.\\n  }\\n}\\n\\n```\\n\\n## Cache option for file downloading\\n\\nStarting from version 2.4 the `Disk.createHttpResponse` method accepts an optional parameter to specify the value of the `Cache-Control` header.\\n\\n```typescript\\nimport { Context, dependency, Get } from \'@foal/core\';\\nimport { Disk } from \'@foal/storage\';\\n\\nimport { User } from \'../entities\';\\n\\nexport class ProfileController {\\n  @dependency\\n  disk: Disk;\\n\\n  @Get(\'/avatar\')\\n  async readProfileImage(ctx: Context<User>) {\\n    return this.disk.createHttpResponse(ctx.user.avatar, {\\n      cache: \'no-cache\'\\n    });\\n  }\\n```\\n\\n## Bug fixes\\n\\nSee issue [#930](https://github.com/FoalTS/foal/issues/930).\\n\\n## Contributors\\n\\n[@ZakRabe](https://github.com/ZakRabe)"},{"id":"/2021/04/22/version-2.3-release-notes","metadata":{"permalink":"/blog/2021/04/22/version-2.3-release-notes","editUrl":"https://github.com/FoalTS/foal/edit/master/docs/blog/2021-04-22-version-2.3-release-notes.md","source":"@site/blog/2021-04-22-version-2.3-release-notes.md","title":"Version 2.3 release notes","description":"Banner","date":"2021-04-22T00:00:00.000Z","formattedDate":"April 22, 2021","tags":[{"label":"release","permalink":"/blog/tags/release"}],"readingTime":2.07,"hasTruncateMarker":true,"authors":[{"name":"Lo\xefc Poullain","title":"Creator of FoalTS. Software engineer.","url":"https://loicpoullain.com","imageURL":"https://avatars1.githubusercontent.com/u/13604533?v=4"}],"frontMatter":{"title":"Version 2.3 release notes","author":"Lo\xefc Poullain","author_title":"Creator of FoalTS. Software engineer.","author_url":"https://loicpoullain.com","author_image_url":"https://avatars1.githubusercontent.com/u/13604533?v=4","image":"blog/twitter-banners/version-2.3-release-notes.png","tags":["release"]},"prevItem":{"title":"Version 2.4 release notes","permalink":"/blog/2021/05/19/version-2.4-release-notes"},"nextItem":{"title":"What\'s new in version 2 (part 4/4)","permalink":"/blog/2021/04/08/whats-new-in-version-2-part-4"}},"content":"![Banner](./assets/version-2.3-is-here/banner.png)\\n\\nVersion 2.3 of Foal has been released! Here are the improvements that it brings.\\n\\n\x3c!--truncate--\x3e\\n\\n## GraphiQL\\n\\nFrom version 2.3, it is possible to generate a GraphiQL page in one line of code. This can be useful if you quickly need to test your API.\\n\\n```bash\\nnpm install @foal/graphiql\\n```\\n\\n![GraphiQL](./assets/version-2.3-is-here/graphiql.png)\\n\\n*app.controller.ts*\\n```typescript\\nimport { GraphiQLController } from \'@foal/graphiql\';\\n\\nimport { GraphqlApiController } from \'./services\';\\n\\nexport class AppController {\\n\\n  subControllers = [\\n    // ...\\n    controller(\'/graphql\', GraphqlApiController),\\n    controller(\'/graphiql\', GraphiQLController)\\n  ];\\n\\n}\\n```\\n\\nThe page is also customizable and you can provide additional options to change the UI or the API endpoint.\\n\\n```typescript\\nexport class GraphiQL2Controller extends GraphiQLController {\\n\\n  cssThemeURL = \'https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.23.0/theme/solarized.css\';\\n\\n  apiEndpoint = \'/api\';\\n\\n  options: GraphiQLControllerOptions = {\\n    docExplorerOpen: true,\\n    editorTheme: \'solarized light\'\\n  }\\n\\n}\\n\\n```\\n\\n## Support for `.env.local` files\\n\\nFoal\'s configuration system already supported `.env` files in previous versions. As of version 2.3, the framework also supports `.env.local` files.\\n\\nThis can be useful in case you want to have two `.env` files, one to define the default env vars needed by the application and another to override these values on your local machine.\\n\\nIf a variable is defined in both files, the value in the `.env.local` file will take precedence.\\n\\nSimilarly, you can also define environment-specific local files (`.env.development.local`, `.env.production.local`, etc).\\n\\n## Prisma documentation\\n\\nThe documentation has been expanded to include [examples](https://foalts.org/docs/databases/other-orm/introduction) of how to use Prisma with Foal.\\n\\n## Base 64 and base 64 URL utilities\\n\\nTwo functions are provided to convert base64 encoded strings to base64url encoded strings and vice versa.\\n\\n```typescript\\nimport { convertBase64ToBase64url, convertBase64urlToBase64 } from \'@foal/core\';\\n\\nconst str = convertBase64ToBase64url(base64Str);\\nconst str2 = convertBase64urlToBase64(base64urlStr);\\n```\\n\\n## Converting Streams to Buffers\\n\\nIn case you need to convert a readable stream to a concatenated buffer during testing, you can now use the `streamToBuffer` function for this.\\n\\n```typescript\\nimport { streamToBuffer } from \'@foal/core\';\\n\\nconst buffer = await streamToBuffer(stream);\\n```\\n\\n## Accessing services during authentication\\n\\nThe `user` option of `@JWTRequired` and `@UseSessions` now gives you the possibility to access services.\\n\\n```typescript\\nclass UserService {\\n  getUser(id) {\\n    return User.findOne({ id });\\n  }\\n}\\n\\n@JWTRequired({\\n  user: (id, services) => services.get(UserService).getUser(id)\\n})\\nclass ApiController {\\n  @Get(\'/products\')\\n  getProducts(ctx: Context) {\\n    // ctx.user is the object returned by UserService.\\n  }\\n}\\n\\n```\\n\\n## Bug Fixes\\n\\n### Social authentication\\n\\nSocial authentication controllers could sometimes return 500 errors, depending on the social provider you were using. This was due to a problem of string encoding in the callback URL. This bug has been fixed in this version."},{"id":"/2021/04/08/whats-new-in-version-2-part-4","metadata":{"permalink":"/blog/2021/04/08/whats-new-in-version-2-part-4","editUrl":"https://github.com/FoalTS/foal/edit/master/docs/blog/2021-04-08-whats-new-in-version-2-part-4.md","source":"@site/blog/2021-04-08-whats-new-in-version-2-part-4.md","title":"What\'s new in version 2 (part 4/4)","description":"Banner","date":"2021-04-08T00:00:00.000Z","formattedDate":"April 8, 2021","tags":[{"label":"release","permalink":"/blog/tags/release"}],"readingTime":5.675,"hasTruncateMarker":true,"authors":[{"name":"Lo\xefc Poullain","title":"Creator of FoalTS. Software engineer.","url":"https://loicpoullain.com","imageURL":"https://avatars1.githubusercontent.com/u/13604533?v=4"}],"frontMatter":{"title":"What\'s new in version 2 (part 4/4)","author":"Lo\xefc Poullain","author_title":"Creator of FoalTS. Software engineer.","author_url":"https://loicpoullain.com","author_image_url":"https://avatars1.githubusercontent.com/u/13604533?v=4","image":"blog/twitter-banners/whats-new-in-version-2-part-4.png","tags":["release"]},"prevItem":{"title":"Version 2.3 release notes","permalink":"/blog/2021/04/22/version-2.3-release-notes"},"nextItem":{"title":"What\'s new in version 2 (part 3/4)","permalink":"/blog/2021/03/11/whats-new-in-version-2-part-3"}},"content":"import Tabs from \'@theme/Tabs\';\\nimport TabItem from \'@theme/TabItem\';\\n\\n![Banner](./assets/whats-new-in-version-2-part-4/banner.png)\\n\\nThis article presents the improvements to the session system in FoalTS version 2.\\n\\nThe new syntax can be used either with cookies or with the `Authorization` header. It adds the following new features:\\n- query all sessions of a given user\\n- query all connected users\\n- force logout of a specific user\\n- flash sessions\\n- session ID regeneration\\n- anonymous and authenticated sessions\\n\\nFoalTS also simplifies stateful CSRF protection so that all it takes is one setting to enable it.\\n\\n\x3c!--truncate--\x3e\\n\\n> This article is the part 4 of the series of articles *What\'s new in version 2.0*. Part 3 can be found [here](./2021-03-11-whats-new-in-version-2-part-3.md).\\n\\n## New Session System\\n\\nThe new authentication system is probably the main new feature of version 2. The old session components have been redesigned so as to serve three purposes:\\n- be easy to use with very little code,\\n- support a large variety of applications and architectures (SPA, Mobile, SSR, API, `Authorization` header, cookies, serverless environment, social auth, etc),\\n- and add missing features impossible to implement in version 1.\\n\\nHere is the way to use it:\\n- First [specify in the configuration](/docs/authentication/session-tokens#choosing-a-session-store) where your sessions should be stored (SQL database, redis, Mongo, etc).\\n- Then decorate any route or controller that need authentication with `@UseSessions`.\\n\\n### Example with the `Authorization` header\\n\\nIn this first example, we\'d like to use the `Authorization` header to handle authentication.\\n\\nWe want to send an email address and password to `/login` and retrieve a token in return to authenticate further requests.\\n\\n```typescript\\nimport { dependency, Context, Get, HttpResponseOK, UserRequired, UseSessions, ValidateBody, HttpResponseUnauthorized, Post } from \'@foal/core\';\\nimport { fetchUser } from \'@foal/typeorm\';\\n\\nimport { User, Product } from \'../entities\';\\n\\n@UseSessions({\\n  user: fetchUser(User)\\n})\\nexport class ApiController {\\n  @dependency\\n  store: Store;\\n\\n  @Get(\'/products\')\\n  @UserRequired()\\n  async readProducts(ctx: Context<User>) {\\n    return new HttpResponseOK(Product.find({ user: ctx.user }));\\n  }\\n\\n  @Post(\'/login\')\\n  @ValidateBody({\\n    additionalProperties: false,\\n    properties: {\\n      email: { type: \'string\', format: \'email\' },\\n      password: { type: \'string\' }\\n    },\\n    required: [ \'email\', \'password\' ],\\n    type: \'object\',\\n  })\\n  async login(ctx: Context) {\\n    const user = await User.findOne({ email: ctx.request.body.email });\\n\\n    if (!user) {\\n      return new HttpResponseUnauthorized();\\n    }\\n\\n    if (!await verifyPassword(ctx.request.body.password, user.password)) {\\n      return new HttpResponseUnauthorized();\\n    }\\n\\n    ctx.session = await createSession(this.store);\\n    ctx.session.setUser(user);\\n\\n    return new HttpResponseOK({\\n      token: ctx.session.getToken()\\n    });\\n  }\\n\\n  @Post(\'/logout\')\\n  async logout(ctx: Context) {\\n    if (ctx.session) {\\n      await ctx.session.destroy();\\n    }\\n\\n    return new HttpResponseOK();\\n  }\\n}\\n```\\n\\n### Example with cookies\\n\\nIn this second example, we will use cookies to manage authentication. Foal will auto-creates a session when none exists.\\n\\n```typescript\\nimport { dependency, Context, Get, HttpResponseOK, UserRequired, UseSessions, ValidateBody, HttpResponseUnauthorized, Post } from \'@foal/core\';\\nimport { fetchUser } from \'@foal/typeorm\';\\n\\nimport { User, Product } from \'../entities\';\\n\\n@UseSessions({\\n  // highlight-next-line\\n  cookie: true,\\n  user: fetchUser(User)\\n})\\nexport class ApiController {\\n  @dependency\\n  store: Store;\\n\\n  @Get(\'/products\')\\n  @UserRequired()\\n  async readProducts(ctx: Context<User>) {\\n    return new HttpResponseOK(Product.find({ user: ctx.user }));\\n  }\\n\\n  @Post(\'/login\')\\n  @ValidateBody({\\n    additionalProperties: false,\\n    properties: {\\n      email: { type: \'string\', format: \'email\' },\\n      password: { type: \'string\' }\\n    },\\n    required: [ \'email\', \'password\' ],\\n    type: \'object\',\\n  })\\n  async login(ctx: Context) {\\n    const user = await User.findOne({ email: ctx.request.body.email });\\n\\n    if (!user) {\\n      return new HttpResponseUnauthorized();\\n    }\\n\\n    if (!await verifyPassword(ctx.request.body.password, user.password)) {\\n      return new HttpResponseUnauthorized();\\n    }\\n\\n    // highlight-next-line\\n    ctx.session.setUser(user);\\n\\n    // highlight-next-line\\n    return new HttpResponseOK();\\n  }\\n\\n  @Post(\'/logout\')\\n  async logout(ctx: Context) {\\n    if (ctx.session) {\\n      await ctx.session.destroy();\\n    }\\n\\n    return new HttpResponseOK();\\n  }\\n}\\n```\\n\\n### New features\\n\\nIn addition to this redesign, version 2 also offers new features.\\n\\n#### Query all sessions of a user (TypeORM only)\\n\\nThis feature allows you to list all sessions associated with a specific user. This can be useful if a user is connected on several devices and you like to audit them.\\n\\n```typescript\\nconst user = { id: 1 };\\nconst ids = await store.getSessionIDsOf(user);\\n```\\n\\n#### Query all connected users (TypeORM only)\\n\\nThis feature lists all users that have at least one session in the database.\\n\\n```typescript\\nconst ids = await store.getAuthenticatedUserIds();\\n```\\n\\n#### Force the disconnection of a user (TypeORM only)\\n\\nIn case you want to remove all sessions associated with a specific user, you can use the `destroyAllSessionsOf` method. This can be useful if you think a session has been corrupted or when you want, for example when a password is changed, to disconnect a user from all other devices to which he/she has previously logged on.\\n\\n```typescript\\nconst user = { id: 1 };\\nawait store.destroyAllSessionsOf(user);\\n```\\n\\n#### Flash sessions\\n\\nFlash content is used when we want to save data (a message for example) only for the next request. A typical use case is when a user enters wrong credentials. The page is refreshed and an error message is displayed.\\n\\nTo use flash content, you only need to add the option `flash` set to `true` in the `set` method.\\n\\n```typescript\\nctx.session.set(\'error\', \'Incorrect email or password\', { flash: true });\\n```\\n\\n#### Regenerate the session ID\\n\\nRegenerating the session ID is a [recommended practice](https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#renew-the-session-id-after-any-privilege-level-change) when changing a user\'s privileges or password. This can now be done with the `regenerateID` method\\n\\n```typescript\\nawait ctx.session.regenerateID();\\n```\\n\\n#### Expired sessions clean up regularly (TypeORM and MongoDB)\\n\\nStarting from version 2, Foal regularly cleanup expired sessions in your database so you don\'t have to do it manually.\\n\\n#### Anonymous sessions and templates\\n\\nIn version 2, `@UseSessions({ cookie: true })` automatically creates a session if none exists. This is particularly useful if you\'re building a shopping website with SSR templates. When the user navigates on the website, he/she can add items to the cart without having to log in the first place. Then, when the user wants to place his/her order, he can log in and the only thing you have to do is this:\\n\\n```typescript\\nctx.session.setUser(user)\\n```\\n\\n## Stateful CSRF protection simplified\\n\\nIn version 1, providing a CSRF protection was quite complex. We needed to manage token generation, handle the CSRF cookie (expiration, etc), use an additional hook, etc.\\n\\nStarting from version 2, the CSRF protection is all managed by `@UseSessions`.\\n\\n\\n<Tabs\\n  groupId=\\"config\\"\\n  defaultValue=\\"yaml\\"\\n  values={[\\n    {label: \'YAML\', value: \'yaml\'},\\n    {label: \'JSON\', value: \'json\'},\\n    {label: \'JS\', value: \'js\'},\\n  ]}\\n>\\n<TabItem value=\\"yaml\\">\\n\\n```yaml\\nsettings:\\n  session:\\n    csrf:\\n      enabled: true\\n```\\n\\n</TabItem>\\n<TabItem value=\\"json\\">\\n\\n```json\\n{\\n  \\"settings\\": {\\n    \\"session\\": {\\n      \\"csrf\\": {\\n        \\"enabled\\": true\\n      }\\n    }\\n  }\\n}\\n```\\n\\n</TabItem>\\n<TabItem value=\\"js\\">\\n\\n```javascript\\nmodule.exports = {\\n  settings: {\\n    session: {\\n      csrf: {\\n        enabled: true\\n      }\\n    }\\n  }\\n}\\n```\\n\\n</TabItem>\\n</Tabs>\\n\\nWhen it is enabled, an additional `XSRF-TOKEN` cookie is sent to the client at the same time as the session cookie. It contains a CSRF token associated with your session.\\n\\nWhen a request is made to the server, the `@UseSessions` hooks expects you to include its value in the `XSRF-TOKEN` header.\\n\\n> If you\'re building a regular web application and want to include the CSRF token in your templates, you can retrieve it with this statement: `ctx.session.get(\'csrfToken\')`."},{"id":"/2021/03/11/whats-new-in-version-2-part-3","metadata":{"permalink":"/blog/2021/03/11/whats-new-in-version-2-part-3","editUrl":"https://github.com/FoalTS/foal/edit/master/docs/blog/2021-03-11-whats-new-in-version-2-part-3.md","source":"@site/blog/2021-03-11-whats-new-in-version-2-part-3.md","title":"What\'s new in version 2 (part 3/4)","description":"Banner","date":"2021-03-11T00:00:00.000Z","formattedDate":"March 11, 2021","tags":[{"label":"release","permalink":"/blog/tags/release"}],"readingTime":3.665,"hasTruncateMarker":true,"authors":[{"name":"Lo\xefc Poullain","title":"Creator of FoalTS. Software engineer.","url":"https://loicpoullain.com","imageURL":"https://avatars1.githubusercontent.com/u/13604533?v=4"}],"frontMatter":{"title":"What\'s new in version 2 (part 3/4)","author":"Lo\xefc Poullain","author_title":"Creator of FoalTS. Software engineer.","author_url":"https://loicpoullain.com","author_image_url":"https://avatars1.githubusercontent.com/u/13604533?v=4","image":"blog/twitter-banners/whats-new-in-version-2-part-3.png","tags":["release"]},"prevItem":{"title":"What\'s new in version 2 (part 4/4)","permalink":"/blog/2021/04/08/whats-new-in-version-2-part-4"},"nextItem":{"title":"What\'s new in version 2 (part 2/4)","permalink":"/blog/2021/03/02/whats-new-in-version-2-part-2"}},"content":"import Tabs from \'@theme/Tabs\';\\nimport TabItem from \'@theme/TabItem\';\\n\\n![Banner](./assets/whats-new-in-version-2-part-3/banner.png)\\n\\nThis article presents some improvements introduced in version 2 of FoalTS:\\n- the JWT utilities to manage secrets and RSA keys,\\n- the JWT utilities to manage cookies,\\n- and the new stateless CSRF protection.\\n\\n\x3c!--truncate--\x3e\\n\\n> This article is the part 3 of the series of articles *What\'s new in version 2.0*. Part 2 can be found [here](./2021-03-02-whats-new-in-version-2-part-2.md).\\n\\n## New JWT utilities\\n\\n### Accessing config secrets and public/private keys\\n\\nStarting from version 2, there is a standardized way to provide and retrieve JWT secrets and RSA public/private keys: the functions `getSecretOrPublicKey` and `getSecretOrPrivateKey`.\\n\\n#### Using secrets\\n\\nIn this example, a base64-encoded secret is provided in the configuration.\\n\\n*.env*\\n```\\nJWT_SECRET=\\"Ak0WcVcGuOoFuZ4oqF1tgqbW6dIAeSacIN6h7qEyJM8=\\"\\n```\\n\\n\\n<Tabs\\n  defaultValue=\\"yaml\\"\\n  values={[\\n    {label: \'YAML\', value: \'yaml\'},\\n    {label: \'JSON\', value: \'json\'},\\n    {label: \'JS\', value: \'js\'},\\n  ]}\\n>\\n<TabItem value=\\"yaml\\">\\n\\n```yaml\\nsettings:\\n  jwt:\\n    secret: \\"env(JWT_SECRET)\\"\\n    secretEncoding: base64\\n```\\n\\n</TabItem>\\n<TabItem value=\\"json\\">\\n\\n```json\\n{\\n  \\"settings\\": {\\n    \\"jwt\\": {\\n      \\"secret\\": \\"env(JWT_SECRET)\\",\\n      \\"secretEncoding\\": \\"base64\\"\\n    }\\n  }\\n}\\n```\\n\\n</TabItem>\\n<TabItem value=\\"js\\">\\n\\n```javascript\\nmodule.exports = {\\n  settings: {\\n    jwt: {\\n      secret: \\"env(JWT_SECRET)\\",\\n      secretEncoding: \\"base64\\"\\n    }\\n  }\\n}\\n```\\n\\n</TabItem>\\n</Tabs>\\n\\nBoth `getSecretOrPublicKey` and `getSecretOrPrivateKey` functions will return the secret.\\n\\nIn the case a `secretEncoding` value is provided, the functions return a buffer which is the secret decoded with the provided encoding.\\n\\n#### Using public and private keys\\n\\n```javascript\\nconst { Env } = require(\'@foal/core\');\\nconst { readFileSync } = require(\'fs\');\\n\\nmodule.exports = {\\n  settings: {\\n    jwt: {\\n      privateKey: Env.get(\'RSA_PRIVATE_KEY\') || readFileSync(\'./id_rsa\', \'utf8\'),\\n      publicKey: Env.get(\'RSA_PUBLIC_KEY\') || readFileSync(\'./id_rsa.pub\', \'utf8\'),\\n    }\\n  }\\n}\\n```\\n\\nIn this case, `getSecretOrPublicKey` and `getSecretOrPrivateKey` return the keys from the environment variables `RSA_PUBLIC_KEY` and `RSA_PRIVATE_KEY` if they are defined or from the files `id_rsa` and `id_rsa.pub` otherwise.\\n\\n### Managing cookies\\n\\nIn version 2, Foal provides two dedicated functions to manage JWT with cookies. Using these functions instead of manually setting the cookie has three benefits:\\n- they include a CSRF protection (see section below),\\n- the function `setAuthCookie` automatically sets the cookie expiration based on the token expiration,\\n- and cookie options can be provided through the configuration.\\n\\n**Example**\\n\\n*api.controller.ts*\\n```typescript\\nimport { JWTRequired } from \'@foal/jwt\';\\n\\n@JWTRequired({ cookie: true })\\nexport class ApiController {\\n  // ...\\n}\\n```\\n\\n*auth.controller.ts*\\n```typescript\\nexport class AuthController {\\n\\n  @Post(\'/login\')\\n  async login(ctx: Context) {\\n    // ...\\n\\n    const response = new HttpResponseNoContent();\\n    // Do not forget the \\"await\\" keyword.\\n    await setAuthCookie(response, token);\\n    return response;\\n  }\\n\\n  @Post(\'/logout\')\\n  logout(ctx: Context) {\\n    // ...\\n\\n    const response = new HttpResponseNoContent();\\n    removeAuthCookie(response);\\n    return response;\\n  }\\n\\n}\\n```\\n\\n**Cookie options**\\n\\n<Tabs\\n  defaultValue=\\"yaml\\"\\n  values={[\\n    {label: \'YAML\', value: \'yaml\'},\\n    {label: \'JSON\', value: \'json\'},\\n    {label: \'JS\', value: \'js\'},\\n  ]}\\n>\\n<TabItem value=\\"yaml\\">\\n\\n```yaml\\nsettings:\\n  jwt:\\n    cookie:\\n      name: mycookiename # Default: auth\\n      domain: example.com\\n      httpOnly: true # Warning: unlike session tokens, the httpOnly directive has no default value.\\n      path: /foo # Default: /\\n      sameSite: strict # Default: lax if settings.jwt.csrf.enabled is true.\\n      secure: true\\n```\\n\\n</TabItem>\\n<TabItem value=\\"json\\">\\n\\n```json\\n{\\n  \\"settings\\": {\\n    \\"jwt\\": {\\n      \\"cookie\\": {\\n        \\"name\\": \\"mycookiename\\",\\n        \\"domain\\": \\"example.com\\",\\n        \\"httpOnly\\": true,\\n        \\"path\\": \\"/foo\\",\\n        \\"sameSite\\": \\"strict\\",\\n        \\"secure\\": true\\n      }\\n    }\\n  }\\n}\\n```\\n\\n</TabItem>\\n<TabItem value=\\"js\\">\\n\\n```javascript\\nmodule.exports = {\\n  settings: {\\n    jwt: {\\n      cookie: {\\n        name: \\"mycookiename\\",\\n        domain: \\"example.com\\",\\n        httpOnly: true,\\n        path: \\"/foo\\",\\n        sameSite: \\"strict\\",\\n        secure: true\\n      }\\n    }\\n  }\\n}\\n```\\n\\n</TabItem>\\n</Tabs>\\n\\n## Stateless CSRF protection simplified\\n\\nIn version 1, providing a CSRF protection was quite complex. We needed to provide another secret, generate a stateless token, manage the CSRF cookie (expiration, etc), use an additional hook, etc.\\n\\nStarting from version 2, the CSRF protection is all managed by `@JWTRequired`, `setAuthCookie` and `removeAuthCookie`.\\n\\nThe only thing that you have to do it to enable it through the configuration:\\n\\n<Tabs\\n  defaultValue=\\"yaml\\"\\n  values={[\\n    {label: \'YAML\', value: \'yaml\'},\\n    {label: \'JSON\', value: \'json\'},\\n    {label: \'JS\', value: \'js\'},\\n  ]}\\n>\\n<TabItem value=\\"yaml\\">\\n\\n```yaml\\nsettings:\\n  jwt:\\n    csrf:\\n      enabled: true\\n```\\n\\n</TabItem>\\n<TabItem value=\\"json\\">\\n\\n```json\\n{\\n  \\"settings\\": {\\n    \\"jwt\\": {\\n      \\"csrf\\": {\\n        \\"enabled\\": true\\n      }\\n    }\\n  }\\n}\\n```\\n\\n</TabItem>\\n<TabItem value=\\"js\\">\\n\\n```javascript\\nmodule.exports = {\\n  settings: {\\n    jwt: {\\n      csrf: {\\n        enabled: true\\n      }\\n    }\\n  }\\n}\\n```\\n\\n</TabItem>\\n</Tabs>\\n\\nWhen it is enabled, an additional `XSRF-TOKEN` cookie is sent to the client at the same time as the auth cookie (containing your JWT). It contains a stateless CSRF token which is signed and has the same expiration date as your JWT.\\n\\nWhen a request is made to the server, the `@JWTRequired` hooks expects you to include its value in the `XSRF-TOKEN` header."},{"id":"/2021/03/02/whats-new-in-version-2-part-2","metadata":{"permalink":"/blog/2021/03/02/whats-new-in-version-2-part-2","editUrl":"https://github.com/FoalTS/foal/edit/master/docs/blog/2021-03-02-whats-new-in-version-2-part-2.md","source":"@site/blog/2021-03-02-whats-new-in-version-2-part-2.md","title":"What\'s new in version 2 (part 2/4)","description":"Banner","date":"2021-03-02T00:00:00.000Z","formattedDate":"March 2, 2021","tags":[{"label":"release","permalink":"/blog/tags/release"}],"readingTime":5.055,"hasTruncateMarker":true,"authors":[{"name":"Lo\xefc Poullain","title":"Creator of FoalTS. Software engineer.","url":"https://loicpoullain.com","imageURL":"https://avatars1.githubusercontent.com/u/13604533?v=4"}],"frontMatter":{"title":"What\'s new in version 2 (part 2/4)","author":"Lo\xefc Poullain","author_title":"Creator of FoalTS. Software engineer.","author_url":"https://loicpoullain.com","author_image_url":"https://avatars1.githubusercontent.com/u/13604533?v=4","image":"blog/twitter-banners/whats-new-in-version-2-part-2.png","tags":["release"]},"prevItem":{"title":"What\'s new in version 2 (part 3/4)","permalink":"/blog/2021/03/11/whats-new-in-version-2-part-3"},"nextItem":{"title":"Version 2.2 release notes","permalink":"/blog/2021/02/25/version-2.2-release-notes"}},"content":"import Tabs from \'@theme/Tabs\';\\nimport TabItem from \'@theme/TabItem\';\\n\\n![Banner](./assets/whats-new-in-version-2-part-2/banner.png)\\n\\nThis article presents some improvements introduced in version 2 of FoalTS:\\n- Configuration and type safety\\n- Configuration and `.env` files (`.env`, `.env.test`, etc)\\n- Available configuration file formats (JSON, YAML and JS)\\n- OpenAPI schemas and validation\\n\\n\x3c!--truncate--\x3e\\n\\n> This article is the part 2 of the series of articles *What\'s new in version 2.0*. Part 1 can be found [here](./2021-02-17-whats-new-in-version-2-part-1.md).\\n\\n## New Config System\\n\\n### Type safety\\n\\nStarting from version 2, a great attention is paid to type safety in the configuration. The `Config.get` method allows you specify which type you expect.\\n\\n```typescript\\nconst timeout = Config.get(\'custom.timeout\', \'number\');\\n// The TypeScript type returned by `get` is number|undefined.\\n```\\n\\nIn this example, when calling the `get` method, the framework will look at the configuration files to retrieve the desired value.\\n- If the value is not defined, the function returns `undefined`.\\n- If the value is a number, the function returns it.\\n- If the value is a string that can be converted to a number (ex: `\\"1\\"`), the function converts and returns it.\\n- If the value is not a number and cannot be converted, then the function throws a `ConfigTypeError` with the details. Note that the config value is not logged to avoid leaking sensitive information.\\n\\nIf you wish to make the config parameter mandatory, you can do it by using the `getOrThrow` method. If no value is found, then a `ConfigNotFound` error is thrown.\\n\\n```typescript\\nconst timeout = Config.getOrThrow(\'custom.timeout\', \'number\');\\n// The TypeScript type returned by `get` is number.\\n```\\n\\nSupported types are `string`, `number`, `boolean`, `boolean|string`, `number|string` and `any`.\\n\\n### Multiple `.env` files support\\n\\nVersion 2 allows you to use different `.env` files depending on your environment.\\n\\nIf you configuration is as follows and `NODE_ENV` equals `production`, then the framework will look at `.env.production` to retrieve the value and if it does not exist (the file or the value), Foal will look at `.env`.\\n\\n<Tabs\\n  defaultValue=\\"yaml\\"\\n  values={[\\n    {label: \'YAML\', value: \'yaml\'},\\n    {label: \'JSON\', value: \'json\'},\\n    {label: \'JS\', value: \'js\'},\\n  ]}\\n>\\n<TabItem value=\\"yaml\\">\\n\\n```yaml\\nsettings:\\n  jwt:\\n    secret: env(SETTINGS_JWT_SECRET)\\n```\\n\\n</TabItem>\\n<TabItem value=\\"json\\">\\n\\n```json\\n{\\n  \\"settings\\": {\\n    \\"jwt\\": {\\n      \\"secret\\": \\"env(SETTINGS_JWT_SECRET)\\",\\n    }\\n  }\\n}\\n```\\n\\n</TabItem>\\n<TabItem value=\\"js\\">\\n\\n```javascript\\nconst { Env } = require(\'@foal/core\');\\n\\nmodule.exports = {\\n  settings: {\\n    jwt: {\\n      secret: Env.get(\'SETTINGS_JWT_SECRET\')\\n    }\\n  }\\n}\\n```\\n\\n</TabItem>\\n</Tabs>\\n\\n\\n### Three config formats (JS, JSON, YAML)\\n\\nJSON and YAML were already supported in version 1. Starting from version 2, JS is also allowed.\\n\\n<Tabs\\n  defaultValue=\\"yaml\\"\\n  values={[\\n    {label: \'YAML\', value: \'yaml\'},\\n    {label: \'JSON\', value: \'json\'},\\n    {label: \'JS\', value: \'js\'},\\n  ]}\\n>\\n<TabItem value=\\"yaml\\">\\n\\n```yaml\\nsettings:\\n  session:\\n    store: \\"@foal/typeorm\\"\\n```\\n\\n</TabItem>\\n<TabItem value=\\"json\\">\\n\\n```json\\n{\\n  \\"settings\\": {\\n    \\"session\\": {\\n      \\"store\\": \\"@foal/typeorm\\"\\n    }\\n  }\\n}\\n```\\n\\n</TabItem>\\n<TabItem value=\\"js\\">\\n\\n```javascript\\nmodule.exports = {\\n  settings: {\\n    session: {\\n      store: \\"@foal/typeorm\\"\\n    }\\n  }\\n}\\n```\\n\\n</TabItem>\\n</Tabs>\\n\\n### More Liberty in Naming Environment Variables\\n\\nIn version 1, the names of the environment variables were depending on the names of the configuration keys. For example, when using `Config.get(\'settings.mongodbUri\')`, Foal was looking at `SETTINGS_MONGODB_URI`.\\n\\nStarting from version 2, it is your responsability to choose the environement variable that you want to use (if you use one). This gives more flexibility especially when a Cloud provider defines its own variable names.\\n\\n<Tabs\\n  defaultValue=\\"yaml\\"\\n  values={[\\n    {label: \'YAML\', value: \'yaml\'},\\n    {label: \'JSON\', value: \'json\'},\\n    {label: \'JS\', value: \'js\'},\\n  ]}\\n>\\n<TabItem value=\\"yaml\\">\\n\\n```yaml\\nsettings:\\n  mongodbUri: env(MONGODB_URI)\\n```\\n\\n</TabItem>\\n<TabItem value=\\"json\\">\\n\\n```json\\n{\\n  \\"settings\\": {\\n    \\"mongodbUri\\": \\"env(MONGODB_URI)\\"\\n  }\\n}\\n```\\n\\n</TabItem>\\n<TabItem value=\\"js\\">\\n\\n```javascript\\nconst { Env } = require(\'@foal/core\');\\n\\nmodule.exports = {\\n  settings: {\\n    mongodbUri: Env.get(\'MONGODB_URI\')\\n  }\\n}\\n```\\n\\n</TabItem>\\n</Tabs>\\n\\n## OpenAPI Schemas & Validation\\n\\nStarting from version 1, Foal has allowed you to generate a complete [Swagger](https://swagger.io/tools/swagger-ui/) interface by reading your code. If your application has validation and auth hooks for example, Foal will use them to generate the proper interface.\\n\\nThis is a handy if you want to quickly test and document your API. Then you can customize it in your own way if you wish and complete and override the OpenAPI spec generated by the framework.\\n\\nIn version 2, support of Swagger has been increased to allow you to define OpenAPI schemas and re-use them for validation.\\n\\nHere is an example.\\n\\n*product.controller.ts*\\n```typescript\\nimport { ApiDefineSchema, ApiResponse, Context, Get, HttpResponseNotFound, HttpResponseOK, Post, ValidateBody, ValidatePathParam } from \'@foal/core\';\\nimport { Product } from \'../../entities\';\\n\\n// First we define the OpenAPI schema \\"Product\\".\\n@ApiDefineSchema(\'Product\', {\\n  type: \'object\',\\n  properties: {\\n    id: { type: \'number\' },\\n    name: { type: \'string\' }\\n  },\\n  additionalProperties: false,\\n  required: [\'id\', \'name\'],\\n})\\nexport class ProductController {\\n\\n  @Post(\'/\')\\n  // We use the schema \\"Product\\" here to validate the request body.\\n  @ValidateBody({ $ref: \'#/components/schemas/Product\' })\\n  async createProduct(ctx: Context) {\\n    const result = await Product.insert(ctx.request.body);\\n    return new HttpResponseOK(result.identifiers[0]);\\n  }\\n\\n  @Get(\'/:productId\')\\n  // We use the schema \\"Product\\" here to validate the URL parameter.\\n  @ValidatePathParam(\'productId\', { $ref: \'#/components/schemas/Product/properties/id\' })\\n  // We give some extra information on the format of the response.\\n  @ApiResponse(200, {\\n    description: \'Product found in the database\',\\n    content: {\\n      \'application/json\': { schema: { $ref: \'#/components/schemas/Product\' } }\\n    }\\n  })\\n  async readProduct(ctx: Context, { productId }) {\\n    const product = await Product.findOne({ id: productId });\\n\\n    if (!product) {\\n      return new HttpResponseNotFound();\\n    }\\n\\n    return new HttpResponseOK(product);\\n  }\\n\\n}\\n\\n```\\n\\n*api.controller.ts*\\n```typescript\\nimport { ApiInfo, ApiServer, Context, controller, Get, HttpResponseOK } from \'@foal/core\';\\nimport { ProductController } from \'./api\';\\n\\n// We provide the \\"info\\" metadata to describe the API.\\n@ApiInfo({\\n  title: \'My API\',\\n  version: \'0.1.0\'\\n})\\n@ApiServer({\\n  url: \'/api\'\\n})\\nexport class ApiController {\\n  subControllers = [\\n    controller(\'/products\', ProductController)\\n  ];\\n  \\n}\\n```\\n\\n*openapi.controller.ts*\\n```typescript\\nimport { SwaggerController } from \'@foal/swagger\';\\nimport { ApiController } from \'./api.controller\';\\n\\n// This controller generates the Swagger interface.\\nexport class OpenapiController extends SwaggerController {\\n\\n  options = {\\n    controllerClass: ApiController,\\n  }\\n\\n}\\n\\n```\\n\\n*app.controller.ts*\\n```typescript\\nimport { controller, IAppController } from \'@foal/core\';\\nimport { createConnection } from \'typeorm\';\\n\\nimport { ApiController, OpenapiController } from \'./controllers\';\\n\\nexport class AppController implements IAppController {\\n  subControllers = [\\n    controller(\'/api\', ApiController),\\n    controller(\'/swagger\', OpenapiController),\\n  ];\\n\\n  async init() {\\n    await createConnection();\\n  }\\n}\\n\\n```\\n\\n![Swagger 1](./assets/whats-new-in-version-2-part-2/swagger.png)\\n\\n![Swagger 2](./assets/whats-new-in-version-2-part-2/swagger2.png)\\n\\n![Swagger 3](./assets/whats-new-in-version-2-part-2/swagger3.png)"},{"id":"/2021/02/25/version-2.2-release-notes","metadata":{"permalink":"/blog/2021/02/25/version-2.2-release-notes","editUrl":"https://github.com/FoalTS/foal/edit/master/docs/blog/2021-02-25-version-2.2-release-notes.md","source":"@site/blog/2021-02-25-version-2.2-release-notes.md","title":"Version 2.2 release notes","description":"Banner","date":"2021-02-25T00:00:00.000Z","formattedDate":"February 25, 2021","tags":[{"label":"release","permalink":"/blog/tags/release"}],"readingTime":1.955,"hasTruncateMarker":true,"authors":[{"name":"Lo\xefc Poullain","title":"Creator of FoalTS. Software engineer.","url":"https://loicpoullain.com","imageURL":"https://avatars1.githubusercontent.com/u/13604533?v=4"}],"frontMatter":{"title":"Version 2.2 release notes","author":"Lo\xefc Poullain","author_title":"Creator of FoalTS. Software engineer.","author_url":"https://loicpoullain.com","author_image_url":"https://avatars1.githubusercontent.com/u/13604533?v=4","image":"blog/twitter-banners/version-2.2-release-notes.png","tags":["release"]},"prevItem":{"title":"What\'s new in version 2 (part 2/4)","permalink":"/blog/2021/03/02/whats-new-in-version-2-part-2"},"nextItem":{"title":"What\'s new in version 2 (part 1/4)","permalink":"/blog/2021/02/17/whats-new-in-version-2-part-1"}},"content":"![Banner](./assets/version-2.2-is-here/banner.png)\\n\\nVersion 2.2 of Foal has been released! Here are the improvements that it brings.\\n\\n\x3c!--truncate--\x3e\\n\\n## New Look of the `createapp` Command\\n\\nThe output of the `createapp` command has been prettified to be more \\"welcoming\\".\\n\\n![New createapp look](./assets/version-2.2-is-here/new-create-app.png)\\n\\n## Authentication Improvement for Single-Page Applications (SPA)\\n\\nWhen building a SPA with cookie-based authentication, it can sometimes be difficult to know if the user is logged in or to obtain certain information about the user (`isAdmin`, etc).\\n\\nSince the authentication token is stored in a cookie with the `httpOnly` directive set to `true` (to mitigate XSS attacks), the front-end application has no way of knowing if a user is logged in, except by making an additional request to the server.\\n\\nTo solve this problem, version 2.2 adds a new option called `userCookie` that allows you to set an additional cookie that the frontend can read with the content you choose. This cookie is synchronized with the session and is refreshed at each request and destroyed when the session expires or when the user logs out.\\n\\nIn the following example, the `user` cookie is empty if no user is logged in or contains certain information about him/her otherwise. This is particularly useful if you need to display UI elements based on user characteristics.\\n\\n*Server-side code*\\n\\n```typescript\\nfunction userToJSON(user: User|undefined) {\\n  if (!user) {\\n    return \'null\';\\n  }\\n\\n  return JSON.stringify({\\n    email: user.email,\\n    isAdmin: user.isAdmin\\n  });\\n}\\n\\n@UseSessions({\\n  cookie: true,\\n  user: fetchUser(User),\\n  userCookie: (ctx, services) => userToJSON(ctx.user)\\n})\\nexport class ApiController {\\n\\n  @Get(\'/products\')\\n  @UserRequired()\\n  async readProducts(ctx: Context) {\\n    const products = await Product.find({ owner: ctx.user });\\n    return new HttpResponseOK(products);\\n  }\\n\\n}\\n```\\n\\n*Cookies*\\n\\n![User cookie](./assets/version-2.2-is-here/user-cookie.png)\\n\\n*Client-side code*\\n\\n```javascript\\nconst user = JSON.parse(decodeURIComponent(/* cookie value */));\\n```\\n\\n## Support of Nested Routes in `foal generate|g rest-api <name>`\\n\\nLike the command `g controller`, `g rest-api` now supports nested routes.\\n\\nLet\'s say we have the following file structure:\\n\\n```\\nsrc/\\n \'- app/\\n  |- controllers/\\n  | |- api.controller.ts\\n  | \'- index.ts\\n  \'- entities/\\n    |- user.entity.ts\\n    \'- index.ts\\n```\\n\\nRunning these commands will add and register the following files:\\n\\n```\\nfoal generate rest-api api/product --auth --register\\nfoal generate rest-api api/order --auth --register\\n```\\n\\n```\\nsrc/\\n \'- app/\\n  |- controllers/\\n  | |- api/\\n  | | |- product.controller.ts\\n  | | |- order.controller.ts\\n  | | \'- index.ts\\n  | |- api.controller.ts\\n  | \'- index.ts\\n  \'- entities/\\n    |- product.entity.ts\\n    |- order.entity.ts\\n    |- user.entity.ts\\n    \'- index.ts\\n```"},{"id":"/2021/02/17/whats-new-in-version-2-part-1","metadata":{"permalink":"/blog/2021/02/17/whats-new-in-version-2-part-1","editUrl":"https://github.com/FoalTS/foal/edit/master/docs/blog/2021-02-17-whats-new-in-version-2-part-1.md","source":"@site/blog/2021-02-17-whats-new-in-version-2-part-1.md","title":"What\'s new in version 2 (part 1/4)","description":"Banner","date":"2021-02-17T00:00:00.000Z","formattedDate":"February 17, 2021","tags":[{"label":"release","permalink":"/blog/tags/release"}],"readingTime":4.69,"hasTruncateMarker":true,"authors":[{"name":"Lo\xefc Poullain","title":"Creator of FoalTS. Software engineer.","url":"https://loicpoullain.com","imageURL":"https://avatars1.githubusercontent.com/u/13604533?v=4"}],"frontMatter":{"title":"What\'s new in version 2 (part 1/4)","author":"Lo\xefc Poullain","author_title":"Creator of FoalTS. Software engineer.","author_url":"https://loicpoullain.com","author_image_url":"https://avatars1.githubusercontent.com/u/13604533?v=4","image":"blog/twitter-banners/whats-new-in-version-2-part-1.png","tags":["release"]},"prevItem":{"title":"Version 2.2 release notes","permalink":"/blog/2021/02/25/version-2.2-release-notes"},"nextItem":{"title":"Version 2.1 release notes","permalink":"/blog/2021/02/03/version-2.1-release-notes"}},"content":"import Tabs from \'@theme/Tabs\';\\nimport TabItem from \'@theme/TabItem\';\\n\\n![Banner](./assets/whats-new-in-version-2-part-1/banner.png)\\n\\nThis article presents some improvements introduced in version 2 of FoalTS:\\n- the new CLI commands\\n- the service and application initialization\\n- the `AppController` interface\\n- custom error-handling & hook post functions\\n- accessing file metadata during uploads\\n\\n\x3c!--truncate--\x3e\\n\\n> This article is the part 1 of the series of articles *What\'s new in version 2.0*. Part 2 can be found [here](./2021-03-02-whats-new-in-version-2-part-2.md).\\n\\n## New CLI commands\\n\\nIn version 1, there were many commands to use, and this, in a specific order. Running and generating migrations from model changes required four commands and building the whole application needed three.\\n\\nIn version 2, the number of CLI commands has been reduced and they have been simplified so that one action matches one command.\\n\\n### Generating migrations\\n\\nThis command generates migrations by comparing the current database schema and the latest changes in your models.\\n\\n<Tabs\\n  defaultValue=\\"v2\\"\\n  values={[\\n    {label: \'Version 2\', value: \'v2\'},\\n    {label: \'Version 1\', value: \'v1\'},\\n  ]}\\n>\\n<TabItem value=\\"v2\\">\\n\\n```bash\\nnpm run makemigrations\\n```\\n\\n</TabItem>\\n<TabItem value=\\"v1\\">\\n\\n```bash\\nnpm run build:app\\nnpm run migration:generate -- -n my_migration\\n```\\n\\n</TabItem>\\n</Tabs>\\n\\n\\n### Running migrations\\n\\nThis command builds and runs all migrations.\\n\\n<Tabs\\n  defaultValue=\\"v2\\"\\n  values={[\\n    {label: \'Version 2\', value: \'v2\'},\\n    {label: \'Version 1\', value: \'v1\'},\\n  ]}\\n>\\n<TabItem value=\\"v2\\">\\n\\n```bash\\nnpm run migrations\\n```\\n\\n</TabItem>\\n<TabItem value=\\"v1\\">\\n\\n```bash\\nnpm run build:migrations\\nnpm run migration:run\\n```\\n\\n</TabItem>\\n</Tabs>\\n\\n### Build and run scripts in watch mode (development)\\n\\nIf you want to re-build your scripts each time a file is change, you can execute `npm run develop` in a separate terminal.\\n\\n<Tabs\\n  defaultValue=\\"v2\\"\\n  values={[\\n    {label: \'Version 2\', value: \'v2\'},\\n    {label: \'Version 1\', value: \'v1\'},\\n  ]}\\n>\\n<TabItem value=\\"v2\\">\\n\\n```bash\\n# In one terminal:\\nnpm run develop\\n\\n# In another terminal:\\nfoal run my-script\\n```\\n\\n</TabItem>\\n<TabItem value=\\"v1\\">\\n\\n```bash\\n# In one terminal:\\nnpm run build:scripts:w\\n\\n# In another terminal:\\nfoal run my-script\\n```\\n\\n</TabItem>\\n</Tabs>\\n\\n### Revert one migration\\n\\nThis command reverts the last executed migration.\\n\\n<Tabs\\n  defaultValue=\\"v2\\"\\n  values={[\\n    {label: \'Version 2\', value: \'v2\'},\\n    {label: \'Version 1\', value: \'v1\'},\\n  ]}\\n>\\n<TabItem value=\\"v2\\">\\n\\n```bash\\nnpm run revertmigration\\n```\\n\\n</TabItem>\\n<TabItem value=\\"v1\\">\\n\\n```bash\\nnpm run migration:revert\\n```\\n\\n</TabItem>\\n</Tabs>\\n\\n### Build migrations, scripts and the app\\n\\nThis command builds the application, the scripts and the migrations. Unit and e2e tests are not included.\\n\\n<Tabs\\n  defaultValue=\\"v2\\"\\n  values={[\\n    {label: \'Version 2\', value: \'v2\'},\\n    {label: \'Version 1\', value: \'v1\'},\\n  ]}\\n>\\n<TabItem value=\\"v2\\">\\n\\n```bash\\nnpm run build\\n```\\n\\n</TabItem>\\n<TabItem value=\\"v1\\">\\n\\n```bash\\nnpm run build:app\\nnpm run build:scripts\\nnpm run build:migrations\\n```\\n\\n</TabItem>\\n</Tabs>\\n\\n## Service and Application Initialization\\n\\nIn version 1, it was possible to add an `init` method to the `AppController` class and `boot` methods in the services to initialize the application. These features needed special options in order to be activated.\\n\\nStarting from version 2, they are enabled by default.\\n\\n```typescript\\nexport class AppController {\\n  // ...\\n\\n  init() {\\n    // Execute some code.\\n  }\\n}\\n```\\n\\n```typescript\\nexport class MyService {\\n  // ...\\n\\n  boot() {\\n    // Execute some code.\\n  }\\n}\\n```\\n\\n## The `AppController` interface\\n\\nThis optional interface allows you to check that the `subControllers` property has the correct type as well as the `init` and `handleError` methods.\\n\\n```typescript\\nexport class AppController implements IAppController {\\n  subControllers = [\\n    controller(\'/api\', ApiController)\\n  ];\\n\\n  init() {\\n    // ...\\n  }\\n\\n  handleError(error, ctx) {\\n    // ...\\n  }\\n}\\n```\\n\\n## Custom Error-Handling & Hook Post Functions\\n\\nIn version 1, when an error was thrown or rejected in a hook or a controller method, the remaining hook post functions were not executed.\\n\\nStarting from version 2, the error is directly converted to an `HttpResponseInternalServerError` and passed to the next post hook functions.\\n\\nThis can be useful in case we want to use exceptions as HTTP responses without breaking the hook post functions.\\n\\n*Example*\\n```typescript\\nclass PermissionError extends Error {}\\n\\nclass UserService {\\n\\n  async listUsers(applicant: User): Promise<User[]> {\\n    if (!ctx.user.isAdmin) {\\n      // Use exception here.\\n      throw new PermissionError();\\n    }\\n\\n    return User.find({ org: user.org });\\n  }\\n\\n}\\n\\n// This hook measures the execution time and the controller method and hooks.\\n@Hook(() => {\\n  const time = process.hrtime();\\n\\n  // This post function will still be executed\\n  // even if an error is thrown in listUsers.\\n  return () => {\\n    const seconds = process.hrtime(time)[0];\\n    console.log(`Executed in ${seconds} seconds`);\\n  };\\n})\\nexport class AppController {\\n\\n  @dependency\\n  users: UserService;\\n\\n  @Get(\'/users\')\\n  @UseSessions({ user: fetchUser(User) })\\n  @UserRequired()\\n  listUsers(ctx: Context<User>) {\\n    return new HttpResponseOK(\\n      await users.listUsers(ctx.user)\\n    );\\n  }\\n\\n  handleError(error: Error, ctx: Context) {\\n    // Converts the exception to an HTTP response.\\n    // The error can have been thrown in a service used by the controller.\\n    if (error instanceof PermissionError) {\\n      return new HttpResponseForbidden();\\n    }\\n\\n    // Returns an HttpResponseInternalServerError.\\n    return renderError(error, response);\\n  }\\n}\\n```\\n\\n## Accessing File Metadata during Uploads\\n\\nWhen using the `@ValidateMultipartFormDataBody` hook to handle file upload, it is now possible to access the file metadata.\\n\\n*Example*\\n```typescript\\nexport class UserController {\\n\\n  @Post(\'/profile\')\\n  @ValidateMultipartFormDataBody({\\n    files: {\\n      profile: { required: true },\\n    }\\n  })\\n  uploadProfilePhoto(ctx: Context) {\\n    const file = ctx.request.body.files.profile;\\n    // file.mimeType, file.buffer\\n  }\\n\\n}\\n```\\n\\n| Property name | Type | Description |\\n| --- | --- | --- |\\n| `encoding` | `string` | Encoding type of the file |\\n| `filename` | `string\\\\|undefined` | Name of the file on the user\'s computer |\\n| `mimeType` | `string` | Mime type of the file |\\n| `path` | `string` | Path where the file has been saved. If the `saveTo` option was not provided, the value is an empty string. |\\n| `buffer` | `Buffer` | Buffer containing the entire file. If the `saveTo` option was provided, the value is an empty buffer. |"},{"id":"/2021/02/03/version-2.1-release-notes","metadata":{"permalink":"/blog/2021/02/03/version-2.1-release-notes","editUrl":"https://github.com/FoalTS/foal/edit/master/docs/blog/2021-02-03-version-2.1-release-notes.md","source":"@site/blog/2021-02-03-version-2.1-release-notes.md","title":"Version 2.1 release notes","description":"Banner","date":"2021-02-03T00:00:00.000Z","formattedDate":"February 3, 2021","tags":[{"label":"release","permalink":"/blog/tags/release"}],"readingTime":1.495,"hasTruncateMarker":true,"authors":[{"name":"Lo\xefc Poullain","title":"Creator of FoalTS. Software engineer.","url":"https://loicpoullain.com","imageURL":"https://avatars1.githubusercontent.com/u/13604533?v=4"}],"frontMatter":{"title":"Version 2.1 release notes","author":"Lo\xefc Poullain","author_title":"Creator of FoalTS. Software engineer.","author_url":"https://loicpoullain.com","author_image_url":"https://avatars1.githubusercontent.com/u/13604533?v=4","tags":["release"]},"prevItem":{"title":"What\'s new in version 2 (part 1/4)","permalink":"/blog/2021/02/17/whats-new-in-version-2-part-1"}},"content":"![Banner](./assets/version-2.1-is-here/banner.png)\\n\\nVersion 2.1 has been released! Here are the improvements that it brings.\\n\\n\x3c!--truncate--\x3e\\n\\n## New Error Page Design\\n\\nWhen an error is thrown or rejected in development, the server returns an error page with some debugging details. The UI of this page has been improved and it now provides more information.\\n\\n![Error page](./assets/version-2.1-is-here/error-page.png)\\n\\n## New Welcome Page\\n\\nWhen creating a new project, the generated welcome page is also different.\\n\\n![Welcome page](./assets/version-2.1-is-here/welcome-page.png)\\n\\n## CLI exits with code 1 when a command fails\\n\\nThis small improvement is useful when we want to stop a CI pipeline when one of its commands fails.\\n\\n## New `@All` decorator\\n\\nThis decorator handles all requests regardless of the HTTP verb (GET, POST, etc.).\\n\\nIt can be used for example to create a `not found` handler.\\n\\n```typescript\\nimport { All, HttpResponseNotFound } from \'@foal/core\';\\n\\nclass AppController {\\n  subControllers = [ ViewController ];\\n\\n  @All(\'*\')\\n  notFound() {\\n    return new HttpResponseNotFound(\'The route you are looking for does not exist.\');\\n  }\\n}\\n```\\n\\n## New CSRF option in `@UseSessions` and `@JWT`\\n\\nThis option allows you to override the behavior of the configuration specified globally with the key `settings.session.csrf.enabled` or the key `settings.jwt.csrf.enabled`.\\n\\nIt can be useful for example to disable the CSRF protection on a specific route.\\n\\n```typescript\\nimport { HttpResponseOK, Post, UseSessions } from \'@foal/core\';\\n\\nexport class ApiController {\\n  @Post(\'/foo\')\\n  @UseSessions({ cookie: true })\\n  foo() {\\n    // This method has the CSRF protection enabled.\\n    return new HttpResponseOK();\\n  }\\n\\n  @Post(\'/bar\')\\n  @UseSessions({ cookie: true, csrf: false })\\n  bar() {\\n    // This method does not have the CSRF protection enabled.\\n    return new HttpResponseOK();\\n  }\\n}\\n\\n```\\n\\n## Support of `better-sqlite3`\\n\\nWhen using Foal with SQLite, you now have the choice between two drivers: `sqlite3` and `better-sqlite3`. The package `better-sqlite3` is used by default in new projects starting from this version on."}]}')}}]);