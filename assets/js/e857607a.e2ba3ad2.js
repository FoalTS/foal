"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[53346],{28453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>a});var i=s(96540);const r={},c=i.createContext(r);function t(e){const n=i.useContext(c);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),i.createElement(c.Provider,{value:n},e.children)}},44246:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>p,frontMatter:()=>t,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"cli/shell-scripts","title":"Shell Scripts","description":"Shell scripts are an easy way of executing a piece of code from the command line. They can be used in a variety of scenarios and can be a simple code snippet or be more complex and call application services.","source":"@site/docs/cli/shell-scripts.md","sourceDirName":"cli","slug":"/cli/shell-scripts","permalink":"/docs/cli/shell-scripts","draft":false,"unlisted":false,"editUrl":"https://github.com/FoalTS/foal/edit/master/docs/docs/cli/shell-scripts.md","tags":[],"version":"current","frontMatter":{"title":"Shell Scripts"},"sidebar":"someSidebar","previous":{"title":"Commands","permalink":"/docs/cli/commands"},"next":{"title":"Code Generation","permalink":"/docs/cli/code-generation"}}');var r=s(74848),c=s(28453);const t={title:"Shell Scripts"},a=void 0,o={},l=[{value:"Structure",id:"structure",level:2},{value:"Generating, Building and Running Shell Scripts",id:"generating-building-and-running-shell-scripts",level:2},{value:"Accessing Services",id:"accessing-services",level:2},{value:"Logging",id:"logging",level:2}];function d(e){const n={code:"code",em:"em",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Shell scripts are an easy way of executing a piece of code from the command line. They can be used in a variety of scenarios and can be a simple code snippet or be more complex and call application services."}),"\n",(0,r.jsx)(n.h2,{id:"structure",children:"Structure"}),"\n",(0,r.jsxs)(n.p,{children:["A shell script file is divided into two parts: a ",(0,r.jsx)(n.code,{children:"main"})," function, which contains the code to be executed, and a ",(0,r.jsx)(n.code,{children:"schema"}),", which parses and validates the arguments given on the command line and passes them on to the ",(0,r.jsx)(n.code,{children:"main"})," function. The file must be located in the ",(0,r.jsx)(n.code,{children:"src/scripts"})," directory."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Example: src/scripts/create-user.ts"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// 3p\nimport { ServiceManager } from '@foal/core';\n\n// App\nimport { dataSource } from '../db';\nimport { User } from '../app/entities';\n\nexport const schema = {\n  type: 'object',\n  properties: {\n    email: { type: 'string' },\n  },\n  required: ['email'],\n  additionalProperties: false\n}\n\nexport async function main(args: { email: string }) {\n  await dataSource.initialize();\n\n  try {\n    const user = new User();\n    user.email = args.email;\n\n    await user.save();\n  } finally {\n    dataSource.destroy();\n  }\n}\n\n"})}),"\n",(0,r.jsx)(n.h2,{id:"generating-building-and-running-shell-scripts",children:"Generating, Building and Running Shell Scripts"}),"\n",(0,r.jsxs)(n.p,{children:["To generate a new script, you can use the CLI ",(0,r.jsx)(n.code,{children:"generate"})," command:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npx foal generate script create-user\n# or\nnpx foal g script create-user\n"})}),"\n",(0,r.jsx)(n.p,{children:"If you need to build the script once, run this command:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm run build\n"})}),"\n",(0,r.jsx)(n.p,{children:"If you need to build and watch it in dev mode, use this command:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm run dev\n"})}),"\n",(0,r.jsx)(n.p,{children:"Then you can run the script as follows:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npx foal run create-user email=foo@foalts.org\n"})}),"\n",(0,r.jsx)(n.h2,{id:"accessing-services",children:"Accessing Services"}),"\n",(0,r.jsxs)(n.p,{children:["If you wish to access a service, you can use the ",(0,r.jsx)(n.code,{children:"ServiceManager"})," instance passed as second argument to the ",(0,r.jsx)(n.code,{children:"main"})," function."]}),"\n",(0,r.jsx)(n.p,{children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { ServiceManager } from '@foal/core';\n\nimport { MyService } from '../app/services';\n\nexport function main(args: any, services: ServiceManager) {\n  const myService = services.get(MyService);\n\n  // Do something with myService.\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"logging",children:"Logging"}),"\n",(0,r.jsx)(n.p,{children:"When a script is executed, the script name as well as a script ID are added to the log context. Like the request ID in an HTTP request, the script ID is added as a parameter to every log printed during script execution, including any errors. In this way, it is possible to aggregate all logs from a single script execution in a logging program."}),"\n",(0,r.jsx)(n.p,{children:"If you wish to access the logger in the script, it is passed as the third argument to the main function."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { Logger, ServiceManager } from '@foal/core';\n\n\nexport function main(args: any, services: ServiceManager, logger: Logger) {\n  logger.info('Hello world!');\n}\n"})})]})}function p(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);