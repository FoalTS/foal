"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[36229],{28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>a});var r=n(96540);const s={},o=r.createContext(s);function i(e){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(o.Provider,{value:t},e.children)}},54561:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"tutorials/real-world-example-with-react/tuto-9-authenticated-api","title":"Authenticating Users in the API","description":"Now that the login is configured, you can add two new routes to create and delete stories. Their access will be limited to authenticated users.","source":"@site/versioned_docs/version-3.x/tutorials/real-world-example-with-react/9-authenticated-api.md","sourceDirName":"tutorials/real-world-example-with-react","slug":"/tutorials/real-world-example-with-react/9-authenticated-api","permalink":"/docs/3.x/tutorials/real-world-example-with-react/9-authenticated-api","draft":false,"unlisted":false,"editUrl":"https://github.com/FoalTS/foal/edit/master/docs/versioned_docs/version-3.x/tutorials/real-world-example-with-react/9-authenticated-api.md","tags":[],"version":"3.x","sidebarPosition":9,"frontMatter":{"title":"Authenticating Users in the API","id":"tuto-9-authenticated-api","slug":"9-authenticated-api"},"sidebar":"someSidebar","previous":{"title":"Logging Users In and Out","permalink":"/docs/3.x/tutorials/real-world-example-with-react/8-authentication"},"next":{"title":"Authenticating Users in React","permalink":"/docs/3.x/tutorials/real-world-example-with-react/10-auth-with-react"}}');var s=n(74848),o=n(28453);const i={title:"Authenticating Users in the API",id:"tuto-9-authenticated-api",slug:"9-authenticated-api"},a=void 0,d={},c=[];function l(e){const t={a:"a",code:"code",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"Now that the login is configured, you can add two new routes to create and delete stories. Their access will be limited to authenticated users."}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"API endpoint"}),(0,s.jsx)(t.th,{children:"Method"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"/api/stories"})}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"POST"})}),(0,s.jsx)(t.td,{children:"Creates a new story."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"/api/stories/:storyId"})}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"DELETE"})}),(0,s.jsx)(t.td,{children:"Deletes a story."})]})]})]}),"\n",(0,s.jsxs)(t.p,{children:["Open the ",(0,s.jsx)(t.code,{children:"stories.controller.ts"})," file and add two new methods to the controller."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"import { Context, Delete, Get, HttpResponseCreated, HttpResponseNoContent, HttpResponseNotFound, HttpResponseOK, Post, UserRequired, ValidateBody, ValidatePathParam, ValidateQueryParam } from '@foal/core';\nimport { Story, User } from '../../entities';\n\nexport class StoriesController {\n\n  // readStories...\n\n  @Post()\n  @ValidateBody({\n    type: 'object',\n    properties: {\n      title: { type: 'string', maxLength: 255 },\n      link: { type: 'string', maxLength: 255 },\n    },\n    required: [ 'title', 'link' ],\n    additionalProperties: false,\n  })\n  @UserRequired()\n  async createStory(ctx: Context<User>) {\n    const story = new Story();\n    story.title = ctx.request.body.title;\n    story.link = ctx.request.body.link;\n    // Set the current user as the author of the story.\n    story.author = ctx.user;\n    await story.save();\n\n    return new HttpResponseCreated();\n  }\n\n  @Delete('/:storyId')\n  @ValidatePathParam('storyId', { type: 'number' })\n  @UserRequired()\n  async deleteStory(ctx: Context<User>, { storyId }: { storyId: number }) {\n    // Only retrieve stories whose author is the current user.\n    const story = await Story.findOneBy({ id: storyId, author: { id: ctx.user.id } });\n\n    if (!story) {\n      return new HttpResponseNotFound();\n    }\n\n    await story.remove();\n\n    return new HttpResponseNoContent();\n  }\n\n}\n"})}),"\n",(0,s.jsxs)(t.p,{children:["When sending a request to these endpoints, the ",(0,s.jsx)(t.code,{children:"@UserRequired"})," hook will return a 401 error if ",(0,s.jsx)(t.code,{children:"ctx.user"})," is null (i.e. if the user has not logged in first). But if it is, the controller method will be executed."]}),"\n",(0,s.jsxs)(t.p,{children:["Go to ",(0,s.jsx)(t.a,{href:"http://localhost:3001/swagger",children:"http://localhost:3001/swagger"})," and check that the controller is working as expected. You can, for example, first try to create a story without being connected and then log in and try again."]})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);