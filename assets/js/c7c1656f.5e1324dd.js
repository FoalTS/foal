"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3728],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(n),h=a,m=d["".concat(l,".").concat(h)]||d[h]||c[h]||o;return n?r.createElement(m,i(i({ref:t},u),{},{components:n})):r.createElement(m,i({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9326:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const o={title:"Logging Users In and Out",id:"tuto-8-authentication",slug:"8-authentication"},i=void 0,s={unversionedId:"tutorials/real-world-example-with-react/tuto-8-authentication",id:"tutorials/real-world-example-with-react/tuto-8-authentication",title:"Logging Users In and Out",description:"Stories are displayed on the home page. If we want users to be able to post new stories and upload a profile picture, we need to allow them to log in to the application.",source:"@site/docs/tutorials/real-world-example-with-react/8-authentication.md",sourceDirName:"tutorials/real-world-example-with-react",slug:"/tutorials/real-world-example-with-react/8-authentication",permalink:"/docs/tutorials/real-world-example-with-react/8-authentication",draft:!1,editUrl:"https://github.com/FoalTS/foal/edit/master/docs/docs/tutorials/real-world-example-with-react/8-authentication.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{title:"Logging Users In and Out",id:"tuto-8-authentication",slug:"8-authentication"},sidebar:"someSidebar",previous:{title:"The Frontend App",permalink:"/docs/tutorials/real-world-example-with-react/7-add-frontend"},next:{title:"Authenticating Users in the API",permalink:"/docs/tutorials/real-world-example-with-react/9-authenticated-api"}},l={},p=[],u={toc:p};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Stories are displayed on the home page. If we want users to be able to post new stories and upload a profile picture, we need to allow them to log in to the application."),(0,a.kt)("p",null,"To do this, we will use Foal's sessions with cookies."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"FoalTS offers many options for user authentication. For example, you can send session tokens with the ",(0,a.kt)("inlineCode",{parentName:"p"},"Authorization")," header or use stateless tokens with JWT. We won't explore all these possibilities in this tutorial but you can find the full documentation ",(0,a.kt)("a",{parentName:"p",href:"/docs/authentication-and-access-control/quick-start"},"here"),".")),(0,a.kt)("p",null,"Open the file ",(0,a.kt)("inlineCode",{parentName:"p"},"api.controller.ts")," and add the ",(0,a.kt)("inlineCode",{parentName:"p"},"@UseSessions")," hook at the top of the class."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { ApiInfo, ApiServer, controller, UseSessions } from '@foal/core';\nimport { User } from '../entities';\nimport { StoriesController } from './api';\n\n@ApiInfo({\n  title: 'Application API',\n  version: '1.0.0'\n})\n@ApiServer({\n  url: '/api'\n})\n@UseSessions({\n  cookie: true,\n  user: (id: number) => User.findOneBy({ id }),\n})\nexport class ApiController {\n\n  subControllers = [\n    controller('/stories', StoriesController),\n  ];\n\n}\n\n")),(0,a.kt)("p",null,"When used with the ",(0,a.kt)("inlineCode",{parentName:"p"},"cookie")," option, this hook ensures that ",(0,a.kt)("inlineCode",{parentName:"p"},"ctx.session")," is always defined in every method of the controller and its subcontrollers. This object can be used to store information between multiple requests, such as a user ID for example. You will use it to authenticate users."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"In the background, Foal generates a unique session token for each user using the API and stores it in a cookie on the client host. When the client makes a new request, the browser automatically sends the token with the request so that the server can retrieve the session information. The session data is stored in the database in the ",(0,a.kt)("em",{parentName:"p"},"sessions")," table."),(0,a.kt)("p",{parentName:"blockquote"},"But you don't need to worry about it, everything is managed by Foal.")),(0,a.kt)("p",null,"Create a new controller."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"foal generate controller api/auth --register\n")),(0,a.kt)("p",null,"Open the new created file and add two routes."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"API endpoint"),(0,a.kt)("th",{parentName:"tr",align:null},"Method"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"/api/auth/login")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"POST")),(0,a.kt)("td",{parentName:"tr",align:null},"Logs the user in. An email and a password are expected in the request body.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"/api/auth/logout")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"POST")),(0,a.kt)("td",{parentName:"tr",align:null},"Logs the user out.")))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Context, hashPassword, HttpResponseNoContent, HttpResponseOK, HttpResponseUnauthorized, Post, ValidateBody, verifyPassword } from '@foal/core';\nimport { User } from '../../entities';\n\nconst credentialsSchema = {\n  type: 'object',\n  properties: {\n    email: { type: 'string', format: 'email', maxLength: 255 },\n    password: { type: 'string' }\n  },\n  required: [ 'email', 'password' ],\n  additionalProperties: false,\n};\n\nexport class AuthController {\n\n  @Post('/login')\n  @ValidateBody(credentialsSchema)\n  async login(ctx: Context<User|null>) {\n    const email = ctx.request.body.email;\n    const password = ctx.request.body.password;\n\n    const user = await User.findOneBy({ email });\n    if (!user) {\n      return new HttpResponseUnauthorized();\n    }\n\n    if (!(await verifyPassword(password, user.password))) {\n      return new HttpResponseUnauthorized();\n    }\n\n    ctx.session!.setUser(user);\n    ctx.user = user;\n\n    return new HttpResponseOK({\n      id: user.id,\n      name: user.name,\n    });\n  }\n\n  @Post('/logout')\n  async logout(ctx: Context) {\n    await ctx.session!.destroy();\n    return new HttpResponseNoContent();\n  }\n\n}\n\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"login")," method first checks that the user exists and that the credentials provided are correct. If so, it associates the user with the current session."),(0,a.kt)("p",null,"On subsequent requests, the ",(0,a.kt)("em",{parentName:"p"},"UseSessions")," hook will retrieve the user's ID from the session and set the ",(0,a.kt)("inlineCode",{parentName:"p"},"ctx.user")," property accordingly. If the user has not previously logged in, then ",(0,a.kt)("inlineCode",{parentName:"p"},"ctx.user")," will be ",(0,a.kt)("inlineCode",{parentName:"p"},"null"),". If they have, then ",(0,a.kt)("inlineCode",{parentName:"p"},"ctx.user")," will be an instance of ",(0,a.kt)("inlineCode",{parentName:"p"},"User"),". This is made possible by the ",(0,a.kt)("inlineCode",{parentName:"p"},"user")," option we provided to the hook earlier. It is actually the function that takes the user ID as parameter and returns the value to assign to ",(0,a.kt)("inlineCode",{parentName:"p"},"ctx.user"),"."))}c.isMDXComponent=!0}}]);