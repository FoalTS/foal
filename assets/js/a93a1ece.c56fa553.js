"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7127],{21896:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var o=t(74848),s=t(28453);const r={title:"Auth Controllers and Hooks"},i=void 0,l={id:"tutorials/multi-user-todo-list/tuto-5-auth-controllers-and-hooks",title:"Auth Controllers and Hooks",description:"So far, you have defined the User model and written a script to create new users with their password and email address. The next step is to create a controller to log users in or out.",source:"@site/versioned_docs/version-1.x/tutorials/multi-user-todo-list/tuto-5-auth-controllers-and-hooks.md",sourceDirName:"tutorials/multi-user-todo-list",slug:"/tutorials/multi-user-todo-list/tuto-5-auth-controllers-and-hooks",permalink:"/docs/1.x/tutorials/multi-user-todo-list/tuto-5-auth-controllers-and-hooks",draft:!1,unlisted:!1,editUrl:"https://github.com/FoalTS/foal/edit/master/docs/versioned_docs/version-1.x/tutorials/multi-user-todo-list/tuto-5-auth-controllers-and-hooks.md",tags:[],version:"1.x",frontMatter:{title:"Auth Controllers and Hooks"},sidebar:"someSidebar",previous:{title:"The Shell Scripts",permalink:"/docs/1.x/tutorials/multi-user-todo-list/tuto-3-the-shell-scripts"},next:{title:"Todos & Ownership",permalink:"/docs/1.x/tutorials/multi-user-todo-list/tuto-6-todos-and-ownership"}},d={},c=[{value:"The Login and Main Pages",id:"the-login-and-main-pages",level:2},{value:"Login Controllers",id:"login-controllers",level:2},{value:"The TokenRequired Hook",id:"the-tokenrequired-hook",level:2}];function a(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["So far, you have defined the ",(0,o.jsx)(n.code,{children:"User"})," model and written a script to create new users with their password and email address. The next step is to create a controller to log users in or out."]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["Before this, you must provide a ",(0,o.jsx)(n.em,{children:"secret"})," to the authentication system. You can generate such one with the following command:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"foal createsecret\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Then create a ",(0,o.jsx)(n.code,{children:".env"})," file containing your secret at the root of your project."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:".env"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"SETTINGS_SESSION_SECRET=my-secret\n"})}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Here is the architecture that we want:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["Users load the page ",(0,o.jsx)(n.code,{children:"/signin"}),", enter their credentials and then are redirected to the page ",(0,o.jsx)(n.code,{children:"/"})," if the credentials are correct. If they are not, users are redirected to ",(0,o.jsx)(n.code,{children:"/signin?bad_credentials=true"}),". The ",(0,o.jsx)(n.code,{children:"bad_credentials"})," parameter tells the page to show the error message ",(0,o.jsx)(n.code,{children:"Invalid email or password"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:["Users can view, create and delete their todos in the page ",(0,o.jsx)(n.code,{children:"/"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:["When they click the button ",(0,o.jsx)(n.code,{children:"Log out"}),", they are deconnected and redirected to the page ",(0,o.jsx)(n.code,{children:"/signin"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["When the user presses the ",(0,o.jsx)(n.code,{children:"Log in"})," button in the login page, the page requests ",(0,o.jsx)(n.code,{children:"POST /auth/login"})," with the credentials as body."]}),"\n",(0,o.jsxs)(n.p,{children:["When the user presses the ",(0,o.jsx)(n.code,{children:"Log out"})," button in the todo-list page, the page requests ",(0,o.jsx)(n.code,{children:"GET /auth/logout"}),"."]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["In this scenario, the authentication process is handled with sessions and http redirections. You will not use ",(0,o.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/JSON_Web_Token#Use",children:"JWT tokens"})," which are sometimes used in ",(0,o.jsx)(n.em,{children:"Single Page Applications"})," (SPA)."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"the-login-and-main-pages",children:"The Login and Main Pages"}),"\n",(0,o.jsxs)(n.p,{children:["Download the html, css and js files by clicking ",(0,o.jsx)(n.a,{href:"https://foalts.org/multi-user-todo-list-v1.zip",children:"here"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["Empty the ",(0,o.jsx)(n.code,{children:"public/"})," directory."]}),"\n",(0,o.jsxs)(n.p,{children:["Then move ",(0,o.jsx)(n.code,{children:"script.js"})," and ",(0,o.jsx)(n.code,{children:"style.css"})," to ",(0,o.jsx)(n.code,{children:"public/"})," and the ",(0,o.jsx)(n.code,{children:"index.html"}),", ",(0,o.jsx)(n.code,{children:"signin.html"})," and ",(0,o.jsx)(n.code,{children:"signup.html"})," files to a new directory ",(0,o.jsx)(n.code,{children:"templates/"})," at the root of your project."]}),"\n",(0,o.jsxs)(n.p,{children:["Open the ",(0,o.jsx)(n.code,{children:"app.controller.ts"})," file and add three new routes to serve the pages."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import { controller, Get, render } from '@foal/core';\n\nimport { ApiController } from './controllers';\n\nexport class AppController {\n  subControllers = [\n    controller('/api', ApiController)\n  ];\n\n  @Get('/')\n  index() {\n    return render('templates/index.html');\n  }\n\n  @Get('/signin')\n  signin() {\n    return render('templates/signin.html');\n  }\n\n  @Get('/signup')\n  signup() {\n    return render('templates/signup.html');\n  }\n}\n\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Open your browser and go to ",(0,o.jsx)(n.code,{children:"http://localhost:3001/signin"}),". The login page should show up."]}),"\n",(0,o.jsx)(n.h2,{id:"login-controllers",children:"Login Controllers"}),"\n",(0,o.jsxs)(n.p,{children:["The next step is to create a controller that logs the users in or out and redirects them after the operation succeeds or fails. It needs two routes ",(0,o.jsx)(n.code,{children:"/login"})," and ",(0,o.jsx)(n.code,{children:"/logout"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"foal generate controller auth --register\n"})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"--register"})," flag directly adds a new line in ",(0,o.jsx)(n.code,{children:"app.controller.ts"})," to declare the ",(0,o.jsx)(n.code,{children:"AuthController"})," as a sub-controller of ",(0,o.jsx)(n.code,{children:"AppController"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Open the new file ",(0,o.jsx)(n.code,{children:"auth.controller.ts"})," and replace its content."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// 3p\nimport {\n  Context, dependency, HttpResponseRedirect, Post, removeSessionCookie,\n  Session, setSessionCookie, TokenRequired, ValidateBody, verifyPassword\n} from '@foal/core';\nimport { TypeORMStore } from '@foal/typeorm';\nimport { getRepository } from 'typeorm';\n\nimport { User } from '../entities';\n\nexport class AuthController {\n  @dependency\n  store: TypeORMStore;\n\n  @Post('/login')\n  // Validate the request body.\n  @ValidateBody({\n    additionalProperties: false,\n    properties: {\n        email: { type: 'string', format: 'email' },\n        password: { type: 'string' }\n    },\n    required: ['email', 'password'],\n    type: 'object',\n  })\n  async login(ctx: Context) {\n    const user = await getRepository(User).findOne({ email: ctx.request.body.email });\n\n    if (!user) {\n      // Redirect the user to /signin if the authentication fails.\n      return new HttpResponseRedirect('/signin?bad_credentials=true');\n    }\n\n    if (!await verifyPassword(ctx.request.body.password, user.password)) {\n      // Redirect the user to /signin if the authentication fails.\n      return new HttpResponseRedirect('/signin?bad_credentials=true');\n    }\n\n    // Create a session associated with the user.\n    const session = await this.store.createAndSaveSessionFromUser(user);\n\n    // Redirect the user to the home page on success.\n    const response = new HttpResponseRedirect('/');\n    // Save the session token in a cookie in order to authenticate\n    // the user in future requests.\n    setSessionCookie(response, session.getToken());\n    return response;\n  }\n\n  @Post('/logout')\n  @TokenRequired({\n    cookie: true,\n    extendLifeTimeOrUpdate: false,\n    redirectTo: '/signin',\n    store: TypeORMStore,\n  })\n  async logout(ctx: Context<User, Session>) {\n    // Destroy the user session.\n    await this.store.destroy(ctx.session.sessionID);\n\n    // Redirect the user to the home page on success.\n    const response = new HttpResponseRedirect('/signin');\n    // Remove the cookie where the session token is stored.\n    removeSessionCookie(response);\n    return response;\n  }\n}\n\n"})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["Writting ",(0,o.jsx)(n.code,{children:"getRepository(User).findOne({ email: email, password: password })"})," cannot work since the password needs to be hashed."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Go back to your browser and try to log in with the email ",(0,o.jsx)(n.code,{children:"john@foalts.org"})," and the password ",(0,o.jsx)(n.code,{children:"mary_password"}),". You are redirected to the same page and the message ",(0,o.jsx)(n.code,{children:"Invalid email or password."})," shows up. Now use the password ",(0,o.jsx)(n.code,{children:"john_password"})," and try to log in. You are redirected to the todo-list page where all todos are listed. If you click on the button ",(0,o.jsx)(n.code,{children:"Log out"})," you are then redirected to the login page!"]}),"\n",(0,o.jsx)(n.h2,{id:"the-tokenrequired-hook",children:"The TokenRequired Hook"}),"\n",(0,o.jsx)(n.p,{children:"Great, so far you can authenticate users. But as you have not yet added access control to the todo-list page and the API, unauthenticated users can still access it."}),"\n",(0,o.jsxs)(n.p,{children:["The usual way to handle authorization is to use a ",(0,o.jsx)(n.em,{children:"hook"}),". In this case, you are going to use the built-in hook ",(0,o.jsx)(n.code,{children:"TokenRequired"})," which returns a 401 error or redirects the user if user is not logged in."]}),"\n",(0,o.jsxs)(n.p,{children:["Update ",(0,o.jsx)(n.code,{children:"app.controller.ts"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import { controller, Get, render, TokenRequired } from '@foal/core';\nimport { TypeORMStore } from '@foal/typeorm';\n\nimport { ApiController, AuthController } from './controllers';\n\nexport class AppController {\n\n  @Get('/')\n  @TokenRequired({\n    // The session token is expected to be in a cookie.\n    cookie: true,\n    // Redirect the user to /signin if user is not logged in.\n    redirectTo: '/signin',\n    // Specify the \"store\" where the session was created.\n    store: TypeORMStore\n  })\n  index() {\n    ...\n  }\n\n  ...\n\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Update ",(0,o.jsx)(n.code,{children:"api.controller.ts"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import {\n  Context, Delete, Get, HttpResponseCreated, HttpResponseNoContent,\n  HttpResponseNotFound, HttpResponseOK, Post,\n  TokenRequired, ValidateBody, ValidatePathParam\n} from '@foal/core';\nimport { fetchUser, TypeORMStore } from '@foal/typeorm';\nimport { getRepository } from 'typeorm';\n\nimport { Todo, User } from '../entities';\n\n\n@TokenRequired({\n  cookie: true,\n  store: TypeORMStore,\n  // Make ctx.user be an instance of User.\n  user: fetchUser(User),\n})\nexport class ApiController {\n\n  ...\n\n}\n"})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:"When a hook decorates a controller class, it applies to all the routes of the controller and its sub-controllers."}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Go to ",(0,o.jsx)(n.code,{children:"http://localhost:3001"}),". If you are not logged in you should be redirected to the login page."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>l});var o=t(96540);const s={},r=o.createContext(s);function i(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);